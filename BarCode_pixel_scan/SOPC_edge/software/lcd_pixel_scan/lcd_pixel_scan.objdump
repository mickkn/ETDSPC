
lcd_pixel_scan.elf:     file format elf32-littlenios2
lcd_pixel_scan.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00007b74 memsz 0x00007b74 flags r-x
    LOAD off    0x00008b94 vaddr 0x01007b94 paddr 0x010097b4 align 2**12
         filesz 0x00001c20 memsz 0x00001c20 flags rw-
    LOAD off    0x0000b3d4 vaddr 0x0100b3d4 paddr 0x0100b3d4 align 2**12
         filesz 0x00000000 memsz 0x000002e4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007668  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000378  0100781c  0100781c  0000881c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c20  01007b94  010097b4  00008b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e4  0100b3d4  0100b3d4  0000b3d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000a7b4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ad8  00000000  00000000  0000a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001011  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002121b  00000000  00000000  0000c2c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000640a  00000000  00000000  0002d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fadd  00000000  00000000  000338ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001470  00000000  00000000  000433cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001c4f  00000000  00000000  0004483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004d5d  00000000  00000000  0004648b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0004b1e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0004b228  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004e020  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0004e023  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004e026  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004e027  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0004e028  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0004e02c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0004e030  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0004e034  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0004e03f  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0004e04a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  0004e055  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  0004e05f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b4ad8  00000000  00000000  0004e08d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0100781c l    d  .rodata	00000000 .rodata
01007b94 l    d  .rwdata	00000000 .rwdata
0100b3d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010007b4 l     F .text	00000058 std
010008c0 l     F .text	00000008 __fp_lock
010008c8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
01007b94 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
01003140 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010038cc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
01003b50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01003bb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01003cb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01003dd8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01003eb8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01004018 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
01004124 l     F .text	000000f8 alt_file_locked
010043a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0100452c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100979c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010047e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01008544 l     O .rwdata	00001060 jtag_uart_0
010095a4 l     O .rwdata	00000120 lcd
010096c4 l     O .rwdata	00000030 AV_Config
010096f4 l     O .rwdata	00000054 Pixel_Buffer_DMA
01009748 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
01004afc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01004d3c l     F .text	00000228 altera_avalon_jtag_uart_irq
01004f64 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
010097a0 l     O .rwdata	00000004 colstart
010055e0 l     F .text	000000b8 lcd_write_command
01005698 l     F .text	000000d4 lcd_write_data
0100576c l     F .text	000000d8 lcd_clear_screen
01005844 l     F .text	00000214 lcd_repaint_screen
01005a58 l     F .text	000000e0 lcd_scroll_up
01005b38 l     F .text	000002e4 lcd_handle_escape
01006358 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010065b8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010068dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01006f70 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
01007a11 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01007604 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
010077b8 l     F .text	00000040 alt_sim_halt
0100376c g     F .text	00000070 _isatty_r
01004078 g     F .text	0000006c alt_main
010033a8 g     F .text	0000008c strcpy
010028d4 g     F .text	000000a0 _puts_r
0100b428 g     O .bss	00000100 alt_irq
010037dc g     F .text	00000078 _lseek_r
010097b4 g       *ABS*	00000000 __flash_rwdata_start
010036cc g     F .text	000000a0 __sflags
0100b6b8 g       *ABS*	00000000 __alt_heap_start
010031d4 g     F .text	00000068 __sseek
0100081c g     F .text	000000a4 __sinit
0100091c g     F .text	0000009c __sfmoreglue
01004104 g     F .text	00000020 __malloc_unlock
0100b3d4 g     O .bss	00000004 fp
010026e4 g     F .text	000000e0 memmove
0100090c g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
010014e8 g     F .text	00000074 _fstat_r
0100b3d8 g     O .bss	00000004 errno
0100b3ec g     O .bss	00000004 alt_argv
01011774 g       *ABS*	00000000 _gp
01007264 g     F .text	00000030 usleep
010083c4 g     O .rwdata	00000180 alt_fd_list
01006a04 g     F .text	00000094 alt_find_dev
01002644 g     F .text	000000a0 memcpy
01000900 g     F .text	0000000c _cleanup_r
01007048 g     F .text	00000078 alt_io_redirect
0100781c g       *ABS*	00000000 __DTOR_END__
01002974 g     F .text	00000014 puts
0100517c g     F .text	00000224 altera_avalon_jtag_uart_read
01001e0c g     F .text	00000014 malloc
01003a08 g     F .text	00000008 __udivsi3
01003d14 g     F .text	000000c4 isatty
0100b3dc g     O .bss	00000004 __malloc_top_pad
0100155c g     F .text	0000049c __sfvwrite_r
0100315c g     F .text	00000070 _sbrk_r
01003854 g     F .text	00000078 _read_r
01009794 g     O .rwdata	00000004 alt_max_fd
01000460 g     F .text	00000110 _fclose_r
01000780 g     F .text	00000034 fflush
0100b3e0 g     O .bss	00000004 __malloc_max_sbrked_mem
01003f24 g     F .text	000000f4 lseek
01009778 g     O .rwdata	00000004 _global_impure_ptr
01002988 g     F .text	000005f4 _realloc_r
0100b6b8 g       *ABS*	00000000 __bss_end
01006e78 g     F .text	000000f8 alt_iic_isr_register
01007158 g     F .text	0000010c alt_tick
010097b0 g     O .rwdata	00000004 __ctype_ptr
010008e8 g     F .text	00000018 __fp_lock_all
01006e30 g     F .text	00000048 alt_ic_irq_enabled
010070c0 g     F .text	00000098 alt_alarm_stop
0100b3f4 g     O .bss	00000004 alt_irq_active
010002ac g     F .text	000000bc setLCD2
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100839c g     O .rwdata	00000028 alt_dev_null
0100680c g     F .text	0000001c alt_dcache_flush_all
010097b4 g       *ABS*	00000000 __ram_rwdata_end
0100978c g     O .rwdata	00000008 alt_dev_list
010046c0 g     F .text	00000124 write
01007b94 g       *ABS*	00000000 __ram_rodata_end
01003bdc g     F .text	000000d8 fstat
01003318 g     F .text	00000090 strcat
01003a10 g     F .text	00000008 __umodsi3
0100b6b8 g       *ABS*	00000000 end
01005e1c g     F .text	0000053c altera_avalon_lcd_16207_write
010014c4 g     F .text	00000024 fseek
01004c7c g     F .text	000000c0 altera_avalon_jtag_uart_init
01007818 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01006628 g     F .text	00000090 alt_avalon_timer_sc_init
010053a0 g     F .text	00000240 altera_avalon_jtag_uart_write
0100080c g     F .text	00000004 __sfp_lock_acquire
01002560 g     F .text	000000e4 memchr
01000d74 g     F .text	00000314 _free_r
01007608 g     F .text	000001b0 __call_exitprocs
01009780 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
0100b3f8 g     O .bss	00000004 _alt_tick_rate
0100b3fc g     O .bss	00000004 _alt_nticks
01004408 g     F .text	00000124 read
01004878 g     F .text	00000284 alt_sys_init
010001f0 g     F .text	000000bc setLCD1
0100285c g     F .text	00000078 _open_r
010074d0 g     F .text	00000134 __register_exitproc
01005014 g     F .text	00000074 altera_avalon_jtag_uart_close
01003a18 g     F .text	00000038 __mulsi3
01007b94 g       *ABS*	00000000 __ram_rwdata_start
0100781c g       *ABS*	00000000 __ram_rodata_start
0100b400 g     O .bss	00000028 __malloc_current_mallinfo
01004b34 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01006bb8 g     F .text	000000d0 alt_get_fd
010072b4 g     F .text	0000015c alt_busy_sleep
0100365c g     F .text	00000070 _close_r
0100745c g     F .text	00000074 memcmp
01004be4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100b6b8 g       *ABS*	00000000 __alt_stack_base
01004c2c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01001b78 g     F .text	000000ac _fwrite_r
01003520 g     F .text	0000013c __swsetup_r
010009b8 g     F .text	000000f0 __sfp
01007f94 g     O .rwdata	00000408 __malloc_av_
01000818 g     F .text	00000004 __sinit_lock_release
010032b8 g     F .text	00000060 __sread
01006a98 g     F .text	00000120 alt_find_file
01006828 g     F .text	000000b4 alt_dev_llist_insert
010040e4 g     F .text	00000020 __malloc_lock
01004604 g     F .text	000000bc sbrk
01000584 g     F .text	000001fc _fflush_r
01000b9c g     F .text	0000001c fopen
0100b3d4 g       *ABS*	00000000 __bss_start
010027c4 g     F .text	00000098 memset
01000368 g     F .text	000000f8 main
0100b3f0 g     O .bss	00000004 alt_envp
0100b3e4 g     O .bss	00000004 __malloc_max_total_mem
01004b8c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01006424 g     F .text	0000013c altera_avalon_lcd_16207_init
010031cc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01000570 g     F .text	00000014 fclose
0100b528 g     O .bss	00000190 _atexit0
01001e20 g     F .text	00000740 _malloc_r
01009798 g     O .rwdata	00000004 alt_errno
01001ac0 g     F .text	000000b8 _fwalk
01003948 g     F .text	00000060 __divsi3
01000c48 g     F .text	0000012c _malloc_trim_r
0100781c g       *ABS*	00000000 __CTOR_END__
0100781c g       *ABS*	00000000 __flash_rodata_start
0100781c g       *ABS*	00000000 __DTOR_LIST__
01004844 g     F .text	00000034 alt_irq_init
0100458c g     F .text	00000078 alt_release_fd
01007410 g     F .text	00000014 atexit
010034a8 g     F .text	00000078 _write_r
01009774 g     O .rwdata	00000004 _impure_ptr
0100b3e8 g     O .bss	00000004 alt_argc
010069a0 g     F .text	00000064 _do_dtors
01001088 g     F .text	0000043c _fseek_r
01002f7c g     F .text	000001c4 __srefill_r
01000000 g       *ABS*	00000000 __alt_mem_sdram_0
01000020 g       .exceptions	00000000 alt_irq_entry
010008d0 g     F .text	00000018 __fp_unlock_all
01006560 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
01009784 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01006ca4 g     F .text	00000050 alt_ic_isr_register
01001c24 g     F .text	00000040 fwrite
010097b4 g       *ABS*	00000000 _edata
0100b6b8 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01005088 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01000bb8 g     F .text	00000074 _fputs_r
01006d90 g     F .text	000000a0 alt_ic_irq_disable
00084000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
0100323c g     F .text	0000007c __swrite
0100977c g     O .rwdata	00000004 __malloc_trim_threshold
01007294 g     F .text	00000020 altera_nios2_qsys_irq_init
01007424 g     F .text	00000038 exit
010019f8 g     F .text	000000c8 _fwalk_reent
010039a8 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01000810 g     F .text	00000004 __sfp_lock_release
01007910 g     O .rodata	00000101 _ctype_
01000aa8 g     F .text	000000f4 _fopen_r
010077f8 g     F .text	00000020 _exit
010066b8 g     F .text	00000154 alt_alarm_start
01001c64 g     F .text	00000194 __smakebuf_r
01003434 g     F .text	00000074 strlen
0100421c g     F .text	0000018c open
01006c88 g     F .text	0000001c alt_icache_flush_all
01000c2c g     F .text	0000001c fputs
010097a4 g     O .rwdata	00000004 alt_priority_mask
01006cf4 g     F .text	0000009c alt_ic_irq_enable
010097a8 g     O .rwdata	00000008 alt_alarm_list
0100693c g     F .text	00000064 _do_ctors
01003a50 g     F .text	00000100 close
01003e38 g     F .text	00000080 alt_load
01001df8 g     F .text	00000014 free
01000814 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18ed0a04 	addi	r3,r3,-19416
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18ed0a04 	addi	r3,r3,-19416
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d685dd14 	ori	gp,gp,6004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001c8:	10acf514 	ori	r2,r2,46036

    movhi r3, %hi(__bss_end)
 10001cc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001d0:	18edae14 	ori	r3,r3,46776

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	1003e380 	call	1003e38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	10040780 	call	1004078 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <setLCD1>:
	} vectorType;

FILE *fp;

void setLCD1(char *text)
{
 10001f0:	defffb04 	addi	sp,sp,-20
 10001f4:	dfc00415 	stw	ra,16(sp)
 10001f8:	df000315 	stw	fp,12(sp)
 10001fc:	df000304 	addi	fp,sp,12
 1000200:	e13fff15 	stw	r4,-4(fp)
	char* msg_prefix = "\x1b ";
 1000204:	00804034 	movhi	r2,256
 1000208:	109e0704 	addi	r2,r2,30748
 100020c:	e0bffe15 	stw	r2,-8(fp)
	char* msg = malloc(strlen(text)+6);
 1000210:	e13fff17 	ldw	r4,-4(fp)
 1000214:	10034340 	call	1003434 <strlen>
 1000218:	11000184 	addi	r4,r2,6
 100021c:	1001e0c0 	call	1001e0c <malloc>
 1000220:	e0bffd15 	stw	r2,-12(fp)

	strcpy(msg, msg_prefix);
 1000224:	e13ffd17 	ldw	r4,-12(fp)
 1000228:	e17ffe17 	ldw	r5,-8(fp)
 100022c:	10033a80 	call	10033a8 <strcpy>
	strcat(msg, text);
 1000230:	e13ffd17 	ldw	r4,-12(fp)
 1000234:	e17fff17 	ldw	r5,-4(fp)
 1000238:	10033180 	call	1003318 <strcat>

	fp = fopen(lcd, "w");
 100023c:	01004034 	movhi	r4,256
 1000240:	211e0804 	addi	r4,r4,30752
 1000244:	01404034 	movhi	r5,256
 1000248:	295e0b04 	addi	r5,r5,30764
 100024c:	1000b9c0 	call	1000b9c <fopen>
 1000250:	d0a71815 	stw	r2,-25504(gp)

	fprintf(fp, "%s", SET_POS(1,1));
 1000254:	d1e71817 	ldw	r7,-25504(gp)
 1000258:	01004034 	movhi	r4,256
 100025c:	211e0c04 	addi	r4,r4,30768
 1000260:	01400044 	movi	r5,1
 1000264:	01800184 	movi	r6,6
 1000268:	1001c240 	call	1001c24 <fwrite>
	fprintf(fp, "%s", CLR_LINE());
 100026c:	d1e71817 	ldw	r7,-25504(gp)
 1000270:	01004034 	movhi	r4,256
 1000274:	211e0e04 	addi	r4,r4,30776
 1000278:	01400044 	movi	r5,1
 100027c:	018000c4 	movi	r6,3
 1000280:	1001c240 	call	1001c24 <fwrite>
	fprintf(fp, "%s", msg);
 1000284:	d1671817 	ldw	r5,-25504(gp)
 1000288:	e13ffd17 	ldw	r4,-12(fp)
 100028c:	1000c2c0 	call	1000c2c <fputs>

	fclose(fp);
 1000290:	d1271817 	ldw	r4,-25504(gp)
 1000294:	10005700 	call	1000570 <fclose>
}
 1000298:	e037883a 	mov	sp,fp
 100029c:	dfc00117 	ldw	ra,4(sp)
 10002a0:	df000017 	ldw	fp,0(sp)
 10002a4:	dec00204 	addi	sp,sp,8
 10002a8:	f800283a 	ret

010002ac <setLCD2>:

void setLCD2(char *text)
{
 10002ac:	defffb04 	addi	sp,sp,-20
 10002b0:	dfc00415 	stw	ra,16(sp)
 10002b4:	df000315 	stw	fp,12(sp)
 10002b8:	df000304 	addi	fp,sp,12
 10002bc:	e13fff15 	stw	r4,-4(fp)
	char* msg_prefix = "\x1b ";
 10002c0:	00804034 	movhi	r2,256
 10002c4:	109e0704 	addi	r2,r2,30748
 10002c8:	e0bffe15 	stw	r2,-8(fp)
	char* msg = malloc(strlen(text)+6);
 10002cc:	e13fff17 	ldw	r4,-4(fp)
 10002d0:	10034340 	call	1003434 <strlen>
 10002d4:	11000184 	addi	r4,r2,6
 10002d8:	1001e0c0 	call	1001e0c <malloc>
 10002dc:	e0bffd15 	stw	r2,-12(fp)

	strcpy(msg, msg_prefix);
 10002e0:	e13ffd17 	ldw	r4,-12(fp)
 10002e4:	e17ffe17 	ldw	r5,-8(fp)
 10002e8:	10033a80 	call	10033a8 <strcpy>
	strcat(msg, text);
 10002ec:	e13ffd17 	ldw	r4,-12(fp)
 10002f0:	e17fff17 	ldw	r5,-4(fp)
 10002f4:	10033180 	call	1003318 <strcat>

	fp = fopen(lcd, "w");
 10002f8:	01004034 	movhi	r4,256
 10002fc:	211e0804 	addi	r4,r4,30752
 1000300:	01404034 	movhi	r5,256
 1000304:	295e0b04 	addi	r5,r5,30764
 1000308:	1000b9c0 	call	1000b9c <fopen>
 100030c:	d0a71815 	stw	r2,-25504(gp)

	fprintf(fp, "%s", SET_POS(2,1));
 1000310:	d1e71817 	ldw	r7,-25504(gp)
 1000314:	01004034 	movhi	r4,256
 1000318:	211e0f04 	addi	r4,r4,30780
 100031c:	01400044 	movi	r5,1
 1000320:	01800184 	movi	r6,6
 1000324:	1001c240 	call	1001c24 <fwrite>
	fprintf(fp, "%s", CLR_LINE());
 1000328:	d1e71817 	ldw	r7,-25504(gp)
 100032c:	01004034 	movhi	r4,256
 1000330:	211e0e04 	addi	r4,r4,30776
 1000334:	01400044 	movi	r5,1
 1000338:	018000c4 	movi	r6,3
 100033c:	1001c240 	call	1001c24 <fwrite>
	fprintf(fp, "%s", msg);
 1000340:	d1671817 	ldw	r5,-25504(gp)
 1000344:	e13ffd17 	ldw	r4,-12(fp)
 1000348:	1000c2c0 	call	1000c2c <fputs>

	fclose(fp);
 100034c:	d1271817 	ldw	r4,-25504(gp)
 1000350:	10005700 	call	1000570 <fclose>
}
 1000354:	e037883a 	mov	sp,fp
 1000358:	dfc00117 	ldw	ra,4(sp)
 100035c:	df000017 	ldw	fp,0(sp)
 1000360:	dec00204 	addi	sp,sp,8
 1000364:	f800283a 	ret

01000368 <main>:

int main()
{
 1000368:	deffeb04 	addi	sp,sp,-84
 100036c:	dfc01415 	stw	ra,80(sp)
 1000370:	df001315 	stw	fp,76(sp)
 1000374:	df001304 	addi	fp,sp,76
	printf("NIOS Running\n");		//Intro message from NIOS in console
 1000378:	01004034 	movhi	r4,256
 100037c:	211e1104 	addi	r4,r4,30788
 1000380:	10029740 	call	1002974 <puts>
	int temp_barCode[14];			//Integer array to obtain numbers from MM-bus
	char barCode[14];				//Char array to print on 16x2 LCD display

	while(1)
	{
		if(IORD_8DIRECT(BARCODE_SCAN_0_BASE, 0) == 0xFF)
 1000384:	00800274 	movhi	r2,9
 1000388:	10a50004 	addi	r2,r2,-27648
 100038c:	10800023 	ldbuio	r2,0(r2)
 1000390:	10803fd8 	cmpnei	r2,r2,255
 1000394:	1000071e 	bne	r2,zero,10003b4 <main+0x4c>
		{
			setLCD1("Analysing...");		//Set first line on LCD
 1000398:	01004034 	movhi	r4,256
 100039c:	211e1504 	addi	r4,r4,30804
 10003a0:	10001f00 	call	10001f0 <setLCD1>
			setLCD2("");					//Set second line on LCD
 10003a4:	01004034 	movhi	r4,256
 10003a8:	211e1904 	addi	r4,r4,30820
 10003ac:	10002ac0 	call	10002ac <setLCD2>
			setLCD1("Barcode:");		//Set first line on LCD
			barCode[13] = '\0';			//Zero termination
			setLCD2(barCode);			//Put barcode number from mm-bus to LCD second line
			break;						//Exit the program
		}
	}
 10003b0:	003ff406 	br	1000384 <main+0x1c>
			setLCD2("");					//Set second line on LCD
		}
		else
		{
			int i;
			for(i = 0 ; i < 13 ; i++)
 10003b4:	e03fed15 	stw	zero,-76(fp)
 10003b8:	00001a06 	br	1000424 <main+0xbc>
			{
				temp_barCode[i] = IORD_8DIRECT(BARCODE_SCAN_0_BASE, 0);	//Read MM-bus data 8-bit
 10003bc:	e0ffed17 	ldw	r3,-76(fp)
 10003c0:	00800274 	movhi	r2,9
 10003c4:	10a50004 	addi	r2,r2,-27648
 10003c8:	11000023 	ldbuio	r4,0(r2)
 10003cc:	18c5883a 	add	r2,r3,r3
 10003d0:	1085883a 	add	r2,r2,r2
 10003d4:	e0ffed04 	addi	r3,fp,-76
 10003d8:	10c5883a 	add	r2,r2,r3
 10003dc:	10800104 	addi	r2,r2,4
 10003e0:	11000015 	stw	r4,0(r2)
				barCode[i] = '0' + temp_barCode[i];						//Convert to char array
 10003e4:	e13fed17 	ldw	r4,-76(fp)
 10003e8:	e0bfed17 	ldw	r2,-76(fp)
 10003ec:	1085883a 	add	r2,r2,r2
 10003f0:	1085883a 	add	r2,r2,r2
 10003f4:	e0ffed04 	addi	r3,fp,-76
 10003f8:	10c5883a 	add	r2,r2,r3
 10003fc:	10800104 	addi	r2,r2,4
 1000400:	10800017 	ldw	r2,0(r2)
 1000404:	10800c04 	addi	r2,r2,48
 1000408:	1007883a 	mov	r3,r2
 100040c:	e0bffc04 	addi	r2,fp,-16
 1000410:	1105883a 	add	r2,r2,r4
 1000414:	10c00005 	stb	r3,0(r2)
			setLCD2("");					//Set second line on LCD
		}
		else
		{
			int i;
			for(i = 0 ; i < 13 ; i++)
 1000418:	e0bfed17 	ldw	r2,-76(fp)
 100041c:	10800044 	addi	r2,r2,1
 1000420:	e0bfed15 	stw	r2,-76(fp)
 1000424:	e0bfed17 	ldw	r2,-76(fp)
 1000428:	10800350 	cmplti	r2,r2,13
 100042c:	103fe31e 	bne	r2,zero,10003bc <main+0x54>
			{
				temp_barCode[i] = IORD_8DIRECT(BARCODE_SCAN_0_BASE, 0);	//Read MM-bus data 8-bit
				barCode[i] = '0' + temp_barCode[i];						//Convert to char array
			}
			setLCD1("Barcode:");		//Set first line on LCD
 1000430:	01004034 	movhi	r4,256
 1000434:	211e1a04 	addi	r4,r4,30824
 1000438:	10001f00 	call	10001f0 <setLCD1>
			barCode[13] = '\0';			//Zero termination
 100043c:	e03fff45 	stb	zero,-3(fp)
			setLCD2(barCode);			//Put barcode number from mm-bus to LCD second line
 1000440:	e13ffc04 	addi	r4,fp,-16
 1000444:	10002ac0 	call	10002ac <setLCD2>
			break;						//Exit the program
		}
	}
	return 0;
 1000448:	0005883a 	mov	r2,zero
}
 100044c:	e037883a 	mov	sp,fp
 1000450:	dfc00117 	ldw	ra,4(sp)
 1000454:	df000017 	ldw	fp,0(sp)
 1000458:	dec00204 	addi	sp,sp,8
 100045c:	f800283a 	ret

01000460 <_fclose_r>:
 1000460:	defffc04 	addi	sp,sp,-16
 1000464:	dc400115 	stw	r17,4(sp)
 1000468:	dc000015 	stw	r16,0(sp)
 100046c:	dfc00315 	stw	ra,12(sp)
 1000470:	dc800215 	stw	r18,8(sp)
 1000474:	2821883a 	mov	r16,r5
 1000478:	2023883a 	mov	r17,r4
 100047c:	28002926 	beq	r5,zero,1000524 <_fclose_r+0xc4>
 1000480:	100080c0 	call	100080c <__sfp_lock_acquire>
 1000484:	88000226 	beq	r17,zero,1000490 <_fclose_r+0x30>
 1000488:	88800e17 	ldw	r2,56(r17)
 100048c:	10002d26 	beq	r2,zero,1000544 <_fclose_r+0xe4>
 1000490:	8080030f 	ldh	r2,12(r16)
 1000494:	10002226 	beq	r2,zero,1000520 <_fclose_r+0xc0>
 1000498:	8809883a 	mov	r4,r17
 100049c:	800b883a 	mov	r5,r16
 10004a0:	10005840 	call	1000584 <_fflush_r>
 10004a4:	1025883a 	mov	r18,r2
 10004a8:	80800b17 	ldw	r2,44(r16)
 10004ac:	10000426 	beq	r2,zero,10004c0 <_fclose_r+0x60>
 10004b0:	81400717 	ldw	r5,28(r16)
 10004b4:	8809883a 	mov	r4,r17
 10004b8:	103ee83a 	callr	r2
 10004bc:	10002a16 	blt	r2,zero,1000568 <_fclose_r+0x108>
 10004c0:	8080030b 	ldhu	r2,12(r16)
 10004c4:	1080200c 	andi	r2,r2,128
 10004c8:	1000231e 	bne	r2,zero,1000558 <_fclose_r+0xf8>
 10004cc:	81400c17 	ldw	r5,48(r16)
 10004d0:	28000526 	beq	r5,zero,10004e8 <_fclose_r+0x88>
 10004d4:	80801004 	addi	r2,r16,64
 10004d8:	28800226 	beq	r5,r2,10004e4 <_fclose_r+0x84>
 10004dc:	8809883a 	mov	r4,r17
 10004e0:	1000d740 	call	1000d74 <_free_r>
 10004e4:	80000c15 	stw	zero,48(r16)
 10004e8:	81401117 	ldw	r5,68(r16)
 10004ec:	28000326 	beq	r5,zero,10004fc <_fclose_r+0x9c>
 10004f0:	8809883a 	mov	r4,r17
 10004f4:	1000d740 	call	1000d74 <_free_r>
 10004f8:	80001115 	stw	zero,68(r16)
 10004fc:	8000030d 	sth	zero,12(r16)
 1000500:	10008100 	call	1000810 <__sfp_lock_release>
 1000504:	9005883a 	mov	r2,r18
 1000508:	dfc00317 	ldw	ra,12(sp)
 100050c:	dc800217 	ldw	r18,8(sp)
 1000510:	dc400117 	ldw	r17,4(sp)
 1000514:	dc000017 	ldw	r16,0(sp)
 1000518:	dec00404 	addi	sp,sp,16
 100051c:	f800283a 	ret
 1000520:	10008100 	call	1000810 <__sfp_lock_release>
 1000524:	0025883a 	mov	r18,zero
 1000528:	9005883a 	mov	r2,r18
 100052c:	dfc00317 	ldw	ra,12(sp)
 1000530:	dc800217 	ldw	r18,8(sp)
 1000534:	dc400117 	ldw	r17,4(sp)
 1000538:	dc000017 	ldw	r16,0(sp)
 100053c:	dec00404 	addi	sp,sp,16
 1000540:	f800283a 	ret
 1000544:	8809883a 	mov	r4,r17
 1000548:	100081c0 	call	100081c <__sinit>
 100054c:	8080030f 	ldh	r2,12(r16)
 1000550:	103fd11e 	bne	r2,zero,1000498 <_fclose_r+0x38>
 1000554:	003ff206 	br	1000520 <_fclose_r+0xc0>
 1000558:	81400417 	ldw	r5,16(r16)
 100055c:	8809883a 	mov	r4,r17
 1000560:	1000d740 	call	1000d74 <_free_r>
 1000564:	003fd906 	br	10004cc <_fclose_r+0x6c>
 1000568:	04bfffc4 	movi	r18,-1
 100056c:	003fd406 	br	10004c0 <_fclose_r+0x60>

01000570 <fclose>:
 1000570:	00804074 	movhi	r2,257
 1000574:	10a5dd04 	addi	r2,r2,-26764
 1000578:	200b883a 	mov	r5,r4
 100057c:	11000017 	ldw	r4,0(r2)
 1000580:	10004601 	jmpi	1000460 <_fclose_r>

01000584 <_fflush_r>:
 1000584:	defffb04 	addi	sp,sp,-20
 1000588:	dcc00315 	stw	r19,12(sp)
 100058c:	dc800215 	stw	r18,8(sp)
 1000590:	dfc00415 	stw	ra,16(sp)
 1000594:	dc400115 	stw	r17,4(sp)
 1000598:	dc000015 	stw	r16,0(sp)
 100059c:	2027883a 	mov	r19,r4
 10005a0:	2825883a 	mov	r18,r5
 10005a4:	20000226 	beq	r4,zero,10005b0 <_fflush_r+0x2c>
 10005a8:	20800e17 	ldw	r2,56(r4)
 10005ac:	10005626 	beq	r2,zero,1000708 <_fflush_r+0x184>
 10005b0:	9100030b 	ldhu	r4,12(r18)
 10005b4:	20ffffcc 	andi	r3,r4,65535
 10005b8:	18e0001c 	xori	r3,r3,32768
 10005bc:	18e00004 	addi	r3,r3,-32768
 10005c0:	1880020c 	andi	r2,r3,8
 10005c4:	1000261e 	bne	r2,zero,1000660 <_fflush_r+0xdc>
 10005c8:	90c00117 	ldw	r3,4(r18)
 10005cc:	20820014 	ori	r2,r4,2048
 10005d0:	9080030d 	sth	r2,12(r18)
 10005d4:	1009883a 	mov	r4,r2
 10005d8:	00c0400e 	bge	zero,r3,10006dc <_fflush_r+0x158>
 10005dc:	92000a17 	ldw	r8,40(r18)
 10005e0:	40004026 	beq	r8,zero,10006e4 <_fflush_r+0x160>
 10005e4:	2084000c 	andi	r2,r4,4096
 10005e8:	10005326 	beq	r2,zero,1000738 <_fflush_r+0x1b4>
 10005ec:	94001417 	ldw	r16,80(r18)
 10005f0:	9080030b 	ldhu	r2,12(r18)
 10005f4:	1080010c 	andi	r2,r2,4
 10005f8:	1000481e 	bne	r2,zero,100071c <_fflush_r+0x198>
 10005fc:	91400717 	ldw	r5,28(r18)
 1000600:	9809883a 	mov	r4,r19
 1000604:	800d883a 	mov	r6,r16
 1000608:	000f883a 	mov	r7,zero
 100060c:	403ee83a 	callr	r8
 1000610:	8080261e 	bne	r16,r2,10006ac <_fflush_r+0x128>
 1000614:	9080030b 	ldhu	r2,12(r18)
 1000618:	91000417 	ldw	r4,16(r18)
 100061c:	90000115 	stw	zero,4(r18)
 1000620:	10bdffcc 	andi	r2,r2,63487
 1000624:	10ffffcc 	andi	r3,r2,65535
 1000628:	18c4000c 	andi	r3,r3,4096
 100062c:	9080030d 	sth	r2,12(r18)
 1000630:	91000015 	stw	r4,0(r18)
 1000634:	18002b26 	beq	r3,zero,10006e4 <_fflush_r+0x160>
 1000638:	0007883a 	mov	r3,zero
 100063c:	1805883a 	mov	r2,r3
 1000640:	94001415 	stw	r16,80(r18)
 1000644:	dfc00417 	ldw	ra,16(sp)
 1000648:	dcc00317 	ldw	r19,12(sp)
 100064c:	dc800217 	ldw	r18,8(sp)
 1000650:	dc400117 	ldw	r17,4(sp)
 1000654:	dc000017 	ldw	r16,0(sp)
 1000658:	dec00504 	addi	sp,sp,20
 100065c:	f800283a 	ret
 1000660:	94400417 	ldw	r17,16(r18)
 1000664:	88001f26 	beq	r17,zero,10006e4 <_fflush_r+0x160>
 1000668:	90800017 	ldw	r2,0(r18)
 100066c:	18c000cc 	andi	r3,r3,3
 1000670:	94400015 	stw	r17,0(r18)
 1000674:	1461c83a 	sub	r16,r2,r17
 1000678:	18002526 	beq	r3,zero,1000710 <_fflush_r+0x18c>
 100067c:	0005883a 	mov	r2,zero
 1000680:	90800215 	stw	r2,8(r18)
 1000684:	0400170e 	bge	zero,r16,10006e4 <_fflush_r+0x160>
 1000688:	90c00917 	ldw	r3,36(r18)
 100068c:	91400717 	ldw	r5,28(r18)
 1000690:	880d883a 	mov	r6,r17
 1000694:	800f883a 	mov	r7,r16
 1000698:	9809883a 	mov	r4,r19
 100069c:	183ee83a 	callr	r3
 10006a0:	88a3883a 	add	r17,r17,r2
 10006a4:	80a1c83a 	sub	r16,r16,r2
 10006a8:	00bff616 	blt	zero,r2,1000684 <_fflush_r+0x100>
 10006ac:	9080030b 	ldhu	r2,12(r18)
 10006b0:	00ffffc4 	movi	r3,-1
 10006b4:	10801014 	ori	r2,r2,64
 10006b8:	9080030d 	sth	r2,12(r18)
 10006bc:	1805883a 	mov	r2,r3
 10006c0:	dfc00417 	ldw	ra,16(sp)
 10006c4:	dcc00317 	ldw	r19,12(sp)
 10006c8:	dc800217 	ldw	r18,8(sp)
 10006cc:	dc400117 	ldw	r17,4(sp)
 10006d0:	dc000017 	ldw	r16,0(sp)
 10006d4:	dec00504 	addi	sp,sp,20
 10006d8:	f800283a 	ret
 10006dc:	90800f17 	ldw	r2,60(r18)
 10006e0:	00bfbe16 	blt	zero,r2,10005dc <_fflush_r+0x58>
 10006e4:	0007883a 	mov	r3,zero
 10006e8:	1805883a 	mov	r2,r3
 10006ec:	dfc00417 	ldw	ra,16(sp)
 10006f0:	dcc00317 	ldw	r19,12(sp)
 10006f4:	dc800217 	ldw	r18,8(sp)
 10006f8:	dc400117 	ldw	r17,4(sp)
 10006fc:	dc000017 	ldw	r16,0(sp)
 1000700:	dec00504 	addi	sp,sp,20
 1000704:	f800283a 	ret
 1000708:	100081c0 	call	100081c <__sinit>
 100070c:	003fa806 	br	10005b0 <_fflush_r+0x2c>
 1000710:	90800517 	ldw	r2,20(r18)
 1000714:	90800215 	stw	r2,8(r18)
 1000718:	003fda06 	br	1000684 <_fflush_r+0x100>
 100071c:	90800117 	ldw	r2,4(r18)
 1000720:	90c00c17 	ldw	r3,48(r18)
 1000724:	80a1c83a 	sub	r16,r16,r2
 1000728:	183fb426 	beq	r3,zero,10005fc <_fflush_r+0x78>
 100072c:	90800f17 	ldw	r2,60(r18)
 1000730:	80a1c83a 	sub	r16,r16,r2
 1000734:	003fb106 	br	10005fc <_fflush_r+0x78>
 1000738:	91400717 	ldw	r5,28(r18)
 100073c:	9809883a 	mov	r4,r19
 1000740:	000d883a 	mov	r6,zero
 1000744:	01c00044 	movi	r7,1
 1000748:	403ee83a 	callr	r8
 100074c:	1021883a 	mov	r16,r2
 1000750:	00bfffc4 	movi	r2,-1
 1000754:	80800226 	beq	r16,r2,1000760 <_fflush_r+0x1dc>
 1000758:	92000a17 	ldw	r8,40(r18)
 100075c:	003fa406 	br	10005f0 <_fflush_r+0x6c>
 1000760:	98c00017 	ldw	r3,0(r19)
 1000764:	00800744 	movi	r2,29
 1000768:	18bfde26 	beq	r3,r2,10006e4 <_fflush_r+0x160>
 100076c:	9080030b 	ldhu	r2,12(r18)
 1000770:	8007883a 	mov	r3,r16
 1000774:	10801014 	ori	r2,r2,64
 1000778:	9080030d 	sth	r2,12(r18)
 100077c:	003fcf06 	br	10006bc <_fflush_r+0x138>

01000780 <fflush>:
 1000780:	01404034 	movhi	r5,256
 1000784:	29416104 	addi	r5,r5,1412
 1000788:	2007883a 	mov	r3,r4
 100078c:	20000526 	beq	r4,zero,10007a4 <fflush+0x24>
 1000790:	00804074 	movhi	r2,257
 1000794:	10a5dd04 	addi	r2,r2,-26764
 1000798:	11000017 	ldw	r4,0(r2)
 100079c:	180b883a 	mov	r5,r3
 10007a0:	10005841 	jmpi	1000584 <_fflush_r>
 10007a4:	00804074 	movhi	r2,257
 10007a8:	10a5de04 	addi	r2,r2,-26760
 10007ac:	11000017 	ldw	r4,0(r2)
 10007b0:	10019f81 	jmpi	10019f8 <_fwalk_reent>

010007b4 <std>:
 10007b4:	00804034 	movhi	r2,256
 10007b8:	108c7304 	addi	r2,r2,12748
 10007bc:	20800b15 	stw	r2,44(r4)
 10007c0:	00804034 	movhi	r2,256
 10007c4:	108cae04 	addi	r2,r2,12984
 10007c8:	20800815 	stw	r2,32(r4)
 10007cc:	00c04034 	movhi	r3,256
 10007d0:	18cc8f04 	addi	r3,r3,12860
 10007d4:	00804034 	movhi	r2,256
 10007d8:	108c7504 	addi	r2,r2,12756
 10007dc:	2140030d 	sth	r5,12(r4)
 10007e0:	2180038d 	sth	r6,14(r4)
 10007e4:	20c00915 	stw	r3,36(r4)
 10007e8:	20800a15 	stw	r2,40(r4)
 10007ec:	20000015 	stw	zero,0(r4)
 10007f0:	20000115 	stw	zero,4(r4)
 10007f4:	20000215 	stw	zero,8(r4)
 10007f8:	20000415 	stw	zero,16(r4)
 10007fc:	20000515 	stw	zero,20(r4)
 1000800:	20000615 	stw	zero,24(r4)
 1000804:	21000715 	stw	r4,28(r4)
 1000808:	f800283a 	ret

0100080c <__sfp_lock_acquire>:
 100080c:	f800283a 	ret

01000810 <__sfp_lock_release>:
 1000810:	f800283a 	ret

01000814 <__sinit_lock_acquire>:
 1000814:	f800283a 	ret

01000818 <__sinit_lock_release>:
 1000818:	f800283a 	ret

0100081c <__sinit>:
 100081c:	20800e17 	ldw	r2,56(r4)
 1000820:	defffd04 	addi	sp,sp,-12
 1000824:	dc400115 	stw	r17,4(sp)
 1000828:	dc000015 	stw	r16,0(sp)
 100082c:	dfc00215 	stw	ra,8(sp)
 1000830:	04400044 	movi	r17,1
 1000834:	01400104 	movi	r5,4
 1000838:	000d883a 	mov	r6,zero
 100083c:	2021883a 	mov	r16,r4
 1000840:	2200bb04 	addi	r8,r4,748
 1000844:	200f883a 	mov	r7,r4
 1000848:	10000526 	beq	r2,zero,1000860 <__sinit+0x44>
 100084c:	dfc00217 	ldw	ra,8(sp)
 1000850:	dc400117 	ldw	r17,4(sp)
 1000854:	dc000017 	ldw	r16,0(sp)
 1000858:	dec00304 	addi	sp,sp,12
 100085c:	f800283a 	ret
 1000860:	21000117 	ldw	r4,4(r4)
 1000864:	00804034 	movhi	r2,256
 1000868:	10824004 	addi	r2,r2,2304
 100086c:	00c000c4 	movi	r3,3
 1000870:	80800f15 	stw	r2,60(r16)
 1000874:	80c0b915 	stw	r3,740(r16)
 1000878:	8200ba15 	stw	r8,744(r16)
 100087c:	84400e15 	stw	r17,56(r16)
 1000880:	8000b815 	stw	zero,736(r16)
 1000884:	10007b40 	call	10007b4 <std>
 1000888:	81000217 	ldw	r4,8(r16)
 100088c:	880d883a 	mov	r6,r17
 1000890:	800f883a 	mov	r7,r16
 1000894:	01400284 	movi	r5,10
 1000898:	10007b40 	call	10007b4 <std>
 100089c:	81000317 	ldw	r4,12(r16)
 10008a0:	800f883a 	mov	r7,r16
 10008a4:	01400484 	movi	r5,18
 10008a8:	01800084 	movi	r6,2
 10008ac:	dfc00217 	ldw	ra,8(sp)
 10008b0:	dc400117 	ldw	r17,4(sp)
 10008b4:	dc000017 	ldw	r16,0(sp)
 10008b8:	dec00304 	addi	sp,sp,12
 10008bc:	10007b41 	jmpi	10007b4 <std>

010008c0 <__fp_lock>:
 10008c0:	0005883a 	mov	r2,zero
 10008c4:	f800283a 	ret

010008c8 <__fp_unlock>:
 10008c8:	0005883a 	mov	r2,zero
 10008cc:	f800283a 	ret

010008d0 <__fp_unlock_all>:
 10008d0:	00804074 	movhi	r2,257
 10008d4:	10a5dd04 	addi	r2,r2,-26764
 10008d8:	11000017 	ldw	r4,0(r2)
 10008dc:	01404034 	movhi	r5,256
 10008e0:	29423204 	addi	r5,r5,2248
 10008e4:	1001ac01 	jmpi	1001ac0 <_fwalk>

010008e8 <__fp_lock_all>:
 10008e8:	00804074 	movhi	r2,257
 10008ec:	10a5dd04 	addi	r2,r2,-26764
 10008f0:	11000017 	ldw	r4,0(r2)
 10008f4:	01404034 	movhi	r5,256
 10008f8:	29423004 	addi	r5,r5,2240
 10008fc:	1001ac01 	jmpi	1001ac0 <_fwalk>

01000900 <_cleanup_r>:
 1000900:	01404034 	movhi	r5,256
 1000904:	29415c04 	addi	r5,r5,1392
 1000908:	1001ac01 	jmpi	1001ac0 <_fwalk>

0100090c <_cleanup>:
 100090c:	00804074 	movhi	r2,257
 1000910:	10a5de04 	addi	r2,r2,-26760
 1000914:	11000017 	ldw	r4,0(r2)
 1000918:	10009001 	jmpi	1000900 <_cleanup_r>

0100091c <__sfmoreglue>:
 100091c:	defffc04 	addi	sp,sp,-16
 1000920:	dc000015 	stw	r16,0(sp)
 1000924:	2821883a 	mov	r16,r5
 1000928:	dc400115 	stw	r17,4(sp)
 100092c:	01401704 	movi	r5,92
 1000930:	2023883a 	mov	r17,r4
 1000934:	8009883a 	mov	r4,r16
 1000938:	dfc00315 	stw	ra,12(sp)
 100093c:	dcc00215 	stw	r19,8(sp)
 1000940:	1003a180 	call	1003a18 <__mulsi3>
 1000944:	11400304 	addi	r5,r2,12
 1000948:	8809883a 	mov	r4,r17
 100094c:	1027883a 	mov	r19,r2
 1000950:	1001e200 	call	1001e20 <_malloc_r>
 1000954:	10c00304 	addi	r3,r2,12
 1000958:	1023883a 	mov	r17,r2
 100095c:	1809883a 	mov	r4,r3
 1000960:	980d883a 	mov	r6,r19
 1000964:	000b883a 	mov	r5,zero
 1000968:	10000b26 	beq	r2,zero,1000998 <__sfmoreglue+0x7c>
 100096c:	14000115 	stw	r16,4(r2)
 1000970:	10c00215 	stw	r3,8(r2)
 1000974:	10000015 	stw	zero,0(r2)
 1000978:	10027c40 	call	10027c4 <memset>
 100097c:	8805883a 	mov	r2,r17
 1000980:	dfc00317 	ldw	ra,12(sp)
 1000984:	dcc00217 	ldw	r19,8(sp)
 1000988:	dc400117 	ldw	r17,4(sp)
 100098c:	dc000017 	ldw	r16,0(sp)
 1000990:	dec00404 	addi	sp,sp,16
 1000994:	f800283a 	ret
 1000998:	0023883a 	mov	r17,zero
 100099c:	8805883a 	mov	r2,r17
 10009a0:	dfc00317 	ldw	ra,12(sp)
 10009a4:	dcc00217 	ldw	r19,8(sp)
 10009a8:	dc400117 	ldw	r17,4(sp)
 10009ac:	dc000017 	ldw	r16,0(sp)
 10009b0:	dec00404 	addi	sp,sp,16
 10009b4:	f800283a 	ret

010009b8 <__sfp>:
 10009b8:	defffd04 	addi	sp,sp,-12
 10009bc:	00804074 	movhi	r2,257
 10009c0:	10a5de04 	addi	r2,r2,-26760
 10009c4:	dc000015 	stw	r16,0(sp)
 10009c8:	14000017 	ldw	r16,0(r2)
 10009cc:	dc400115 	stw	r17,4(sp)
 10009d0:	dfc00215 	stw	ra,8(sp)
 10009d4:	80800e17 	ldw	r2,56(r16)
 10009d8:	2023883a 	mov	r17,r4
 10009dc:	10002626 	beq	r2,zero,1000a78 <__sfp+0xc0>
 10009e0:	8400b804 	addi	r16,r16,736
 10009e4:	80800117 	ldw	r2,4(r16)
 10009e8:	81000217 	ldw	r4,8(r16)
 10009ec:	10ffffc4 	addi	r3,r2,-1
 10009f0:	18000916 	blt	r3,zero,1000a18 <__sfp+0x60>
 10009f4:	2080030f 	ldh	r2,12(r4)
 10009f8:	10000b26 	beq	r2,zero,1000a28 <__sfp+0x70>
 10009fc:	017fffc4 	movi	r5,-1
 1000a00:	00000206 	br	1000a0c <__sfp+0x54>
 1000a04:	2080030f 	ldh	r2,12(r4)
 1000a08:	10000726 	beq	r2,zero,1000a28 <__sfp+0x70>
 1000a0c:	18ffffc4 	addi	r3,r3,-1
 1000a10:	21001704 	addi	r4,r4,92
 1000a14:	197ffb1e 	bne	r3,r5,1000a04 <__sfp+0x4c>
 1000a18:	80800017 	ldw	r2,0(r16)
 1000a1c:	10001926 	beq	r2,zero,1000a84 <__sfp+0xcc>
 1000a20:	1021883a 	mov	r16,r2
 1000a24:	003fef06 	br	10009e4 <__sfp+0x2c>
 1000a28:	00bfffc4 	movi	r2,-1
 1000a2c:	00c00044 	movi	r3,1
 1000a30:	2080038d 	sth	r2,14(r4)
 1000a34:	20c0030d 	sth	r3,12(r4)
 1000a38:	20000015 	stw	zero,0(r4)
 1000a3c:	20000215 	stw	zero,8(r4)
 1000a40:	20000115 	stw	zero,4(r4)
 1000a44:	20000415 	stw	zero,16(r4)
 1000a48:	20000515 	stw	zero,20(r4)
 1000a4c:	20000615 	stw	zero,24(r4)
 1000a50:	20000c15 	stw	zero,48(r4)
 1000a54:	20000d15 	stw	zero,52(r4)
 1000a58:	20001115 	stw	zero,68(r4)
 1000a5c:	20001215 	stw	zero,72(r4)
 1000a60:	2005883a 	mov	r2,r4
 1000a64:	dfc00217 	ldw	ra,8(sp)
 1000a68:	dc400117 	ldw	r17,4(sp)
 1000a6c:	dc000017 	ldw	r16,0(sp)
 1000a70:	dec00304 	addi	sp,sp,12
 1000a74:	f800283a 	ret
 1000a78:	8009883a 	mov	r4,r16
 1000a7c:	100081c0 	call	100081c <__sinit>
 1000a80:	003fd706 	br	10009e0 <__sfp+0x28>
 1000a84:	8809883a 	mov	r4,r17
 1000a88:	01400104 	movi	r5,4
 1000a8c:	100091c0 	call	100091c <__sfmoreglue>
 1000a90:	80800015 	stw	r2,0(r16)
 1000a94:	103fe21e 	bne	r2,zero,1000a20 <__sfp+0x68>
 1000a98:	00800304 	movi	r2,12
 1000a9c:	0009883a 	mov	r4,zero
 1000aa0:	88800015 	stw	r2,0(r17)
 1000aa4:	003fee06 	br	1000a60 <__sfp+0xa8>

01000aa8 <_fopen_r>:
 1000aa8:	defffa04 	addi	sp,sp,-24
 1000aac:	dcc00415 	stw	r19,16(sp)
 1000ab0:	2827883a 	mov	r19,r5
 1000ab4:	300b883a 	mov	r5,r6
 1000ab8:	d80d883a 	mov	r6,sp
 1000abc:	dc800315 	stw	r18,12(sp)
 1000ac0:	dc400215 	stw	r17,8(sp)
 1000ac4:	dc000115 	stw	r16,4(sp)
 1000ac8:	dfc00515 	stw	ra,20(sp)
 1000acc:	2021883a 	mov	r16,r4
 1000ad0:	10036cc0 	call	10036cc <__sflags>
 1000ad4:	1025883a 	mov	r18,r2
 1000ad8:	8009883a 	mov	r4,r16
 1000adc:	0023883a 	mov	r17,zero
 1000ae0:	1000081e 	bne	r2,zero,1000b04 <_fopen_r+0x5c>
 1000ae4:	8805883a 	mov	r2,r17
 1000ae8:	dfc00517 	ldw	ra,20(sp)
 1000aec:	dcc00417 	ldw	r19,16(sp)
 1000af0:	dc800317 	ldw	r18,12(sp)
 1000af4:	dc400217 	ldw	r17,8(sp)
 1000af8:	dc000117 	ldw	r16,4(sp)
 1000afc:	dec00604 	addi	sp,sp,24
 1000b00:	f800283a 	ret
 1000b04:	10009b80 	call	10009b8 <__sfp>
 1000b08:	1023883a 	mov	r17,r2
 1000b0c:	980b883a 	mov	r5,r19
 1000b10:	8009883a 	mov	r4,r16
 1000b14:	01c06d84 	movi	r7,438
 1000b18:	103ff226 	beq	r2,zero,1000ae4 <_fopen_r+0x3c>
 1000b1c:	d9800017 	ldw	r6,0(sp)
 1000b20:	100285c0 	call	100285c <_open_r>
 1000b24:	10001816 	blt	r2,zero,1000b88 <_fopen_r+0xe0>
 1000b28:	00c04034 	movhi	r3,256
 1000b2c:	18cc8f04 	addi	r3,r3,12860
 1000b30:	923fffcc 	andi	r8,r18,65535
 1000b34:	8880038d 	sth	r2,14(r17)
 1000b38:	00804034 	movhi	r2,256
 1000b3c:	108cae04 	addi	r2,r2,12984
 1000b40:	88800815 	stw	r2,32(r17)
 1000b44:	88c00915 	stw	r3,36(r17)
 1000b48:	00804034 	movhi	r2,256
 1000b4c:	108c7504 	addi	r2,r2,12756
 1000b50:	00c04034 	movhi	r3,256
 1000b54:	18cc7304 	addi	r3,r3,12748
 1000b58:	4200400c 	andi	r8,r8,256
 1000b5c:	8c80030d 	sth	r18,12(r17)
 1000b60:	8009883a 	mov	r4,r16
 1000b64:	880b883a 	mov	r5,r17
 1000b68:	000d883a 	mov	r6,zero
 1000b6c:	01c00084 	movi	r7,2
 1000b70:	88800a15 	stw	r2,40(r17)
 1000b74:	88c00b15 	stw	r3,44(r17)
 1000b78:	8c400715 	stw	r17,28(r17)
 1000b7c:	403fd926 	beq	r8,zero,1000ae4 <_fopen_r+0x3c>
 1000b80:	10010880 	call	1001088 <_fseek_r>
 1000b84:	003fd706 	br	1000ae4 <_fopen_r+0x3c>
 1000b88:	100080c0 	call	100080c <__sfp_lock_acquire>
 1000b8c:	8800030d 	sth	zero,12(r17)
 1000b90:	10008100 	call	1000810 <__sfp_lock_release>
 1000b94:	0023883a 	mov	r17,zero
 1000b98:	003fd206 	br	1000ae4 <_fopen_r+0x3c>

01000b9c <fopen>:
 1000b9c:	01804074 	movhi	r6,257
 1000ba0:	31a5dd04 	addi	r6,r6,-26764
 1000ba4:	2007883a 	mov	r3,r4
 1000ba8:	31000017 	ldw	r4,0(r6)
 1000bac:	280d883a 	mov	r6,r5
 1000bb0:	180b883a 	mov	r5,r3
 1000bb4:	1000aa81 	jmpi	1000aa8 <_fopen_r>

01000bb8 <_fputs_r>:
 1000bb8:	defff804 	addi	sp,sp,-32
 1000bbc:	dc000515 	stw	r16,20(sp)
 1000bc0:	2021883a 	mov	r16,r4
 1000bc4:	2809883a 	mov	r4,r5
 1000bc8:	dc400615 	stw	r17,24(sp)
 1000bcc:	dfc00715 	stw	ra,28(sp)
 1000bd0:	3023883a 	mov	r17,r6
 1000bd4:	d9400015 	stw	r5,0(sp)
 1000bd8:	10034340 	call	1003434 <strlen>
 1000bdc:	00c00044 	movi	r3,1
 1000be0:	d8800115 	stw	r2,4(sp)
 1000be4:	d8c00315 	stw	r3,12(sp)
 1000be8:	d8800415 	stw	r2,16(sp)
 1000bec:	dec00215 	stw	sp,8(sp)
 1000bf0:	80000326 	beq	r16,zero,1000c00 <_fputs_r+0x48>
 1000bf4:	80800e17 	ldw	r2,56(r16)
 1000bf8:	8009883a 	mov	r4,r16
 1000bfc:	10000926 	beq	r2,zero,1000c24 <_fputs_r+0x6c>
 1000c00:	8009883a 	mov	r4,r16
 1000c04:	880b883a 	mov	r5,r17
 1000c08:	d9800204 	addi	r6,sp,8
 1000c0c:	100155c0 	call	100155c <__sfvwrite_r>
 1000c10:	dfc00717 	ldw	ra,28(sp)
 1000c14:	dc400617 	ldw	r17,24(sp)
 1000c18:	dc000517 	ldw	r16,20(sp)
 1000c1c:	dec00804 	addi	sp,sp,32
 1000c20:	f800283a 	ret
 1000c24:	100081c0 	call	100081c <__sinit>
 1000c28:	003ff506 	br	1000c00 <_fputs_r+0x48>

01000c2c <fputs>:
 1000c2c:	01804074 	movhi	r6,257
 1000c30:	31a5dd04 	addi	r6,r6,-26764
 1000c34:	2007883a 	mov	r3,r4
 1000c38:	31000017 	ldw	r4,0(r6)
 1000c3c:	280d883a 	mov	r6,r5
 1000c40:	180b883a 	mov	r5,r3
 1000c44:	1000bb81 	jmpi	1000bb8 <_fputs_r>

01000c48 <_malloc_trim_r>:
 1000c48:	defffb04 	addi	sp,sp,-20
 1000c4c:	dcc00315 	stw	r19,12(sp)
 1000c50:	04c04034 	movhi	r19,256
 1000c54:	9cdfe504 	addi	r19,r19,32660
 1000c58:	dc800215 	stw	r18,8(sp)
 1000c5c:	dc400115 	stw	r17,4(sp)
 1000c60:	dc000015 	stw	r16,0(sp)
 1000c64:	2823883a 	mov	r17,r5
 1000c68:	2025883a 	mov	r18,r4
 1000c6c:	dfc00415 	stw	ra,16(sp)
 1000c70:	10040e40 	call	10040e4 <__malloc_lock>
 1000c74:	98800217 	ldw	r2,8(r19)
 1000c78:	9009883a 	mov	r4,r18
 1000c7c:	000b883a 	mov	r5,zero
 1000c80:	10c00117 	ldw	r3,4(r2)
 1000c84:	00bfff04 	movi	r2,-4
 1000c88:	18a0703a 	and	r16,r3,r2
 1000c8c:	8463c83a 	sub	r17,r16,r17
 1000c90:	8c43fbc4 	addi	r17,r17,4079
 1000c94:	8822d33a 	srli	r17,r17,12
 1000c98:	0083ffc4 	movi	r2,4095
 1000c9c:	8c7fffc4 	addi	r17,r17,-1
 1000ca0:	8822933a 	slli	r17,r17,12
 1000ca4:	1440060e 	bge	r2,r17,1000cc0 <_malloc_trim_r+0x78>
 1000ca8:	100315c0 	call	100315c <_sbrk_r>
 1000cac:	98c00217 	ldw	r3,8(r19)
 1000cb0:	9009883a 	mov	r4,r18
 1000cb4:	044bc83a 	sub	r5,zero,r17
 1000cb8:	80c7883a 	add	r3,r16,r3
 1000cbc:	10c00926 	beq	r2,r3,1000ce4 <_malloc_trim_r+0x9c>
 1000cc0:	10041040 	call	1004104 <__malloc_unlock>
 1000cc4:	0005883a 	mov	r2,zero
 1000cc8:	dfc00417 	ldw	ra,16(sp)
 1000ccc:	dcc00317 	ldw	r19,12(sp)
 1000cd0:	dc800217 	ldw	r18,8(sp)
 1000cd4:	dc400117 	ldw	r17,4(sp)
 1000cd8:	dc000017 	ldw	r16,0(sp)
 1000cdc:	dec00504 	addi	sp,sp,20
 1000ce0:	f800283a 	ret
 1000ce4:	9009883a 	mov	r4,r18
 1000ce8:	100315c0 	call	100315c <_sbrk_r>
 1000cec:	844dc83a 	sub	r6,r16,r17
 1000cf0:	00ffffc4 	movi	r3,-1
 1000cf4:	9009883a 	mov	r4,r18
 1000cf8:	000b883a 	mov	r5,zero
 1000cfc:	01c04074 	movhi	r7,257
 1000d00:	39ed0004 	addi	r7,r7,-19456
 1000d04:	31800054 	ori	r6,r6,1
 1000d08:	10c00926 	beq	r2,r3,1000d30 <_malloc_trim_r+0xe8>
 1000d0c:	38800017 	ldw	r2,0(r7)
 1000d10:	98c00217 	ldw	r3,8(r19)
 1000d14:	9009883a 	mov	r4,r18
 1000d18:	1445c83a 	sub	r2,r2,r17
 1000d1c:	38800015 	stw	r2,0(r7)
 1000d20:	19800115 	stw	r6,4(r3)
 1000d24:	10041040 	call	1004104 <__malloc_unlock>
 1000d28:	00800044 	movi	r2,1
 1000d2c:	003fe606 	br	1000cc8 <_malloc_trim_r+0x80>
 1000d30:	100315c0 	call	100315c <_sbrk_r>
 1000d34:	99800217 	ldw	r6,8(r19)
 1000d38:	100f883a 	mov	r7,r2
 1000d3c:	9009883a 	mov	r4,r18
 1000d40:	1187c83a 	sub	r3,r2,r6
 1000d44:	008003c4 	movi	r2,15
 1000d48:	19400054 	ori	r5,r3,1
 1000d4c:	10ffdc0e 	bge	r2,r3,1000cc0 <_malloc_trim_r+0x78>
 1000d50:	00804074 	movhi	r2,257
 1000d54:	10a5e004 	addi	r2,r2,-26752
 1000d58:	10c00017 	ldw	r3,0(r2)
 1000d5c:	00804074 	movhi	r2,257
 1000d60:	10ad0004 	addi	r2,r2,-19456
 1000d64:	31400115 	stw	r5,4(r6)
 1000d68:	38c7c83a 	sub	r3,r7,r3
 1000d6c:	10c00015 	stw	r3,0(r2)
 1000d70:	003fd306 	br	1000cc0 <_malloc_trim_r+0x78>

01000d74 <_free_r>:
 1000d74:	defffd04 	addi	sp,sp,-12
 1000d78:	dc400115 	stw	r17,4(sp)
 1000d7c:	dc000015 	stw	r16,0(sp)
 1000d80:	dfc00215 	stw	ra,8(sp)
 1000d84:	2821883a 	mov	r16,r5
 1000d88:	2023883a 	mov	r17,r4
 1000d8c:	28005a26 	beq	r5,zero,1000ef8 <_free_r+0x184>
 1000d90:	10040e40 	call	10040e4 <__malloc_lock>
 1000d94:	823ffe04 	addi	r8,r16,-8
 1000d98:	41400117 	ldw	r5,4(r8)
 1000d9c:	00bfff84 	movi	r2,-2
 1000da0:	02804034 	movhi	r10,256
 1000da4:	529fe504 	addi	r10,r10,32660
 1000da8:	288e703a 	and	r7,r5,r2
 1000dac:	41cd883a 	add	r6,r8,r7
 1000db0:	30c00117 	ldw	r3,4(r6)
 1000db4:	51000217 	ldw	r4,8(r10)
 1000db8:	00bfff04 	movi	r2,-4
 1000dbc:	1892703a 	and	r9,r3,r2
 1000dc0:	5017883a 	mov	r11,r10
 1000dc4:	31006726 	beq	r6,r4,1000f64 <_free_r+0x1f0>
 1000dc8:	2880004c 	andi	r2,r5,1
 1000dcc:	1005003a 	cmpeq	r2,r2,zero
 1000dd0:	32400115 	stw	r9,4(r6)
 1000dd4:	10001a1e 	bne	r2,zero,1000e40 <_free_r+0xcc>
 1000dd8:	000b883a 	mov	r5,zero
 1000ddc:	3247883a 	add	r3,r6,r9
 1000de0:	18800117 	ldw	r2,4(r3)
 1000de4:	1080004c 	andi	r2,r2,1
 1000de8:	1000231e 	bne	r2,zero,1000e78 <_free_r+0x104>
 1000dec:	280ac03a 	cmpne	r5,r5,zero
 1000df0:	3a4f883a 	add	r7,r7,r9
 1000df4:	2800451e 	bne	r5,zero,1000f0c <_free_r+0x198>
 1000df8:	31000217 	ldw	r4,8(r6)
 1000dfc:	00804034 	movhi	r2,256
 1000e00:	109fe704 	addi	r2,r2,32668
 1000e04:	20807b26 	beq	r4,r2,1000ff4 <_free_r+0x280>
 1000e08:	30800317 	ldw	r2,12(r6)
 1000e0c:	3a07883a 	add	r3,r7,r8
 1000e10:	19c00015 	stw	r7,0(r3)
 1000e14:	11000215 	stw	r4,8(r2)
 1000e18:	20800315 	stw	r2,12(r4)
 1000e1c:	38800054 	ori	r2,r7,1
 1000e20:	40800115 	stw	r2,4(r8)
 1000e24:	28001a26 	beq	r5,zero,1000e90 <_free_r+0x11c>
 1000e28:	8809883a 	mov	r4,r17
 1000e2c:	dfc00217 	ldw	ra,8(sp)
 1000e30:	dc400117 	ldw	r17,4(sp)
 1000e34:	dc000017 	ldw	r16,0(sp)
 1000e38:	dec00304 	addi	sp,sp,12
 1000e3c:	10041041 	jmpi	1004104 <__malloc_unlock>
 1000e40:	80bffe17 	ldw	r2,-8(r16)
 1000e44:	50c00204 	addi	r3,r10,8
 1000e48:	4091c83a 	sub	r8,r8,r2
 1000e4c:	41000217 	ldw	r4,8(r8)
 1000e50:	388f883a 	add	r7,r7,r2
 1000e54:	20c06126 	beq	r4,r3,1000fdc <_free_r+0x268>
 1000e58:	40800317 	ldw	r2,12(r8)
 1000e5c:	3247883a 	add	r3,r6,r9
 1000e60:	000b883a 	mov	r5,zero
 1000e64:	11000215 	stw	r4,8(r2)
 1000e68:	20800315 	stw	r2,12(r4)
 1000e6c:	18800117 	ldw	r2,4(r3)
 1000e70:	1080004c 	andi	r2,r2,1
 1000e74:	103fdd26 	beq	r2,zero,1000dec <_free_r+0x78>
 1000e78:	38800054 	ori	r2,r7,1
 1000e7c:	3a07883a 	add	r3,r7,r8
 1000e80:	280ac03a 	cmpne	r5,r5,zero
 1000e84:	40800115 	stw	r2,4(r8)
 1000e88:	19c00015 	stw	r7,0(r3)
 1000e8c:	283fe61e 	bne	r5,zero,1000e28 <_free_r+0xb4>
 1000e90:	00807fc4 	movi	r2,511
 1000e94:	11c01f2e 	bgeu	r2,r7,1000f14 <_free_r+0x1a0>
 1000e98:	3806d27a 	srli	r3,r7,9
 1000e9c:	1800481e 	bne	r3,zero,1000fc0 <_free_r+0x24c>
 1000ea0:	3804d0fa 	srli	r2,r7,3
 1000ea4:	100690fa 	slli	r3,r2,3
 1000ea8:	1acd883a 	add	r6,r3,r11
 1000eac:	31400217 	ldw	r5,8(r6)
 1000eb0:	31405926 	beq	r6,r5,1001018 <_free_r+0x2a4>
 1000eb4:	28800117 	ldw	r2,4(r5)
 1000eb8:	00ffff04 	movi	r3,-4
 1000ebc:	10c4703a 	and	r2,r2,r3
 1000ec0:	3880022e 	bgeu	r7,r2,1000ecc <_free_r+0x158>
 1000ec4:	29400217 	ldw	r5,8(r5)
 1000ec8:	317ffa1e 	bne	r6,r5,1000eb4 <_free_r+0x140>
 1000ecc:	29800317 	ldw	r6,12(r5)
 1000ed0:	41800315 	stw	r6,12(r8)
 1000ed4:	41400215 	stw	r5,8(r8)
 1000ed8:	8809883a 	mov	r4,r17
 1000edc:	2a000315 	stw	r8,12(r5)
 1000ee0:	32000215 	stw	r8,8(r6)
 1000ee4:	dfc00217 	ldw	ra,8(sp)
 1000ee8:	dc400117 	ldw	r17,4(sp)
 1000eec:	dc000017 	ldw	r16,0(sp)
 1000ef0:	dec00304 	addi	sp,sp,12
 1000ef4:	10041041 	jmpi	1004104 <__malloc_unlock>
 1000ef8:	dfc00217 	ldw	ra,8(sp)
 1000efc:	dc400117 	ldw	r17,4(sp)
 1000f00:	dc000017 	ldw	r16,0(sp)
 1000f04:	dec00304 	addi	sp,sp,12
 1000f08:	f800283a 	ret
 1000f0c:	31000217 	ldw	r4,8(r6)
 1000f10:	003fbd06 	br	1000e08 <_free_r+0x94>
 1000f14:	3806d0fa 	srli	r3,r7,3
 1000f18:	00800044 	movi	r2,1
 1000f1c:	51400117 	ldw	r5,4(r10)
 1000f20:	180890fa 	slli	r4,r3,3
 1000f24:	1807d0ba 	srai	r3,r3,2
 1000f28:	22c9883a 	add	r4,r4,r11
 1000f2c:	21800217 	ldw	r6,8(r4)
 1000f30:	10c4983a 	sll	r2,r2,r3
 1000f34:	41000315 	stw	r4,12(r8)
 1000f38:	41800215 	stw	r6,8(r8)
 1000f3c:	288ab03a 	or	r5,r5,r2
 1000f40:	22000215 	stw	r8,8(r4)
 1000f44:	8809883a 	mov	r4,r17
 1000f48:	51400115 	stw	r5,4(r10)
 1000f4c:	32000315 	stw	r8,12(r6)
 1000f50:	dfc00217 	ldw	ra,8(sp)
 1000f54:	dc400117 	ldw	r17,4(sp)
 1000f58:	dc000017 	ldw	r16,0(sp)
 1000f5c:	dec00304 	addi	sp,sp,12
 1000f60:	10041041 	jmpi	1004104 <__malloc_unlock>
 1000f64:	2880004c 	andi	r2,r5,1
 1000f68:	3a4d883a 	add	r6,r7,r9
 1000f6c:	1000071e 	bne	r2,zero,1000f8c <_free_r+0x218>
 1000f70:	80bffe17 	ldw	r2,-8(r16)
 1000f74:	4091c83a 	sub	r8,r8,r2
 1000f78:	41000317 	ldw	r4,12(r8)
 1000f7c:	40c00217 	ldw	r3,8(r8)
 1000f80:	308d883a 	add	r6,r6,r2
 1000f84:	20c00215 	stw	r3,8(r4)
 1000f88:	19000315 	stw	r4,12(r3)
 1000f8c:	00804074 	movhi	r2,257
 1000f90:	10a5df04 	addi	r2,r2,-26756
 1000f94:	11000017 	ldw	r4,0(r2)
 1000f98:	30c00054 	ori	r3,r6,1
 1000f9c:	52000215 	stw	r8,8(r10)
 1000fa0:	40c00115 	stw	r3,4(r8)
 1000fa4:	313fa036 	bltu	r6,r4,1000e28 <_free_r+0xb4>
 1000fa8:	00804074 	movhi	r2,257
 1000fac:	10acf704 	addi	r2,r2,-19492
 1000fb0:	11400017 	ldw	r5,0(r2)
 1000fb4:	8809883a 	mov	r4,r17
 1000fb8:	1000c480 	call	1000c48 <_malloc_trim_r>
 1000fbc:	003f9a06 	br	1000e28 <_free_r+0xb4>
 1000fc0:	00800104 	movi	r2,4
 1000fc4:	10c0072e 	bgeu	r2,r3,1000fe4 <_free_r+0x270>
 1000fc8:	00800504 	movi	r2,20
 1000fcc:	10c01936 	bltu	r2,r3,1001034 <_free_r+0x2c0>
 1000fd0:	188016c4 	addi	r2,r3,91
 1000fd4:	100690fa 	slli	r3,r2,3
 1000fd8:	003fb306 	br	1000ea8 <_free_r+0x134>
 1000fdc:	01400044 	movi	r5,1
 1000fe0:	003f7e06 	br	1000ddc <_free_r+0x68>
 1000fe4:	3804d1ba 	srli	r2,r7,6
 1000fe8:	10800e04 	addi	r2,r2,56
 1000fec:	100690fa 	slli	r3,r2,3
 1000ff0:	003fad06 	br	1000ea8 <_free_r+0x134>
 1000ff4:	22000315 	stw	r8,12(r4)
 1000ff8:	22000215 	stw	r8,8(r4)
 1000ffc:	3a05883a 	add	r2,r7,r8
 1001000:	38c00054 	ori	r3,r7,1
 1001004:	11c00015 	stw	r7,0(r2)
 1001008:	41000215 	stw	r4,8(r8)
 100100c:	40c00115 	stw	r3,4(r8)
 1001010:	41000315 	stw	r4,12(r8)
 1001014:	003f8406 	br	1000e28 <_free_r+0xb4>
 1001018:	1005d0ba 	srai	r2,r2,2
 100101c:	00c00044 	movi	r3,1
 1001020:	51000117 	ldw	r4,4(r10)
 1001024:	1886983a 	sll	r3,r3,r2
 1001028:	20c8b03a 	or	r4,r4,r3
 100102c:	51000115 	stw	r4,4(r10)
 1001030:	003fa706 	br	1000ed0 <_free_r+0x15c>
 1001034:	00801504 	movi	r2,84
 1001038:	10c00436 	bltu	r2,r3,100104c <_free_r+0x2d8>
 100103c:	3804d33a 	srli	r2,r7,12
 1001040:	10801b84 	addi	r2,r2,110
 1001044:	100690fa 	slli	r3,r2,3
 1001048:	003f9706 	br	1000ea8 <_free_r+0x134>
 100104c:	00805504 	movi	r2,340
 1001050:	10c00436 	bltu	r2,r3,1001064 <_free_r+0x2f0>
 1001054:	3804d3fa 	srli	r2,r7,15
 1001058:	10801dc4 	addi	r2,r2,119
 100105c:	100690fa 	slli	r3,r2,3
 1001060:	003f9106 	br	1000ea8 <_free_r+0x134>
 1001064:	00815504 	movi	r2,1364
 1001068:	10c0032e 	bgeu	r2,r3,1001078 <_free_r+0x304>
 100106c:	00801f84 	movi	r2,126
 1001070:	00c0fc04 	movi	r3,1008
 1001074:	003f8c06 	br	1000ea8 <_free_r+0x134>
 1001078:	3804d4ba 	srli	r2,r7,18
 100107c:	10801f04 	addi	r2,r2,124
 1001080:	100690fa 	slli	r3,r2,3
 1001084:	003f8806 	br	1000ea8 <_free_r+0x134>

01001088 <_fseek_r>:
 1001088:	deffe804 	addi	sp,sp,-96
 100108c:	dd801515 	stw	r22,84(sp)
 1001090:	dcc01215 	stw	r19,72(sp)
 1001094:	dc801115 	stw	r18,68(sp)
 1001098:	dc000f15 	stw	r16,60(sp)
 100109c:	dfc01715 	stw	ra,92(sp)
 10010a0:	ddc01615 	stw	r23,88(sp)
 10010a4:	dd401415 	stw	r21,80(sp)
 10010a8:	dd001315 	stw	r20,76(sp)
 10010ac:	dc401015 	stw	r17,64(sp)
 10010b0:	2025883a 	mov	r18,r4
 10010b4:	2821883a 	mov	r16,r5
 10010b8:	302d883a 	mov	r22,r6
 10010bc:	3827883a 	mov	r19,r7
 10010c0:	20000226 	beq	r4,zero,10010cc <_fseek_r+0x44>
 10010c4:	20800e17 	ldw	r2,56(r4)
 10010c8:	10007826 	beq	r2,zero,10012ac <_fseek_r+0x224>
 10010cc:	8080030b 	ldhu	r2,12(r16)
 10010d0:	00c04204 	movi	r3,264
 10010d4:	1080420c 	andi	r2,r2,264
 10010d8:	10c07926 	beq	r2,r3,10012c0 <_fseek_r+0x238>
 10010dc:	85400a17 	ldw	r21,40(r16)
 10010e0:	a800ea26 	beq	r21,zero,100148c <_fseek_r+0x404>
 10010e4:	00800044 	movi	r2,1
 10010e8:	98805f26 	beq	r19,r2,1001268 <_fseek_r+0x1e0>
 10010ec:	00800084 	movi	r2,2
 10010f0:	98801026 	beq	r19,r2,1001134 <_fseek_r+0xac>
 10010f4:	98000f26 	beq	r19,zero,1001134 <_fseek_r+0xac>
 10010f8:	00800584 	movi	r2,22
 10010fc:	013fffc4 	movi	r4,-1
 1001100:	90800015 	stw	r2,0(r18)
 1001104:	2005883a 	mov	r2,r4
 1001108:	dfc01717 	ldw	ra,92(sp)
 100110c:	ddc01617 	ldw	r23,88(sp)
 1001110:	dd801517 	ldw	r22,84(sp)
 1001114:	dd401417 	ldw	r21,80(sp)
 1001118:	dd001317 	ldw	r20,76(sp)
 100111c:	dcc01217 	ldw	r19,72(sp)
 1001120:	dc801117 	ldw	r18,68(sp)
 1001124:	dc401017 	ldw	r17,64(sp)
 1001128:	dc000f17 	ldw	r16,60(sp)
 100112c:	dec01804 	addi	sp,sp,96
 1001130:	f800283a 	ret
 1001134:	81800417 	ldw	r6,16(r16)
 1001138:	0023883a 	mov	r17,zero
 100113c:	002f883a 	mov	r23,zero
 1001140:	3000a626 	beq	r6,zero,10013dc <_fseek_r+0x354>
 1001144:	8100030b 	ldhu	r4,12(r16)
 1001148:	2082068c 	andi	r2,r4,2074
 100114c:	1000081e 	bne	r2,zero,1001170 <_fseek_r+0xe8>
 1001150:	2081000c 	andi	r2,r4,1024
 1001154:	10001b1e 	bne	r2,zero,10011c4 <_fseek_r+0x13c>
 1001158:	00804034 	movhi	r2,256
 100115c:	108c7504 	addi	r2,r2,12756
 1001160:	a8800926 	beq	r21,r2,1001188 <_fseek_r+0x100>
 1001164:	8080030b 	ldhu	r2,12(r16)
 1001168:	10820014 	ori	r2,r2,2048
 100116c:	8080030d 	sth	r2,12(r16)
 1001170:	9009883a 	mov	r4,r18
 1001174:	800b883a 	mov	r5,r16
 1001178:	10005840 	call	1000584 <_fflush_r>
 100117c:	1000a326 	beq	r2,zero,100140c <_fseek_r+0x384>
 1001180:	013fffc4 	movi	r4,-1
 1001184:	003fdf06 	br	1001104 <_fseek_r+0x7c>
 1001188:	8140038f 	ldh	r5,14(r16)
 100118c:	283ff516 	blt	r5,zero,1001164 <_fseek_r+0xdc>
 1001190:	9009883a 	mov	r4,r18
 1001194:	d80d883a 	mov	r6,sp
 1001198:	10014e80 	call	10014e8 <_fstat_r>
 100119c:	103ff11e 	bne	r2,zero,1001164 <_fseek_r+0xdc>
 10011a0:	d8800117 	ldw	r2,4(sp)
 10011a4:	00e00014 	movui	r3,32768
 10011a8:	10bc000c 	andi	r2,r2,61440
 10011ac:	10ffed1e 	bne	r2,r3,1001164 <_fseek_r+0xdc>
 10011b0:	80c0030b 	ldhu	r3,12(r16)
 10011b4:	00810004 	movi	r2,1024
 10011b8:	80801315 	stw	r2,76(r16)
 10011bc:	1886b03a 	or	r3,r3,r2
 10011c0:	80c0030d 	sth	r3,12(r16)
 10011c4:	9800701e 	bne	r19,zero,1001388 <_fseek_r+0x300>
 10011c8:	b029883a 	mov	r20,r22
 10011cc:	b804c03a 	cmpne	r2,r23,zero
 10011d0:	10003f1e 	bne	r2,zero,10012d0 <_fseek_r+0x248>
 10011d4:	8100030b 	ldhu	r4,12(r16)
 10011d8:	2084000c 	andi	r2,r4,4096
 10011dc:	1000a126 	beq	r2,zero,1001464 <_fseek_r+0x3dc>
 10011e0:	81801417 	ldw	r6,80(r16)
 10011e4:	80c00117 	ldw	r3,4(r16)
 10011e8:	81400c17 	ldw	r5,48(r16)
 10011ec:	30e3c83a 	sub	r17,r6,r3
 10011f0:	28008026 	beq	r5,zero,10013f4 <_fseek_r+0x36c>
 10011f4:	81c00f17 	ldw	r7,60(r16)
 10011f8:	89e3c83a 	sub	r17,r17,r7
 10011fc:	80800e17 	ldw	r2,56(r16)
 1001200:	81800417 	ldw	r6,16(r16)
 1001204:	88c7883a 	add	r3,r17,r3
 1001208:	1185c83a 	sub	r2,r2,r6
 100120c:	11cf883a 	add	r7,r2,r7
 1001210:	1887c83a 	sub	r3,r3,r2
 1001214:	2088000c 	andi	r2,r4,8192
 1001218:	10003e1e 	bne	r2,zero,1001314 <_fseek_r+0x28c>
 100121c:	a0c03d16 	blt	r20,r3,1001314 <_fseek_r+0x28c>
 1001220:	38c5883a 	add	r2,r7,r3
 1001224:	a0803b2e 	bgeu	r20,r2,1001314 <_fseek_r+0x28c>
 1001228:	a0c5c83a 	sub	r2,r20,r3
 100122c:	3887c83a 	sub	r3,r7,r2
 1001230:	3085883a 	add	r2,r6,r2
 1001234:	80800015 	stw	r2,0(r16)
 1001238:	80c00115 	stw	r3,4(r16)
 100123c:	28000526 	beq	r5,zero,1001254 <_fseek_r+0x1cc>
 1001240:	80801004 	addi	r2,r16,64
 1001244:	28800226 	beq	r5,r2,1001250 <_fseek_r+0x1c8>
 1001248:	9009883a 	mov	r4,r18
 100124c:	1000d740 	call	1000d74 <_free_r>
 1001250:	80000c15 	stw	zero,48(r16)
 1001254:	8080030b 	ldhu	r2,12(r16)
 1001258:	0009883a 	mov	r4,zero
 100125c:	10bff7cc 	andi	r2,r2,65503
 1001260:	8080030d 	sth	r2,12(r16)
 1001264:	003fa706 	br	1001104 <_fseek_r+0x7c>
 1001268:	9009883a 	mov	r4,r18
 100126c:	800b883a 	mov	r5,r16
 1001270:	10005840 	call	1000584 <_fflush_r>
 1001274:	8100030b 	ldhu	r4,12(r16)
 1001278:	2084000c 	andi	r2,r4,4096
 100127c:	10008726 	beq	r2,zero,100149c <_fseek_r+0x414>
 1001280:	84401417 	ldw	r17,80(r16)
 1001284:	2080010c 	andi	r2,r4,4
 1001288:	1000171e 	bne	r2,zero,10012e8 <_fseek_r+0x260>
 100128c:	2080020c 	andi	r2,r4,8
 1001290:	10003b26 	beq	r2,zero,1001380 <_fseek_r+0x2f8>
 1001294:	80800017 	ldw	r2,0(r16)
 1001298:	10003926 	beq	r2,zero,1001380 <_fseek_r+0x2f8>
 100129c:	81800417 	ldw	r6,16(r16)
 10012a0:	1185c83a 	sub	r2,r2,r6
 10012a4:	88a3883a 	add	r17,r17,r2
 10012a8:	00001606 	br	1001304 <_fseek_r+0x27c>
 10012ac:	100081c0 	call	100081c <__sinit>
 10012b0:	8080030b 	ldhu	r2,12(r16)
 10012b4:	00c04204 	movi	r3,264
 10012b8:	1080420c 	andi	r2,r2,264
 10012bc:	10ff871e 	bne	r2,r3,10010dc <_fseek_r+0x54>
 10012c0:	9009883a 	mov	r4,r18
 10012c4:	800b883a 	mov	r5,r16
 10012c8:	10005840 	call	1000584 <_fflush_r>
 10012cc:	003f8306 	br	10010dc <_fseek_r+0x54>
 10012d0:	81400c17 	ldw	r5,48(r16)
 10012d4:	28004526 	beq	r5,zero,10013ec <_fseek_r+0x364>
 10012d8:	8100030b 	ldhu	r4,12(r16)
 10012dc:	80c00117 	ldw	r3,4(r16)
 10012e0:	81c00f17 	ldw	r7,60(r16)
 10012e4:	003fc506 	br	10011fc <_fseek_r+0x174>
 10012e8:	80c00117 	ldw	r3,4(r16)
 10012ec:	80800c17 	ldw	r2,48(r16)
 10012f0:	88e3c83a 	sub	r17,r17,r3
 10012f4:	10002226 	beq	r2,zero,1001380 <_fseek_r+0x2f8>
 10012f8:	81c00f17 	ldw	r7,60(r16)
 10012fc:	81800417 	ldw	r6,16(r16)
 1001300:	89e3c83a 	sub	r17,r17,r7
 1001304:	b46d883a 	add	r22,r22,r17
 1001308:	0027883a 	mov	r19,zero
 100130c:	05c00044 	movi	r23,1
 1001310:	003f8b06 	br	1001140 <_fseek_r+0xb8>
 1001314:	80801317 	ldw	r2,76(r16)
 1001318:	81400717 	ldw	r5,28(r16)
 100131c:	9009883a 	mov	r4,r18
 1001320:	0085c83a 	sub	r2,zero,r2
 1001324:	a0a2703a 	and	r17,r20,r2
 1001328:	880d883a 	mov	r6,r17
 100132c:	000f883a 	mov	r7,zero
 1001330:	a83ee83a 	callr	r21
 1001334:	00ffffc4 	movi	r3,-1
 1001338:	10ff8d26 	beq	r2,r3,1001170 <_fseek_r+0xe8>
 100133c:	80800417 	ldw	r2,16(r16)
 1001340:	81400c17 	ldw	r5,48(r16)
 1001344:	80000115 	stw	zero,4(r16)
 1001348:	80800015 	stw	r2,0(r16)
 100134c:	28000526 	beq	r5,zero,1001364 <_fseek_r+0x2dc>
 1001350:	80801004 	addi	r2,r16,64
 1001354:	28800226 	beq	r5,r2,1001360 <_fseek_r+0x2d8>
 1001358:	9009883a 	mov	r4,r18
 100135c:	1000d740 	call	1000d74 <_free_r>
 1001360:	80000c15 	stw	zero,48(r16)
 1001364:	8080030b 	ldhu	r2,12(r16)
 1001368:	a463c83a 	sub	r17,r20,r17
 100136c:	10bff7cc 	andi	r2,r2,65503
 1001370:	8080030d 	sth	r2,12(r16)
 1001374:	88000c1e 	bne	r17,zero,10013a8 <_fseek_r+0x320>
 1001378:	0009883a 	mov	r4,zero
 100137c:	003f6106 	br	1001104 <_fseek_r+0x7c>
 1001380:	81800417 	ldw	r6,16(r16)
 1001384:	003fdf06 	br	1001304 <_fseek_r+0x27c>
 1001388:	8140038f 	ldh	r5,14(r16)
 100138c:	9009883a 	mov	r4,r18
 1001390:	d80d883a 	mov	r6,sp
 1001394:	10014e80 	call	10014e8 <_fstat_r>
 1001398:	103f751e 	bne	r2,zero,1001170 <_fseek_r+0xe8>
 100139c:	d8800417 	ldw	r2,16(sp)
 10013a0:	b0a9883a 	add	r20,r22,r2
 10013a4:	003f8906 	br	10011cc <_fseek_r+0x144>
 10013a8:	9009883a 	mov	r4,r18
 10013ac:	800b883a 	mov	r5,r16
 10013b0:	1002f7c0 	call	1002f7c <__srefill_r>
 10013b4:	103f6e1e 	bne	r2,zero,1001170 <_fseek_r+0xe8>
 10013b8:	80c00117 	ldw	r3,4(r16)
 10013bc:	1c7f6c36 	bltu	r3,r17,1001170 <_fseek_r+0xe8>
 10013c0:	80800017 	ldw	r2,0(r16)
 10013c4:	1c47c83a 	sub	r3,r3,r17
 10013c8:	0009883a 	mov	r4,zero
 10013cc:	1445883a 	add	r2,r2,r17
 10013d0:	80c00115 	stw	r3,4(r16)
 10013d4:	80800015 	stw	r2,0(r16)
 10013d8:	003f4a06 	br	1001104 <_fseek_r+0x7c>
 10013dc:	9009883a 	mov	r4,r18
 10013e0:	800b883a 	mov	r5,r16
 10013e4:	1001c640 	call	1001c64 <__smakebuf_r>
 10013e8:	003f5606 	br	1001144 <_fseek_r+0xbc>
 10013ec:	8100030b 	ldhu	r4,12(r16)
 10013f0:	80c00117 	ldw	r3,4(r16)
 10013f4:	80800017 	ldw	r2,0(r16)
 10013f8:	81800417 	ldw	r6,16(r16)
 10013fc:	1185c83a 	sub	r2,r2,r6
 1001400:	10cf883a 	add	r7,r2,r3
 1001404:	8887c83a 	sub	r3,r17,r2
 1001408:	003f8206 	br	1001214 <_fseek_r+0x18c>
 100140c:	81400717 	ldw	r5,28(r16)
 1001410:	b00d883a 	mov	r6,r22
 1001414:	980f883a 	mov	r7,r19
 1001418:	9009883a 	mov	r4,r18
 100141c:	a83ee83a 	callr	r21
 1001420:	00ffffc4 	movi	r3,-1
 1001424:	10ff5626 	beq	r2,r3,1001180 <_fseek_r+0xf8>
 1001428:	81400c17 	ldw	r5,48(r16)
 100142c:	28000526 	beq	r5,zero,1001444 <_fseek_r+0x3bc>
 1001430:	80801004 	addi	r2,r16,64
 1001434:	28800226 	beq	r5,r2,1001440 <_fseek_r+0x3b8>
 1001438:	9009883a 	mov	r4,r18
 100143c:	1000d740 	call	1000d74 <_free_r>
 1001440:	80000c15 	stw	zero,48(r16)
 1001444:	8080030b 	ldhu	r2,12(r16)
 1001448:	80c00417 	ldw	r3,16(r16)
 100144c:	0009883a 	mov	r4,zero
 1001450:	10bdf7cc 	andi	r2,r2,63455
 1001454:	8080030d 	sth	r2,12(r16)
 1001458:	80c00015 	stw	r3,0(r16)
 100145c:	80000115 	stw	zero,4(r16)
 1001460:	003f2806 	br	1001104 <_fseek_r+0x7c>
 1001464:	81400717 	ldw	r5,28(r16)
 1001468:	000d883a 	mov	r6,zero
 100146c:	9009883a 	mov	r4,r18
 1001470:	01c00044 	movi	r7,1
 1001474:	a83ee83a 	callr	r21
 1001478:	100d883a 	mov	r6,r2
 100147c:	00bfffc4 	movi	r2,-1
 1001480:	30bf3b26 	beq	r6,r2,1001170 <_fseek_r+0xe8>
 1001484:	8100030b 	ldhu	r4,12(r16)
 1001488:	003f5606 	br	10011e4 <_fseek_r+0x15c>
 100148c:	00800744 	movi	r2,29
 1001490:	013fffc4 	movi	r4,-1
 1001494:	90800015 	stw	r2,0(r18)
 1001498:	003f1a06 	br	1001104 <_fseek_r+0x7c>
 100149c:	81400717 	ldw	r5,28(r16)
 10014a0:	980f883a 	mov	r7,r19
 10014a4:	9009883a 	mov	r4,r18
 10014a8:	000d883a 	mov	r6,zero
 10014ac:	a83ee83a 	callr	r21
 10014b0:	1023883a 	mov	r17,r2
 10014b4:	00bfffc4 	movi	r2,-1
 10014b8:	88bf3126 	beq	r17,r2,1001180 <_fseek_r+0xf8>
 10014bc:	8100030b 	ldhu	r4,12(r16)
 10014c0:	003f7006 	br	1001284 <_fseek_r+0x1fc>

010014c4 <fseek>:
 10014c4:	00804074 	movhi	r2,257
 10014c8:	10a5dd04 	addi	r2,r2,-26764
 10014cc:	2013883a 	mov	r9,r4
 10014d0:	11000017 	ldw	r4,0(r2)
 10014d4:	2805883a 	mov	r2,r5
 10014d8:	300f883a 	mov	r7,r6
 10014dc:	480b883a 	mov	r5,r9
 10014e0:	100d883a 	mov	r6,r2
 10014e4:	10010881 	jmpi	1001088 <_fseek_r>

010014e8 <_fstat_r>:
 10014e8:	defffd04 	addi	sp,sp,-12
 10014ec:	dc000015 	stw	r16,0(sp)
 10014f0:	04004074 	movhi	r16,257
 10014f4:	842cf604 	addi	r16,r16,-19496
 10014f8:	dc400115 	stw	r17,4(sp)
 10014fc:	80000015 	stw	zero,0(r16)
 1001500:	2023883a 	mov	r17,r4
 1001504:	2809883a 	mov	r4,r5
 1001508:	300b883a 	mov	r5,r6
 100150c:	dfc00215 	stw	ra,8(sp)
 1001510:	1003bdc0 	call	1003bdc <fstat>
 1001514:	1007883a 	mov	r3,r2
 1001518:	00bfffc4 	movi	r2,-1
 100151c:	18800626 	beq	r3,r2,1001538 <_fstat_r+0x50>
 1001520:	1805883a 	mov	r2,r3
 1001524:	dfc00217 	ldw	ra,8(sp)
 1001528:	dc400117 	ldw	r17,4(sp)
 100152c:	dc000017 	ldw	r16,0(sp)
 1001530:	dec00304 	addi	sp,sp,12
 1001534:	f800283a 	ret
 1001538:	80800017 	ldw	r2,0(r16)
 100153c:	103ff826 	beq	r2,zero,1001520 <_fstat_r+0x38>
 1001540:	88800015 	stw	r2,0(r17)
 1001544:	1805883a 	mov	r2,r3
 1001548:	dfc00217 	ldw	ra,8(sp)
 100154c:	dc400117 	ldw	r17,4(sp)
 1001550:	dc000017 	ldw	r16,0(sp)
 1001554:	dec00304 	addi	sp,sp,12
 1001558:	f800283a 	ret

0100155c <__sfvwrite_r>:
 100155c:	30800217 	ldw	r2,8(r6)
 1001560:	defff504 	addi	sp,sp,-44
 1001564:	df000915 	stw	fp,36(sp)
 1001568:	dd800715 	stw	r22,28(sp)
 100156c:	dc800315 	stw	r18,12(sp)
 1001570:	dfc00a15 	stw	ra,40(sp)
 1001574:	ddc00815 	stw	r23,32(sp)
 1001578:	dd400615 	stw	r21,24(sp)
 100157c:	dd000515 	stw	r20,20(sp)
 1001580:	dcc00415 	stw	r19,16(sp)
 1001584:	dc400215 	stw	r17,8(sp)
 1001588:	dc000115 	stw	r16,4(sp)
 100158c:	302d883a 	mov	r22,r6
 1001590:	2039883a 	mov	fp,r4
 1001594:	2825883a 	mov	r18,r5
 1001598:	10001c26 	beq	r2,zero,100160c <__sfvwrite_r+0xb0>
 100159c:	29c0030b 	ldhu	r7,12(r5)
 10015a0:	3880020c 	andi	r2,r7,8
 10015a4:	10002726 	beq	r2,zero,1001644 <__sfvwrite_r+0xe8>
 10015a8:	28800417 	ldw	r2,16(r5)
 10015ac:	10002526 	beq	r2,zero,1001644 <__sfvwrite_r+0xe8>
 10015b0:	3880008c 	andi	r2,r7,2
 10015b4:	b5400017 	ldw	r21,0(r22)
 10015b8:	10002826 	beq	r2,zero,100165c <__sfvwrite_r+0x100>
 10015bc:	0021883a 	mov	r16,zero
 10015c0:	0023883a 	mov	r17,zero
 10015c4:	880d883a 	mov	r6,r17
 10015c8:	e009883a 	mov	r4,fp
 10015cc:	00810004 	movi	r2,1024
 10015d0:	80006e26 	beq	r16,zero,100178c <__sfvwrite_r+0x230>
 10015d4:	800f883a 	mov	r7,r16
 10015d8:	91400717 	ldw	r5,28(r18)
 10015dc:	1400012e 	bgeu	r2,r16,10015e4 <__sfvwrite_r+0x88>
 10015e0:	100f883a 	mov	r7,r2
 10015e4:	90c00917 	ldw	r3,36(r18)
 10015e8:	183ee83a 	callr	r3
 10015ec:	1007883a 	mov	r3,r2
 10015f0:	80a1c83a 	sub	r16,r16,r2
 10015f4:	88a3883a 	add	r17,r17,r2
 10015f8:	00806d0e 	bge	zero,r2,10017b0 <__sfvwrite_r+0x254>
 10015fc:	b0800217 	ldw	r2,8(r22)
 1001600:	10c5c83a 	sub	r2,r2,r3
 1001604:	b0800215 	stw	r2,8(r22)
 1001608:	103fee1e 	bne	r2,zero,10015c4 <__sfvwrite_r+0x68>
 100160c:	0009883a 	mov	r4,zero
 1001610:	2005883a 	mov	r2,r4
 1001614:	dfc00a17 	ldw	ra,40(sp)
 1001618:	df000917 	ldw	fp,36(sp)
 100161c:	ddc00817 	ldw	r23,32(sp)
 1001620:	dd800717 	ldw	r22,28(sp)
 1001624:	dd400617 	ldw	r21,24(sp)
 1001628:	dd000517 	ldw	r20,20(sp)
 100162c:	dcc00417 	ldw	r19,16(sp)
 1001630:	dc800317 	ldw	r18,12(sp)
 1001634:	dc400217 	ldw	r17,8(sp)
 1001638:	dc000117 	ldw	r16,4(sp)
 100163c:	dec00b04 	addi	sp,sp,44
 1001640:	f800283a 	ret
 1001644:	10035200 	call	1003520 <__swsetup_r>
 1001648:	1000e41e 	bne	r2,zero,10019dc <__sfvwrite_r+0x480>
 100164c:	91c0030b 	ldhu	r7,12(r18)
 1001650:	b5400017 	ldw	r21,0(r22)
 1001654:	3880008c 	andi	r2,r7,2
 1001658:	103fd81e 	bne	r2,zero,10015bc <__sfvwrite_r+0x60>
 100165c:	3880004c 	andi	r2,r7,1
 1001660:	1005003a 	cmpeq	r2,r2,zero
 1001664:	10005726 	beq	r2,zero,10017c4 <__sfvwrite_r+0x268>
 1001668:	0029883a 	mov	r20,zero
 100166c:	002f883a 	mov	r23,zero
 1001670:	a0004226 	beq	r20,zero,100177c <__sfvwrite_r+0x220>
 1001674:	3880800c 	andi	r2,r7,512
 1001678:	94000217 	ldw	r16,8(r18)
 100167c:	10008b26 	beq	r2,zero,10018ac <__sfvwrite_r+0x350>
 1001680:	800d883a 	mov	r6,r16
 1001684:	a400a536 	bltu	r20,r16,100191c <__sfvwrite_r+0x3c0>
 1001688:	3881200c 	andi	r2,r7,1152
 100168c:	10002726 	beq	r2,zero,100172c <__sfvwrite_r+0x1d0>
 1001690:	90800517 	ldw	r2,20(r18)
 1001694:	92000417 	ldw	r8,16(r18)
 1001698:	91400017 	ldw	r5,0(r18)
 100169c:	1087883a 	add	r3,r2,r2
 10016a0:	1887883a 	add	r3,r3,r2
 10016a4:	1808d7fa 	srli	r4,r3,31
 10016a8:	2a21c83a 	sub	r16,r5,r8
 10016ac:	80800044 	addi	r2,r16,1
 10016b0:	20c9883a 	add	r4,r4,r3
 10016b4:	2027d07a 	srai	r19,r4,1
 10016b8:	a085883a 	add	r2,r20,r2
 10016bc:	980d883a 	mov	r6,r19
 10016c0:	9880022e 	bgeu	r19,r2,10016cc <__sfvwrite_r+0x170>
 10016c4:	1027883a 	mov	r19,r2
 10016c8:	100d883a 	mov	r6,r2
 10016cc:	3881000c 	andi	r2,r7,1024
 10016d0:	1000b826 	beq	r2,zero,10019b4 <__sfvwrite_r+0x458>
 10016d4:	300b883a 	mov	r5,r6
 10016d8:	e009883a 	mov	r4,fp
 10016dc:	1001e200 	call	1001e20 <_malloc_r>
 10016e0:	10003126 	beq	r2,zero,10017a8 <__sfvwrite_r+0x24c>
 10016e4:	91400417 	ldw	r5,16(r18)
 10016e8:	1009883a 	mov	r4,r2
 10016ec:	800d883a 	mov	r6,r16
 10016f0:	1023883a 	mov	r17,r2
 10016f4:	10026440 	call	1002644 <memcpy>
 10016f8:	90c0030b 	ldhu	r3,12(r18)
 10016fc:	00beffc4 	movi	r2,-1025
 1001700:	1886703a 	and	r3,r3,r2
 1001704:	18c02014 	ori	r3,r3,128
 1001708:	90c0030d 	sth	r3,12(r18)
 100170c:	9c07c83a 	sub	r3,r19,r16
 1001710:	8c05883a 	add	r2,r17,r16
 1001714:	a00d883a 	mov	r6,r20
 1001718:	a021883a 	mov	r16,r20
 100171c:	90800015 	stw	r2,0(r18)
 1001720:	90c00215 	stw	r3,8(r18)
 1001724:	94400415 	stw	r17,16(r18)
 1001728:	94c00515 	stw	r19,20(r18)
 100172c:	91000017 	ldw	r4,0(r18)
 1001730:	b80b883a 	mov	r5,r23
 1001734:	a023883a 	mov	r17,r20
 1001738:	10026e40 	call	10026e4 <memmove>
 100173c:	90c00217 	ldw	r3,8(r18)
 1001740:	90800017 	ldw	r2,0(r18)
 1001744:	a027883a 	mov	r19,r20
 1001748:	1c07c83a 	sub	r3,r3,r16
 100174c:	1405883a 	add	r2,r2,r16
 1001750:	90c00215 	stw	r3,8(r18)
 1001754:	a021883a 	mov	r16,r20
 1001758:	90800015 	stw	r2,0(r18)
 100175c:	b0800217 	ldw	r2,8(r22)
 1001760:	1405c83a 	sub	r2,r2,r16
 1001764:	b0800215 	stw	r2,8(r22)
 1001768:	103fa826 	beq	r2,zero,100160c <__sfvwrite_r+0xb0>
 100176c:	a469c83a 	sub	r20,r20,r17
 1001770:	91c0030b 	ldhu	r7,12(r18)
 1001774:	bcef883a 	add	r23,r23,r19
 1001778:	a03fbe1e 	bne	r20,zero,1001674 <__sfvwrite_r+0x118>
 100177c:	adc00017 	ldw	r23,0(r21)
 1001780:	ad000117 	ldw	r20,4(r21)
 1001784:	ad400204 	addi	r21,r21,8
 1001788:	003fb906 	br	1001670 <__sfvwrite_r+0x114>
 100178c:	ac400017 	ldw	r17,0(r21)
 1001790:	ac000117 	ldw	r16,4(r21)
 1001794:	ad400204 	addi	r21,r21,8
 1001798:	003f8a06 	br	10015c4 <__sfvwrite_r+0x68>
 100179c:	91400417 	ldw	r5,16(r18)
 10017a0:	e009883a 	mov	r4,fp
 10017a4:	1000d740 	call	1000d74 <_free_r>
 10017a8:	00800304 	movi	r2,12
 10017ac:	e0800015 	stw	r2,0(fp)
 10017b0:	9080030b 	ldhu	r2,12(r18)
 10017b4:	013fffc4 	movi	r4,-1
 10017b8:	10801014 	ori	r2,r2,64
 10017bc:	9080030d 	sth	r2,12(r18)
 10017c0:	003f9306 	br	1001610 <__sfvwrite_r+0xb4>
 10017c4:	0027883a 	mov	r19,zero
 10017c8:	002f883a 	mov	r23,zero
 10017cc:	d8000015 	stw	zero,0(sp)
 10017d0:	0029883a 	mov	r20,zero
 10017d4:	98001e26 	beq	r19,zero,1001850 <__sfvwrite_r+0x2f4>
 10017d8:	d8c00017 	ldw	r3,0(sp)
 10017dc:	1804c03a 	cmpne	r2,r3,zero
 10017e0:	10005e26 	beq	r2,zero,100195c <__sfvwrite_r+0x400>
 10017e4:	9821883a 	mov	r16,r19
 10017e8:	a4c0012e 	bgeu	r20,r19,10017f0 <__sfvwrite_r+0x294>
 10017ec:	a021883a 	mov	r16,r20
 10017f0:	91000017 	ldw	r4,0(r18)
 10017f4:	90800417 	ldw	r2,16(r18)
 10017f8:	91800217 	ldw	r6,8(r18)
 10017fc:	91c00517 	ldw	r7,20(r18)
 1001800:	1100022e 	bgeu	r2,r4,100180c <__sfvwrite_r+0x2b0>
 1001804:	31e3883a 	add	r17,r6,r7
 1001808:	8c001616 	blt	r17,r16,1001864 <__sfvwrite_r+0x308>
 100180c:	81c03816 	blt	r16,r7,10018f0 <__sfvwrite_r+0x394>
 1001810:	90c00917 	ldw	r3,36(r18)
 1001814:	91400717 	ldw	r5,28(r18)
 1001818:	e009883a 	mov	r4,fp
 100181c:	b80d883a 	mov	r6,r23
 1001820:	183ee83a 	callr	r3
 1001824:	1023883a 	mov	r17,r2
 1001828:	00bfe10e 	bge	zero,r2,10017b0 <__sfvwrite_r+0x254>
 100182c:	a469c83a 	sub	r20,r20,r17
 1001830:	a0001826 	beq	r20,zero,1001894 <__sfvwrite_r+0x338>
 1001834:	b0800217 	ldw	r2,8(r22)
 1001838:	1445c83a 	sub	r2,r2,r17
 100183c:	b0800215 	stw	r2,8(r22)
 1001840:	103f7226 	beq	r2,zero,100160c <__sfvwrite_r+0xb0>
 1001844:	9c67c83a 	sub	r19,r19,r17
 1001848:	bc6f883a 	add	r23,r23,r17
 100184c:	983fe21e 	bne	r19,zero,10017d8 <__sfvwrite_r+0x27c>
 1001850:	adc00017 	ldw	r23,0(r21)
 1001854:	acc00117 	ldw	r19,4(r21)
 1001858:	ad400204 	addi	r21,r21,8
 100185c:	d8000015 	stw	zero,0(sp)
 1001860:	003fdc06 	br	10017d4 <__sfvwrite_r+0x278>
 1001864:	b80b883a 	mov	r5,r23
 1001868:	880d883a 	mov	r6,r17
 100186c:	10026e40 	call	10026e4 <memmove>
 1001870:	90c00017 	ldw	r3,0(r18)
 1001874:	e009883a 	mov	r4,fp
 1001878:	900b883a 	mov	r5,r18
 100187c:	1c47883a 	add	r3,r3,r17
 1001880:	90c00015 	stw	r3,0(r18)
 1001884:	10005840 	call	1000584 <_fflush_r>
 1001888:	103fc91e 	bne	r2,zero,10017b0 <__sfvwrite_r+0x254>
 100188c:	a469c83a 	sub	r20,r20,r17
 1001890:	a03fe81e 	bne	r20,zero,1001834 <__sfvwrite_r+0x2d8>
 1001894:	e009883a 	mov	r4,fp
 1001898:	900b883a 	mov	r5,r18
 100189c:	10005840 	call	1000584 <_fflush_r>
 10018a0:	103fc31e 	bne	r2,zero,10017b0 <__sfvwrite_r+0x254>
 10018a4:	d8000015 	stw	zero,0(sp)
 10018a8:	003fe206 	br	1001834 <__sfvwrite_r+0x2d8>
 10018ac:	91000017 	ldw	r4,0(r18)
 10018b0:	90800417 	ldw	r2,16(r18)
 10018b4:	1100022e 	bgeu	r2,r4,10018c0 <__sfvwrite_r+0x364>
 10018b8:	8023883a 	mov	r17,r16
 10018bc:	85003136 	bltu	r16,r20,1001984 <__sfvwrite_r+0x428>
 10018c0:	91c00517 	ldw	r7,20(r18)
 10018c4:	a1c01836 	bltu	r20,r7,1001928 <__sfvwrite_r+0x3cc>
 10018c8:	90c00917 	ldw	r3,36(r18)
 10018cc:	91400717 	ldw	r5,28(r18)
 10018d0:	e009883a 	mov	r4,fp
 10018d4:	b80d883a 	mov	r6,r23
 10018d8:	183ee83a 	callr	r3
 10018dc:	1021883a 	mov	r16,r2
 10018e0:	00bfb30e 	bge	zero,r2,10017b0 <__sfvwrite_r+0x254>
 10018e4:	1023883a 	mov	r17,r2
 10018e8:	1027883a 	mov	r19,r2
 10018ec:	003f9b06 	br	100175c <__sfvwrite_r+0x200>
 10018f0:	b80b883a 	mov	r5,r23
 10018f4:	800d883a 	mov	r6,r16
 10018f8:	10026e40 	call	10026e4 <memmove>
 10018fc:	90c00217 	ldw	r3,8(r18)
 1001900:	90800017 	ldw	r2,0(r18)
 1001904:	8023883a 	mov	r17,r16
 1001908:	1c07c83a 	sub	r3,r3,r16
 100190c:	1405883a 	add	r2,r2,r16
 1001910:	90c00215 	stw	r3,8(r18)
 1001914:	90800015 	stw	r2,0(r18)
 1001918:	003fc406 	br	100182c <__sfvwrite_r+0x2d0>
 100191c:	a00d883a 	mov	r6,r20
 1001920:	a021883a 	mov	r16,r20
 1001924:	003f8106 	br	100172c <__sfvwrite_r+0x1d0>
 1001928:	b80b883a 	mov	r5,r23
 100192c:	a00d883a 	mov	r6,r20
 1001930:	10026e40 	call	10026e4 <memmove>
 1001934:	90c00217 	ldw	r3,8(r18)
 1001938:	90800017 	ldw	r2,0(r18)
 100193c:	a021883a 	mov	r16,r20
 1001940:	1d07c83a 	sub	r3,r3,r20
 1001944:	1505883a 	add	r2,r2,r20
 1001948:	a023883a 	mov	r17,r20
 100194c:	a027883a 	mov	r19,r20
 1001950:	90c00215 	stw	r3,8(r18)
 1001954:	90800015 	stw	r2,0(r18)
 1001958:	003f8006 	br	100175c <__sfvwrite_r+0x200>
 100195c:	b809883a 	mov	r4,r23
 1001960:	01400284 	movi	r5,10
 1001964:	980d883a 	mov	r6,r19
 1001968:	10025600 	call	1002560 <memchr>
 100196c:	10001726 	beq	r2,zero,10019cc <__sfvwrite_r+0x470>
 1001970:	15c5c83a 	sub	r2,r2,r23
 1001974:	15000044 	addi	r20,r2,1
 1001978:	00800044 	movi	r2,1
 100197c:	d8800015 	stw	r2,0(sp)
 1001980:	003f9806 	br	10017e4 <__sfvwrite_r+0x288>
 1001984:	b80b883a 	mov	r5,r23
 1001988:	800d883a 	mov	r6,r16
 100198c:	10026e40 	call	10026e4 <memmove>
 1001990:	90c00017 	ldw	r3,0(r18)
 1001994:	e009883a 	mov	r4,fp
 1001998:	900b883a 	mov	r5,r18
 100199c:	1c07883a 	add	r3,r3,r16
 10019a0:	90c00015 	stw	r3,0(r18)
 10019a4:	8027883a 	mov	r19,r16
 10019a8:	10005840 	call	1000584 <_fflush_r>
 10019ac:	103f6b26 	beq	r2,zero,100175c <__sfvwrite_r+0x200>
 10019b0:	003f7f06 	br	10017b0 <__sfvwrite_r+0x254>
 10019b4:	400b883a 	mov	r5,r8
 10019b8:	e009883a 	mov	r4,fp
 10019bc:	10029880 	call	1002988 <_realloc_r>
 10019c0:	103f7626 	beq	r2,zero,100179c <__sfvwrite_r+0x240>
 10019c4:	1023883a 	mov	r17,r2
 10019c8:	003f5006 	br	100170c <__sfvwrite_r+0x1b0>
 10019cc:	00c00044 	movi	r3,1
 10019d0:	9d000044 	addi	r20,r19,1
 10019d4:	d8c00015 	stw	r3,0(sp)
 10019d8:	003f8206 	br	10017e4 <__sfvwrite_r+0x288>
 10019dc:	9080030b 	ldhu	r2,12(r18)
 10019e0:	00c00244 	movi	r3,9
 10019e4:	013fffc4 	movi	r4,-1
 10019e8:	10801014 	ori	r2,r2,64
 10019ec:	9080030d 	sth	r2,12(r18)
 10019f0:	e0c00015 	stw	r3,0(fp)
 10019f4:	003f0606 	br	1001610 <__sfvwrite_r+0xb4>

010019f8 <_fwalk_reent>:
 10019f8:	defff704 	addi	sp,sp,-36
 10019fc:	dcc00315 	stw	r19,12(sp)
 1001a00:	24c0b804 	addi	r19,r4,736
 1001a04:	dd800615 	stw	r22,24(sp)
 1001a08:	dd400515 	stw	r21,20(sp)
 1001a0c:	dfc00815 	stw	ra,32(sp)
 1001a10:	ddc00715 	stw	r23,28(sp)
 1001a14:	dd000415 	stw	r20,16(sp)
 1001a18:	dc800215 	stw	r18,8(sp)
 1001a1c:	dc400115 	stw	r17,4(sp)
 1001a20:	dc000015 	stw	r16,0(sp)
 1001a24:	202b883a 	mov	r21,r4
 1001a28:	282d883a 	mov	r22,r5
 1001a2c:	100080c0 	call	100080c <__sfp_lock_acquire>
 1001a30:	98002126 	beq	r19,zero,1001ab8 <_fwalk_reent+0xc0>
 1001a34:	002f883a 	mov	r23,zero
 1001a38:	9c800117 	ldw	r18,4(r19)
 1001a3c:	9c000217 	ldw	r16,8(r19)
 1001a40:	90bfffc4 	addi	r2,r18,-1
 1001a44:	10000d16 	blt	r2,zero,1001a7c <_fwalk_reent+0x84>
 1001a48:	0023883a 	mov	r17,zero
 1001a4c:	053fffc4 	movi	r20,-1
 1001a50:	8080030f 	ldh	r2,12(r16)
 1001a54:	8c400044 	addi	r17,r17,1
 1001a58:	10000626 	beq	r2,zero,1001a74 <_fwalk_reent+0x7c>
 1001a5c:	8080038f 	ldh	r2,14(r16)
 1001a60:	800b883a 	mov	r5,r16
 1001a64:	a809883a 	mov	r4,r21
 1001a68:	15000226 	beq	r2,r20,1001a74 <_fwalk_reent+0x7c>
 1001a6c:	b03ee83a 	callr	r22
 1001a70:	b8aeb03a 	or	r23,r23,r2
 1001a74:	84001704 	addi	r16,r16,92
 1001a78:	947ff51e 	bne	r18,r17,1001a50 <_fwalk_reent+0x58>
 1001a7c:	9cc00017 	ldw	r19,0(r19)
 1001a80:	983fed1e 	bne	r19,zero,1001a38 <_fwalk_reent+0x40>
 1001a84:	10008100 	call	1000810 <__sfp_lock_release>
 1001a88:	b805883a 	mov	r2,r23
 1001a8c:	dfc00817 	ldw	ra,32(sp)
 1001a90:	ddc00717 	ldw	r23,28(sp)
 1001a94:	dd800617 	ldw	r22,24(sp)
 1001a98:	dd400517 	ldw	r21,20(sp)
 1001a9c:	dd000417 	ldw	r20,16(sp)
 1001aa0:	dcc00317 	ldw	r19,12(sp)
 1001aa4:	dc800217 	ldw	r18,8(sp)
 1001aa8:	dc400117 	ldw	r17,4(sp)
 1001aac:	dc000017 	ldw	r16,0(sp)
 1001ab0:	dec00904 	addi	sp,sp,36
 1001ab4:	f800283a 	ret
 1001ab8:	002f883a 	mov	r23,zero
 1001abc:	003ff106 	br	1001a84 <_fwalk_reent+0x8c>

01001ac0 <_fwalk>:
 1001ac0:	defff804 	addi	sp,sp,-32
 1001ac4:	dcc00315 	stw	r19,12(sp)
 1001ac8:	24c0b804 	addi	r19,r4,736
 1001acc:	dd400515 	stw	r21,20(sp)
 1001ad0:	dfc00715 	stw	ra,28(sp)
 1001ad4:	dd800615 	stw	r22,24(sp)
 1001ad8:	dd000415 	stw	r20,16(sp)
 1001adc:	dc800215 	stw	r18,8(sp)
 1001ae0:	dc400115 	stw	r17,4(sp)
 1001ae4:	dc000015 	stw	r16,0(sp)
 1001ae8:	282b883a 	mov	r21,r5
 1001aec:	100080c0 	call	100080c <__sfp_lock_acquire>
 1001af0:	98001f26 	beq	r19,zero,1001b70 <_fwalk+0xb0>
 1001af4:	002d883a 	mov	r22,zero
 1001af8:	9c800117 	ldw	r18,4(r19)
 1001afc:	9c000217 	ldw	r16,8(r19)
 1001b00:	90bfffc4 	addi	r2,r18,-1
 1001b04:	10000c16 	blt	r2,zero,1001b38 <_fwalk+0x78>
 1001b08:	0023883a 	mov	r17,zero
 1001b0c:	053fffc4 	movi	r20,-1
 1001b10:	8080030f 	ldh	r2,12(r16)
 1001b14:	8c400044 	addi	r17,r17,1
 1001b18:	10000526 	beq	r2,zero,1001b30 <_fwalk+0x70>
 1001b1c:	8080038f 	ldh	r2,14(r16)
 1001b20:	8009883a 	mov	r4,r16
 1001b24:	15000226 	beq	r2,r20,1001b30 <_fwalk+0x70>
 1001b28:	a83ee83a 	callr	r21
 1001b2c:	b0acb03a 	or	r22,r22,r2
 1001b30:	84001704 	addi	r16,r16,92
 1001b34:	947ff61e 	bne	r18,r17,1001b10 <_fwalk+0x50>
 1001b38:	9cc00017 	ldw	r19,0(r19)
 1001b3c:	983fee1e 	bne	r19,zero,1001af8 <_fwalk+0x38>
 1001b40:	10008100 	call	1000810 <__sfp_lock_release>
 1001b44:	b005883a 	mov	r2,r22
 1001b48:	dfc00717 	ldw	ra,28(sp)
 1001b4c:	dd800617 	ldw	r22,24(sp)
 1001b50:	dd400517 	ldw	r21,20(sp)
 1001b54:	dd000417 	ldw	r20,16(sp)
 1001b58:	dcc00317 	ldw	r19,12(sp)
 1001b5c:	dc800217 	ldw	r18,8(sp)
 1001b60:	dc400117 	ldw	r17,4(sp)
 1001b64:	dc000017 	ldw	r16,0(sp)
 1001b68:	dec00804 	addi	sp,sp,32
 1001b6c:	f800283a 	ret
 1001b70:	002d883a 	mov	r22,zero
 1001b74:	003ff206 	br	1001b40 <_fwalk+0x80>

01001b78 <_fwrite_r>:
 1001b78:	defff604 	addi	sp,sp,-40
 1001b7c:	dc000515 	stw	r16,20(sp)
 1001b80:	d9400015 	stw	r5,0(sp)
 1001b84:	2021883a 	mov	r16,r4
 1001b88:	300b883a 	mov	r5,r6
 1001b8c:	3809883a 	mov	r4,r7
 1001b90:	dcc00815 	stw	r19,32(sp)
 1001b94:	dc800715 	stw	r18,28(sp)
 1001b98:	dc400615 	stw	r17,24(sp)
 1001b9c:	dfc00915 	stw	ra,36(sp)
 1001ba0:	3825883a 	mov	r18,r7
 1001ba4:	3027883a 	mov	r19,r6
 1001ba8:	1003a180 	call	1003a18 <__mulsi3>
 1001bac:	1023883a 	mov	r17,r2
 1001bb0:	00800044 	movi	r2,1
 1001bb4:	d8800315 	stw	r2,12(sp)
 1001bb8:	dc400115 	stw	r17,4(sp)
 1001bbc:	dc400415 	stw	r17,16(sp)
 1001bc0:	dec00215 	stw	sp,8(sp)
 1001bc4:	80000326 	beq	r16,zero,1001bd4 <_fwrite_r+0x5c>
 1001bc8:	80800e17 	ldw	r2,56(r16)
 1001bcc:	8009883a 	mov	r4,r16
 1001bd0:	10001226 	beq	r2,zero,1001c1c <_fwrite_r+0xa4>
 1001bd4:	d9400a17 	ldw	r5,40(sp)
 1001bd8:	8009883a 	mov	r4,r16
 1001bdc:	d9800204 	addi	r6,sp,8
 1001be0:	100155c0 	call	100155c <__sfvwrite_r>
 1001be4:	980b883a 	mov	r5,r19
 1001be8:	10000426 	beq	r2,zero,1001bfc <_fwrite_r+0x84>
 1001bec:	d9000417 	ldw	r4,16(sp)
 1001bf0:	8909c83a 	sub	r4,r17,r4
 1001bf4:	1003a080 	call	1003a08 <__udivsi3>
 1001bf8:	1025883a 	mov	r18,r2
 1001bfc:	9005883a 	mov	r2,r18
 1001c00:	dfc00917 	ldw	ra,36(sp)
 1001c04:	dcc00817 	ldw	r19,32(sp)
 1001c08:	dc800717 	ldw	r18,28(sp)
 1001c0c:	dc400617 	ldw	r17,24(sp)
 1001c10:	dc000517 	ldw	r16,20(sp)
 1001c14:	dec00a04 	addi	sp,sp,40
 1001c18:	f800283a 	ret
 1001c1c:	100081c0 	call	100081c <__sinit>
 1001c20:	003fec06 	br	1001bd4 <_fwrite_r+0x5c>

01001c24 <fwrite>:
 1001c24:	00804074 	movhi	r2,257
 1001c28:	10a5dd04 	addi	r2,r2,-26764
 1001c2c:	2017883a 	mov	r11,r4
 1001c30:	11000017 	ldw	r4,0(r2)
 1001c34:	defffe04 	addi	sp,sp,-8
 1001c38:	3013883a 	mov	r9,r6
 1001c3c:	2805883a 	mov	r2,r5
 1001c40:	d9c00015 	stw	r7,0(sp)
 1001c44:	580b883a 	mov	r5,r11
 1001c48:	100d883a 	mov	r6,r2
 1001c4c:	480f883a 	mov	r7,r9
 1001c50:	dfc00115 	stw	ra,4(sp)
 1001c54:	1001b780 	call	1001b78 <_fwrite_r>
 1001c58:	dfc00117 	ldw	ra,4(sp)
 1001c5c:	dec00204 	addi	sp,sp,8
 1001c60:	f800283a 	ret

01001c64 <__smakebuf_r>:
 1001c64:	2880030b 	ldhu	r2,12(r5)
 1001c68:	deffed04 	addi	sp,sp,-76
 1001c6c:	dc401015 	stw	r17,64(sp)
 1001c70:	1080008c 	andi	r2,r2,2
 1001c74:	dc000f15 	stw	r16,60(sp)
 1001c78:	dfc01215 	stw	ra,72(sp)
 1001c7c:	dc801115 	stw	r18,68(sp)
 1001c80:	2821883a 	mov	r16,r5
 1001c84:	2023883a 	mov	r17,r4
 1001c88:	10000b26 	beq	r2,zero,1001cb8 <__smakebuf_r+0x54>
 1001c8c:	28c010c4 	addi	r3,r5,67
 1001c90:	00800044 	movi	r2,1
 1001c94:	28800515 	stw	r2,20(r5)
 1001c98:	28c00415 	stw	r3,16(r5)
 1001c9c:	28c00015 	stw	r3,0(r5)
 1001ca0:	dfc01217 	ldw	ra,72(sp)
 1001ca4:	dc801117 	ldw	r18,68(sp)
 1001ca8:	dc401017 	ldw	r17,64(sp)
 1001cac:	dc000f17 	ldw	r16,60(sp)
 1001cb0:	dec01304 	addi	sp,sp,76
 1001cb4:	f800283a 	ret
 1001cb8:	2940038f 	ldh	r5,14(r5)
 1001cbc:	28002116 	blt	r5,zero,1001d44 <__smakebuf_r+0xe0>
 1001cc0:	d80d883a 	mov	r6,sp
 1001cc4:	10014e80 	call	10014e8 <_fstat_r>
 1001cc8:	10001e16 	blt	r2,zero,1001d44 <__smakebuf_r+0xe0>
 1001ccc:	d8800117 	ldw	r2,4(sp)
 1001cd0:	00e00014 	movui	r3,32768
 1001cd4:	113c000c 	andi	r4,r2,61440
 1001cd8:	20c03126 	beq	r4,r3,1001da0 <__smakebuf_r+0x13c>
 1001cdc:	8080030b 	ldhu	r2,12(r16)
 1001ce0:	00c80004 	movi	r3,8192
 1001ce4:	10820014 	ori	r2,r2,2048
 1001ce8:	8080030d 	sth	r2,12(r16)
 1001cec:	20c01e26 	beq	r4,r3,1001d68 <__smakebuf_r+0x104>
 1001cf0:	04810004 	movi	r18,1024
 1001cf4:	8809883a 	mov	r4,r17
 1001cf8:	900b883a 	mov	r5,r18
 1001cfc:	1001e200 	call	1001e20 <_malloc_r>
 1001d00:	1009883a 	mov	r4,r2
 1001d04:	10003126 	beq	r2,zero,1001dcc <__smakebuf_r+0x168>
 1001d08:	80c0030b 	ldhu	r3,12(r16)
 1001d0c:	00804034 	movhi	r2,256
 1001d10:	10824004 	addi	r2,r2,2304
 1001d14:	88800f15 	stw	r2,60(r17)
 1001d18:	18c02014 	ori	r3,r3,128
 1001d1c:	84800515 	stw	r18,20(r16)
 1001d20:	80c0030d 	sth	r3,12(r16)
 1001d24:	81000415 	stw	r4,16(r16)
 1001d28:	81000015 	stw	r4,0(r16)
 1001d2c:	dfc01217 	ldw	ra,72(sp)
 1001d30:	dc801117 	ldw	r18,68(sp)
 1001d34:	dc401017 	ldw	r17,64(sp)
 1001d38:	dc000f17 	ldw	r16,60(sp)
 1001d3c:	dec01304 	addi	sp,sp,76
 1001d40:	f800283a 	ret
 1001d44:	80c0030b 	ldhu	r3,12(r16)
 1001d48:	1880200c 	andi	r2,r3,128
 1001d4c:	10000426 	beq	r2,zero,1001d60 <__smakebuf_r+0xfc>
 1001d50:	04801004 	movi	r18,64
 1001d54:	18820014 	ori	r2,r3,2048
 1001d58:	8080030d 	sth	r2,12(r16)
 1001d5c:	003fe506 	br	1001cf4 <__smakebuf_r+0x90>
 1001d60:	04810004 	movi	r18,1024
 1001d64:	003ffb06 	br	1001d54 <__smakebuf_r+0xf0>
 1001d68:	8140038f 	ldh	r5,14(r16)
 1001d6c:	8809883a 	mov	r4,r17
 1001d70:	100376c0 	call	100376c <_isatty_r>
 1001d74:	103fde26 	beq	r2,zero,1001cf0 <__smakebuf_r+0x8c>
 1001d78:	8080030b 	ldhu	r2,12(r16)
 1001d7c:	80c010c4 	addi	r3,r16,67
 1001d80:	04810004 	movi	r18,1024
 1001d84:	10800054 	ori	r2,r2,1
 1001d88:	8080030d 	sth	r2,12(r16)
 1001d8c:	00800044 	movi	r2,1
 1001d90:	80c00415 	stw	r3,16(r16)
 1001d94:	80800515 	stw	r2,20(r16)
 1001d98:	80c00015 	stw	r3,0(r16)
 1001d9c:	003fd506 	br	1001cf4 <__smakebuf_r+0x90>
 1001da0:	80c00a17 	ldw	r3,40(r16)
 1001da4:	00804034 	movhi	r2,256
 1001da8:	108c7504 	addi	r2,r2,12756
 1001dac:	18bfcb1e 	bne	r3,r2,1001cdc <__smakebuf_r+0x78>
 1001db0:	8080030b 	ldhu	r2,12(r16)
 1001db4:	00c10004 	movi	r3,1024
 1001db8:	1825883a 	mov	r18,r3
 1001dbc:	10c4b03a 	or	r2,r2,r3
 1001dc0:	8080030d 	sth	r2,12(r16)
 1001dc4:	80c01315 	stw	r3,76(r16)
 1001dc8:	003fca06 	br	1001cf4 <__smakebuf_r+0x90>
 1001dcc:	8100030b 	ldhu	r4,12(r16)
 1001dd0:	2080800c 	andi	r2,r4,512
 1001dd4:	103fb21e 	bne	r2,zero,1001ca0 <__smakebuf_r+0x3c>
 1001dd8:	80c010c4 	addi	r3,r16,67
 1001ddc:	21000094 	ori	r4,r4,2
 1001de0:	00800044 	movi	r2,1
 1001de4:	80800515 	stw	r2,20(r16)
 1001de8:	8100030d 	sth	r4,12(r16)
 1001dec:	80c00415 	stw	r3,16(r16)
 1001df0:	80c00015 	stw	r3,0(r16)
 1001df4:	003faa06 	br	1001ca0 <__smakebuf_r+0x3c>

01001df8 <free>:
 1001df8:	00804074 	movhi	r2,257
 1001dfc:	10a5dd04 	addi	r2,r2,-26764
 1001e00:	200b883a 	mov	r5,r4
 1001e04:	11000017 	ldw	r4,0(r2)
 1001e08:	1000d741 	jmpi	1000d74 <_free_r>

01001e0c <malloc>:
 1001e0c:	00804074 	movhi	r2,257
 1001e10:	10a5dd04 	addi	r2,r2,-26764
 1001e14:	200b883a 	mov	r5,r4
 1001e18:	11000017 	ldw	r4,0(r2)
 1001e1c:	1001e201 	jmpi	1001e20 <_malloc_r>

01001e20 <_malloc_r>:
 1001e20:	defff604 	addi	sp,sp,-40
 1001e24:	28c002c4 	addi	r3,r5,11
 1001e28:	00800584 	movi	r2,22
 1001e2c:	dc800215 	stw	r18,8(sp)
 1001e30:	dfc00915 	stw	ra,36(sp)
 1001e34:	df000815 	stw	fp,32(sp)
 1001e38:	ddc00715 	stw	r23,28(sp)
 1001e3c:	dd800615 	stw	r22,24(sp)
 1001e40:	dd400515 	stw	r21,20(sp)
 1001e44:	dd000415 	stw	r20,16(sp)
 1001e48:	dcc00315 	stw	r19,12(sp)
 1001e4c:	dc400115 	stw	r17,4(sp)
 1001e50:	dc000015 	stw	r16,0(sp)
 1001e54:	2025883a 	mov	r18,r4
 1001e58:	10c01236 	bltu	r2,r3,1001ea4 <_malloc_r+0x84>
 1001e5c:	04400404 	movi	r17,16
 1001e60:	8940142e 	bgeu	r17,r5,1001eb4 <_malloc_r+0x94>
 1001e64:	00800304 	movi	r2,12
 1001e68:	0007883a 	mov	r3,zero
 1001e6c:	90800015 	stw	r2,0(r18)
 1001e70:	1805883a 	mov	r2,r3
 1001e74:	dfc00917 	ldw	ra,36(sp)
 1001e78:	df000817 	ldw	fp,32(sp)
 1001e7c:	ddc00717 	ldw	r23,28(sp)
 1001e80:	dd800617 	ldw	r22,24(sp)
 1001e84:	dd400517 	ldw	r21,20(sp)
 1001e88:	dd000417 	ldw	r20,16(sp)
 1001e8c:	dcc00317 	ldw	r19,12(sp)
 1001e90:	dc800217 	ldw	r18,8(sp)
 1001e94:	dc400117 	ldw	r17,4(sp)
 1001e98:	dc000017 	ldw	r16,0(sp)
 1001e9c:	dec00a04 	addi	sp,sp,40
 1001ea0:	f800283a 	ret
 1001ea4:	00bffe04 	movi	r2,-8
 1001ea8:	18a2703a 	and	r17,r3,r2
 1001eac:	883fed16 	blt	r17,zero,1001e64 <_malloc_r+0x44>
 1001eb0:	897fec36 	bltu	r17,r5,1001e64 <_malloc_r+0x44>
 1001eb4:	9009883a 	mov	r4,r18
 1001eb8:	10040e40 	call	10040e4 <__malloc_lock>
 1001ebc:	00807dc4 	movi	r2,503
 1001ec0:	14402b2e 	bgeu	r2,r17,1001f70 <_malloc_r+0x150>
 1001ec4:	8806d27a 	srli	r3,r17,9
 1001ec8:	18003f1e 	bne	r3,zero,1001fc8 <_malloc_r+0x1a8>
 1001ecc:	880cd0fa 	srli	r6,r17,3
 1001ed0:	300490fa 	slli	r2,r6,3
 1001ed4:	02c04034 	movhi	r11,256
 1001ed8:	5adfe504 	addi	r11,r11,32660
 1001edc:	12cb883a 	add	r5,r2,r11
 1001ee0:	2c000317 	ldw	r16,12(r5)
 1001ee4:	580f883a 	mov	r7,r11
 1001ee8:	2c00041e 	bne	r5,r16,1001efc <_malloc_r+0xdc>
 1001eec:	00000a06 	br	1001f18 <_malloc_r+0xf8>
 1001ef0:	1800860e 	bge	r3,zero,100210c <_malloc_r+0x2ec>
 1001ef4:	84000317 	ldw	r16,12(r16)
 1001ef8:	2c000726 	beq	r5,r16,1001f18 <_malloc_r+0xf8>
 1001efc:	80800117 	ldw	r2,4(r16)
 1001f00:	00ffff04 	movi	r3,-4
 1001f04:	10c8703a 	and	r4,r2,r3
 1001f08:	2447c83a 	sub	r3,r4,r17
 1001f0c:	008003c4 	movi	r2,15
 1001f10:	10fff70e 	bge	r2,r3,1001ef0 <_malloc_r+0xd0>
 1001f14:	31bfffc4 	addi	r6,r6,-1
 1001f18:	32400044 	addi	r9,r6,1
 1001f1c:	02804034 	movhi	r10,256
 1001f20:	529fe704 	addi	r10,r10,32668
 1001f24:	54000217 	ldw	r16,8(r10)
 1001f28:	8280a026 	beq	r16,r10,10021ac <_malloc_r+0x38c>
 1001f2c:	80800117 	ldw	r2,4(r16)
 1001f30:	00ffff04 	movi	r3,-4
 1001f34:	10ca703a 	and	r5,r2,r3
 1001f38:	2c4dc83a 	sub	r6,r5,r17
 1001f3c:	008003c4 	movi	r2,15
 1001f40:	11808316 	blt	r2,r6,1002150 <_malloc_r+0x330>
 1001f44:	52800315 	stw	r10,12(r10)
 1001f48:	52800215 	stw	r10,8(r10)
 1001f4c:	30002916 	blt	r6,zero,1001ff4 <_malloc_r+0x1d4>
 1001f50:	8147883a 	add	r3,r16,r5
 1001f54:	18800117 	ldw	r2,4(r3)
 1001f58:	9009883a 	mov	r4,r18
 1001f5c:	10800054 	ori	r2,r2,1
 1001f60:	18800115 	stw	r2,4(r3)
 1001f64:	10041040 	call	1004104 <__malloc_unlock>
 1001f68:	80c00204 	addi	r3,r16,8
 1001f6c:	003fc006 	br	1001e70 <_malloc_r+0x50>
 1001f70:	02c04034 	movhi	r11,256
 1001f74:	5adfe504 	addi	r11,r11,32660
 1001f78:	8ac5883a 	add	r2,r17,r11
 1001f7c:	14000317 	ldw	r16,12(r2)
 1001f80:	580f883a 	mov	r7,r11
 1001f84:	8806d0fa 	srli	r3,r17,3
 1001f88:	14006c26 	beq	r2,r16,100213c <_malloc_r+0x31c>
 1001f8c:	80c00117 	ldw	r3,4(r16)
 1001f90:	00bfff04 	movi	r2,-4
 1001f94:	81800317 	ldw	r6,12(r16)
 1001f98:	1886703a 	and	r3,r3,r2
 1001f9c:	80c7883a 	add	r3,r16,r3
 1001fa0:	18800117 	ldw	r2,4(r3)
 1001fa4:	81400217 	ldw	r5,8(r16)
 1001fa8:	9009883a 	mov	r4,r18
 1001fac:	10800054 	ori	r2,r2,1
 1001fb0:	18800115 	stw	r2,4(r3)
 1001fb4:	31400215 	stw	r5,8(r6)
 1001fb8:	29800315 	stw	r6,12(r5)
 1001fbc:	10041040 	call	1004104 <__malloc_unlock>
 1001fc0:	80c00204 	addi	r3,r16,8
 1001fc4:	003faa06 	br	1001e70 <_malloc_r+0x50>
 1001fc8:	00800104 	movi	r2,4
 1001fcc:	10c0052e 	bgeu	r2,r3,1001fe4 <_malloc_r+0x1c4>
 1001fd0:	00800504 	movi	r2,20
 1001fd4:	10c07836 	bltu	r2,r3,10021b8 <_malloc_r+0x398>
 1001fd8:	198016c4 	addi	r6,r3,91
 1001fdc:	300490fa 	slli	r2,r6,3
 1001fe0:	003fbc06 	br	1001ed4 <_malloc_r+0xb4>
 1001fe4:	8804d1ba 	srli	r2,r17,6
 1001fe8:	11800e04 	addi	r6,r2,56
 1001fec:	300490fa 	slli	r2,r6,3
 1001ff0:	003fb806 	br	1001ed4 <_malloc_r+0xb4>
 1001ff4:	00807fc4 	movi	r2,511
 1001ff8:	1140bb36 	bltu	r2,r5,10022e8 <_malloc_r+0x4c8>
 1001ffc:	2806d0fa 	srli	r3,r5,3
 1002000:	573ffe04 	addi	fp,r10,-8
 1002004:	00800044 	movi	r2,1
 1002008:	180890fa 	slli	r4,r3,3
 100200c:	1807d0ba 	srai	r3,r3,2
 1002010:	e1c00117 	ldw	r7,4(fp)
 1002014:	5909883a 	add	r4,r11,r4
 1002018:	21400217 	ldw	r5,8(r4)
 100201c:	10c4983a 	sll	r2,r2,r3
 1002020:	81000315 	stw	r4,12(r16)
 1002024:	81400215 	stw	r5,8(r16)
 1002028:	388eb03a 	or	r7,r7,r2
 100202c:	2c000315 	stw	r16,12(r5)
 1002030:	24000215 	stw	r16,8(r4)
 1002034:	e1c00115 	stw	r7,4(fp)
 1002038:	4807883a 	mov	r3,r9
 100203c:	4800cd16 	blt	r9,zero,1002374 <_malloc_r+0x554>
 1002040:	1807d0ba 	srai	r3,r3,2
 1002044:	00800044 	movi	r2,1
 1002048:	10c8983a 	sll	r4,r2,r3
 100204c:	39004436 	bltu	r7,r4,1002160 <_malloc_r+0x340>
 1002050:	21c4703a 	and	r2,r4,r7
 1002054:	10000a1e 	bne	r2,zero,1002080 <_malloc_r+0x260>
 1002058:	2109883a 	add	r4,r4,r4
 100205c:	00bfff04 	movi	r2,-4
 1002060:	4884703a 	and	r2,r9,r2
 1002064:	3906703a 	and	r3,r7,r4
 1002068:	12400104 	addi	r9,r2,4
 100206c:	1800041e 	bne	r3,zero,1002080 <_malloc_r+0x260>
 1002070:	2109883a 	add	r4,r4,r4
 1002074:	3904703a 	and	r2,r7,r4
 1002078:	4a400104 	addi	r9,r9,4
 100207c:	103ffc26 	beq	r2,zero,1002070 <_malloc_r+0x250>
 1002080:	480490fa 	slli	r2,r9,3
 1002084:	4819883a 	mov	r12,r9
 1002088:	023fff04 	movi	r8,-4
 100208c:	589b883a 	add	r13,r11,r2
 1002090:	6807883a 	mov	r3,r13
 1002094:	014003c4 	movi	r5,15
 1002098:	1c000317 	ldw	r16,12(r3)
 100209c:	1c00041e 	bne	r3,r16,10020b0 <_malloc_r+0x290>
 10020a0:	0000a706 	br	1002340 <_malloc_r+0x520>
 10020a4:	3000ab0e 	bge	r6,zero,1002354 <_malloc_r+0x534>
 10020a8:	84000317 	ldw	r16,12(r16)
 10020ac:	1c00a426 	beq	r3,r16,1002340 <_malloc_r+0x520>
 10020b0:	80800117 	ldw	r2,4(r16)
 10020b4:	1204703a 	and	r2,r2,r8
 10020b8:	144dc83a 	sub	r6,r2,r17
 10020bc:	29bff90e 	bge	r5,r6,10020a4 <_malloc_r+0x284>
 10020c0:	81000317 	ldw	r4,12(r16)
 10020c4:	80c00217 	ldw	r3,8(r16)
 10020c8:	89400054 	ori	r5,r17,1
 10020cc:	8445883a 	add	r2,r16,r17
 10020d0:	20c00215 	stw	r3,8(r4)
 10020d4:	19000315 	stw	r4,12(r3)
 10020d8:	81400115 	stw	r5,4(r16)
 10020dc:	1187883a 	add	r3,r2,r6
 10020e0:	31000054 	ori	r4,r6,1
 10020e4:	50800315 	stw	r2,12(r10)
 10020e8:	50800215 	stw	r2,8(r10)
 10020ec:	19800015 	stw	r6,0(r3)
 10020f0:	11000115 	stw	r4,4(r2)
 10020f4:	12800215 	stw	r10,8(r2)
 10020f8:	12800315 	stw	r10,12(r2)
 10020fc:	9009883a 	mov	r4,r18
 1002100:	10041040 	call	1004104 <__malloc_unlock>
 1002104:	80c00204 	addi	r3,r16,8
 1002108:	003f5906 	br	1001e70 <_malloc_r+0x50>
 100210c:	8109883a 	add	r4,r16,r4
 1002110:	20800117 	ldw	r2,4(r4)
 1002114:	80c00217 	ldw	r3,8(r16)
 1002118:	81400317 	ldw	r5,12(r16)
 100211c:	10800054 	ori	r2,r2,1
 1002120:	20800115 	stw	r2,4(r4)
 1002124:	28c00215 	stw	r3,8(r5)
 1002128:	19400315 	stw	r5,12(r3)
 100212c:	9009883a 	mov	r4,r18
 1002130:	10041040 	call	1004104 <__malloc_unlock>
 1002134:	80c00204 	addi	r3,r16,8
 1002138:	003f4d06 	br	1001e70 <_malloc_r+0x50>
 100213c:	80800204 	addi	r2,r16,8
 1002140:	14000317 	ldw	r16,12(r2)
 1002144:	143f911e 	bne	r2,r16,1001f8c <_malloc_r+0x16c>
 1002148:	1a400084 	addi	r9,r3,2
 100214c:	003f7306 	br	1001f1c <_malloc_r+0xfc>
 1002150:	88c00054 	ori	r3,r17,1
 1002154:	8445883a 	add	r2,r16,r17
 1002158:	80c00115 	stw	r3,4(r16)
 100215c:	003fdf06 	br	10020dc <_malloc_r+0x2bc>
 1002160:	e4000217 	ldw	r16,8(fp)
 1002164:	00bfff04 	movi	r2,-4
 1002168:	80c00117 	ldw	r3,4(r16)
 100216c:	802d883a 	mov	r22,r16
 1002170:	18aa703a 	and	r21,r3,r2
 1002174:	ac401636 	bltu	r21,r17,10021d0 <_malloc_r+0x3b0>
 1002178:	ac49c83a 	sub	r4,r21,r17
 100217c:	008003c4 	movi	r2,15
 1002180:	1100130e 	bge	r2,r4,10021d0 <_malloc_r+0x3b0>
 1002184:	88800054 	ori	r2,r17,1
 1002188:	8447883a 	add	r3,r16,r17
 100218c:	80800115 	stw	r2,4(r16)
 1002190:	20800054 	ori	r2,r4,1
 1002194:	18800115 	stw	r2,4(r3)
 1002198:	e0c00215 	stw	r3,8(fp)
 100219c:	9009883a 	mov	r4,r18
 10021a0:	10041040 	call	1004104 <__malloc_unlock>
 10021a4:	80c00204 	addi	r3,r16,8
 10021a8:	003f3106 	br	1001e70 <_malloc_r+0x50>
 10021ac:	39c00117 	ldw	r7,4(r7)
 10021b0:	573ffe04 	addi	fp,r10,-8
 10021b4:	003fa006 	br	1002038 <_malloc_r+0x218>
 10021b8:	00801504 	movi	r2,84
 10021bc:	10c06736 	bltu	r2,r3,100235c <_malloc_r+0x53c>
 10021c0:	8804d33a 	srli	r2,r17,12
 10021c4:	11801b84 	addi	r6,r2,110
 10021c8:	300490fa 	slli	r2,r6,3
 10021cc:	003f4106 	br	1001ed4 <_malloc_r+0xb4>
 10021d0:	d0a71a17 	ldw	r2,-25496(gp)
 10021d4:	d0e00317 	ldw	r3,-32756(gp)
 10021d8:	053fffc4 	movi	r20,-1
 10021dc:	10800404 	addi	r2,r2,16
 10021e0:	88a7883a 	add	r19,r17,r2
 10021e4:	1d000326 	beq	r3,r20,10021f4 <_malloc_r+0x3d4>
 10021e8:	98c3ffc4 	addi	r3,r19,4095
 10021ec:	00bc0004 	movi	r2,-4096
 10021f0:	18a6703a 	and	r19,r3,r2
 10021f4:	9009883a 	mov	r4,r18
 10021f8:	980b883a 	mov	r5,r19
 10021fc:	100315c0 	call	100315c <_sbrk_r>
 1002200:	1009883a 	mov	r4,r2
 1002204:	15000426 	beq	r2,r20,1002218 <_malloc_r+0x3f8>
 1002208:	854b883a 	add	r5,r16,r21
 100220c:	1029883a 	mov	r20,r2
 1002210:	11405a2e 	bgeu	r2,r5,100237c <_malloc_r+0x55c>
 1002214:	87000c26 	beq	r16,fp,1002248 <_malloc_r+0x428>
 1002218:	e4000217 	ldw	r16,8(fp)
 100221c:	80c00117 	ldw	r3,4(r16)
 1002220:	00bfff04 	movi	r2,-4
 1002224:	1884703a 	and	r2,r3,r2
 1002228:	14400336 	bltu	r2,r17,1002238 <_malloc_r+0x418>
 100222c:	1449c83a 	sub	r4,r2,r17
 1002230:	008003c4 	movi	r2,15
 1002234:	113fd316 	blt	r2,r4,1002184 <_malloc_r+0x364>
 1002238:	9009883a 	mov	r4,r18
 100223c:	10041040 	call	1004104 <__malloc_unlock>
 1002240:	0007883a 	mov	r3,zero
 1002244:	003f0a06 	br	1001e70 <_malloc_r+0x50>
 1002248:	05c04074 	movhi	r23,257
 100224c:	bded0004 	addi	r23,r23,-19456
 1002250:	b8800017 	ldw	r2,0(r23)
 1002254:	988d883a 	add	r6,r19,r2
 1002258:	b9800015 	stw	r6,0(r23)
 100225c:	d0e00317 	ldw	r3,-32756(gp)
 1002260:	00bfffc4 	movi	r2,-1
 1002264:	18808e26 	beq	r3,r2,10024a0 <_malloc_r+0x680>
 1002268:	2145c83a 	sub	r2,r4,r5
 100226c:	3085883a 	add	r2,r6,r2
 1002270:	b8800015 	stw	r2,0(r23)
 1002274:	20c001cc 	andi	r3,r4,7
 1002278:	18005f1e 	bne	r3,zero,10023f8 <_malloc_r+0x5d8>
 100227c:	000b883a 	mov	r5,zero
 1002280:	a4c5883a 	add	r2,r20,r19
 1002284:	1083ffcc 	andi	r2,r2,4095
 1002288:	00c40004 	movi	r3,4096
 100228c:	1887c83a 	sub	r3,r3,r2
 1002290:	28e7883a 	add	r19,r5,r3
 1002294:	9009883a 	mov	r4,r18
 1002298:	980b883a 	mov	r5,r19
 100229c:	100315c0 	call	100315c <_sbrk_r>
 10022a0:	1007883a 	mov	r3,r2
 10022a4:	00bfffc4 	movi	r2,-1
 10022a8:	18807a26 	beq	r3,r2,1002494 <_malloc_r+0x674>
 10022ac:	1d05c83a 	sub	r2,r3,r20
 10022b0:	9885883a 	add	r2,r19,r2
 10022b4:	10c00054 	ori	r3,r2,1
 10022b8:	b8800017 	ldw	r2,0(r23)
 10022bc:	a021883a 	mov	r16,r20
 10022c0:	a0c00115 	stw	r3,4(r20)
 10022c4:	9885883a 	add	r2,r19,r2
 10022c8:	b8800015 	stw	r2,0(r23)
 10022cc:	e5000215 	stw	r20,8(fp)
 10022d0:	b7003626 	beq	r22,fp,10023ac <_malloc_r+0x58c>
 10022d4:	018003c4 	movi	r6,15
 10022d8:	35404b36 	bltu	r6,r21,1002408 <_malloc_r+0x5e8>
 10022dc:	00800044 	movi	r2,1
 10022e0:	a0800115 	stw	r2,4(r20)
 10022e4:	003fcd06 	br	100221c <_malloc_r+0x3fc>
 10022e8:	2808d27a 	srli	r4,r5,9
 10022ec:	2000371e 	bne	r4,zero,10023cc <_malloc_r+0x5ac>
 10022f0:	2808d0fa 	srli	r4,r5,3
 10022f4:	200690fa 	slli	r3,r4,3
 10022f8:	1ad1883a 	add	r8,r3,r11
 10022fc:	41800217 	ldw	r6,8(r8)
 1002300:	41805b26 	beq	r8,r6,1002470 <_malloc_r+0x650>
 1002304:	30800117 	ldw	r2,4(r6)
 1002308:	00ffff04 	movi	r3,-4
 100230c:	10c4703a 	and	r2,r2,r3
 1002310:	2880022e 	bgeu	r5,r2,100231c <_malloc_r+0x4fc>
 1002314:	31800217 	ldw	r6,8(r6)
 1002318:	41bffa1e 	bne	r8,r6,1002304 <_malloc_r+0x4e4>
 100231c:	32000317 	ldw	r8,12(r6)
 1002320:	39c00117 	ldw	r7,4(r7)
 1002324:	82000315 	stw	r8,12(r16)
 1002328:	81800215 	stw	r6,8(r16)
 100232c:	07004034 	movhi	fp,256
 1002330:	e71fe504 	addi	fp,fp,32660
 1002334:	34000315 	stw	r16,12(r6)
 1002338:	44000215 	stw	r16,8(r8)
 100233c:	003f3e06 	br	1002038 <_malloc_r+0x218>
 1002340:	63000044 	addi	r12,r12,1
 1002344:	608000cc 	andi	r2,r12,3
 1002348:	10005d26 	beq	r2,zero,10024c0 <_malloc_r+0x6a0>
 100234c:	18c00204 	addi	r3,r3,8
 1002350:	003f5106 	br	1002098 <_malloc_r+0x278>
 1002354:	8089883a 	add	r4,r16,r2
 1002358:	003f6d06 	br	1002110 <_malloc_r+0x2f0>
 100235c:	00805504 	movi	r2,340
 1002360:	10c02036 	bltu	r2,r3,10023e4 <_malloc_r+0x5c4>
 1002364:	8804d3fa 	srli	r2,r17,15
 1002368:	11801dc4 	addi	r6,r2,119
 100236c:	300490fa 	slli	r2,r6,3
 1002370:	003ed806 	br	1001ed4 <_malloc_r+0xb4>
 1002374:	48c000c4 	addi	r3,r9,3
 1002378:	003f3106 	br	1002040 <_malloc_r+0x220>
 100237c:	05c04074 	movhi	r23,257
 1002380:	bded0004 	addi	r23,r23,-19456
 1002384:	b8800017 	ldw	r2,0(r23)
 1002388:	988d883a 	add	r6,r19,r2
 100238c:	b9800015 	stw	r6,0(r23)
 1002390:	293fb21e 	bne	r5,r4,100225c <_malloc_r+0x43c>
 1002394:	2083ffcc 	andi	r2,r4,4095
 1002398:	103fb01e 	bne	r2,zero,100225c <_malloc_r+0x43c>
 100239c:	e4000217 	ldw	r16,8(fp)
 10023a0:	9d45883a 	add	r2,r19,r21
 10023a4:	10800054 	ori	r2,r2,1
 10023a8:	80800115 	stw	r2,4(r16)
 10023ac:	b8c00017 	ldw	r3,0(r23)
 10023b0:	d0a71b17 	ldw	r2,-25492(gp)
 10023b4:	10c0012e 	bgeu	r2,r3,10023bc <_malloc_r+0x59c>
 10023b8:	d0e71b15 	stw	r3,-25492(gp)
 10023bc:	d0a71c17 	ldw	r2,-25488(gp)
 10023c0:	10ff962e 	bgeu	r2,r3,100221c <_malloc_r+0x3fc>
 10023c4:	d0e71c15 	stw	r3,-25488(gp)
 10023c8:	003f9406 	br	100221c <_malloc_r+0x3fc>
 10023cc:	00800104 	movi	r2,4
 10023d0:	11001e36 	bltu	r2,r4,100244c <_malloc_r+0x62c>
 10023d4:	2804d1ba 	srli	r2,r5,6
 10023d8:	11000e04 	addi	r4,r2,56
 10023dc:	200690fa 	slli	r3,r4,3
 10023e0:	003fc506 	br	10022f8 <_malloc_r+0x4d8>
 10023e4:	00815504 	movi	r2,1364
 10023e8:	10c01d2e 	bgeu	r2,r3,1002460 <_malloc_r+0x640>
 10023ec:	01801f84 	movi	r6,126
 10023f0:	0080fc04 	movi	r2,1008
 10023f4:	003eb706 	br	1001ed4 <_malloc_r+0xb4>
 10023f8:	00800204 	movi	r2,8
 10023fc:	10cbc83a 	sub	r5,r2,r3
 1002400:	2169883a 	add	r20,r4,r5
 1002404:	003f9e06 	br	1002280 <_malloc_r+0x460>
 1002408:	00bffe04 	movi	r2,-8
 100240c:	a93ffd04 	addi	r4,r21,-12
 1002410:	2088703a 	and	r4,r4,r2
 1002414:	b10b883a 	add	r5,r22,r4
 1002418:	00c00144 	movi	r3,5
 100241c:	28c00215 	stw	r3,8(r5)
 1002420:	28c00115 	stw	r3,4(r5)
 1002424:	b0800117 	ldw	r2,4(r22)
 1002428:	1080004c 	andi	r2,r2,1
 100242c:	2084b03a 	or	r2,r4,r2
 1002430:	b0800115 	stw	r2,4(r22)
 1002434:	313fdd2e 	bgeu	r6,r4,10023ac <_malloc_r+0x58c>
 1002438:	b1400204 	addi	r5,r22,8
 100243c:	9009883a 	mov	r4,r18
 1002440:	1000d740 	call	1000d74 <_free_r>
 1002444:	e4000217 	ldw	r16,8(fp)
 1002448:	003fd806 	br	10023ac <_malloc_r+0x58c>
 100244c:	00800504 	movi	r2,20
 1002450:	11001536 	bltu	r2,r4,10024a8 <_malloc_r+0x688>
 1002454:	210016c4 	addi	r4,r4,91
 1002458:	200690fa 	slli	r3,r4,3
 100245c:	003fa606 	br	10022f8 <_malloc_r+0x4d8>
 1002460:	8804d4ba 	srli	r2,r17,18
 1002464:	11801f04 	addi	r6,r2,124
 1002468:	300490fa 	slli	r2,r6,3
 100246c:	003e9906 	br	1001ed4 <_malloc_r+0xb4>
 1002470:	2009d0ba 	srai	r4,r4,2
 1002474:	01404034 	movhi	r5,256
 1002478:	295fe504 	addi	r5,r5,32660
 100247c:	00c00044 	movi	r3,1
 1002480:	28800117 	ldw	r2,4(r5)
 1002484:	1906983a 	sll	r3,r3,r4
 1002488:	10c4b03a 	or	r2,r2,r3
 100248c:	28800115 	stw	r2,4(r5)
 1002490:	003fa306 	br	1002320 <_malloc_r+0x500>
 1002494:	0027883a 	mov	r19,zero
 1002498:	00c00044 	movi	r3,1
 100249c:	003f8606 	br	10022b8 <_malloc_r+0x498>
 10024a0:	d1200315 	stw	r4,-32756(gp)
 10024a4:	003f7306 	br	1002274 <_malloc_r+0x454>
 10024a8:	00801504 	movi	r2,84
 10024ac:	11001936 	bltu	r2,r4,1002514 <_malloc_r+0x6f4>
 10024b0:	2804d33a 	srli	r2,r5,12
 10024b4:	11001b84 	addi	r4,r2,110
 10024b8:	200690fa 	slli	r3,r4,3
 10024bc:	003f8e06 	br	10022f8 <_malloc_r+0x4d8>
 10024c0:	480b883a 	mov	r5,r9
 10024c4:	6807883a 	mov	r3,r13
 10024c8:	288000cc 	andi	r2,r5,3
 10024cc:	18fffe04 	addi	r3,r3,-8
 10024d0:	297fffc4 	addi	r5,r5,-1
 10024d4:	10001526 	beq	r2,zero,100252c <_malloc_r+0x70c>
 10024d8:	18800217 	ldw	r2,8(r3)
 10024dc:	10fffa26 	beq	r2,r3,10024c8 <_malloc_r+0x6a8>
 10024e0:	2109883a 	add	r4,r4,r4
 10024e4:	393f1e36 	bltu	r7,r4,1002160 <_malloc_r+0x340>
 10024e8:	203f1d26 	beq	r4,zero,1002160 <_malloc_r+0x340>
 10024ec:	21c4703a 	and	r2,r4,r7
 10024f0:	10000226 	beq	r2,zero,10024fc <_malloc_r+0x6dc>
 10024f4:	6013883a 	mov	r9,r12
 10024f8:	003ee106 	br	1002080 <_malloc_r+0x260>
 10024fc:	2109883a 	add	r4,r4,r4
 1002500:	3904703a 	and	r2,r7,r4
 1002504:	63000104 	addi	r12,r12,4
 1002508:	103ffc26 	beq	r2,zero,10024fc <_malloc_r+0x6dc>
 100250c:	6013883a 	mov	r9,r12
 1002510:	003edb06 	br	1002080 <_malloc_r+0x260>
 1002514:	00805504 	movi	r2,340
 1002518:	11000836 	bltu	r2,r4,100253c <_malloc_r+0x71c>
 100251c:	2804d3fa 	srli	r2,r5,15
 1002520:	11001dc4 	addi	r4,r2,119
 1002524:	200690fa 	slli	r3,r4,3
 1002528:	003f7306 	br	10022f8 <_malloc_r+0x4d8>
 100252c:	0104303a 	nor	r2,zero,r4
 1002530:	388e703a 	and	r7,r7,r2
 1002534:	e1c00115 	stw	r7,4(fp)
 1002538:	003fe906 	br	10024e0 <_malloc_r+0x6c0>
 100253c:	00815504 	movi	r2,1364
 1002540:	1100032e 	bgeu	r2,r4,1002550 <_malloc_r+0x730>
 1002544:	01001f84 	movi	r4,126
 1002548:	00c0fc04 	movi	r3,1008
 100254c:	003f6a06 	br	10022f8 <_malloc_r+0x4d8>
 1002550:	2804d4ba 	srli	r2,r5,18
 1002554:	11001f04 	addi	r4,r2,124
 1002558:	200690fa 	slli	r3,r4,3
 100255c:	003f6606 	br	10022f8 <_malloc_r+0x4d8>

01002560 <memchr>:
 1002560:	008000c4 	movi	r2,3
 1002564:	29403fcc 	andi	r5,r5,255
 1002568:	2007883a 	mov	r3,r4
 100256c:	1180022e 	bgeu	r2,r6,1002578 <memchr+0x18>
 1002570:	2084703a 	and	r2,r4,r2
 1002574:	10000b26 	beq	r2,zero,10025a4 <memchr+0x44>
 1002578:	313fffc4 	addi	r4,r6,-1
 100257c:	3000051e 	bne	r6,zero,1002594 <memchr+0x34>
 1002580:	00002c06 	br	1002634 <memchr+0xd4>
 1002584:	213fffc4 	addi	r4,r4,-1
 1002588:	00bfffc4 	movi	r2,-1
 100258c:	18c00044 	addi	r3,r3,1
 1002590:	20802826 	beq	r4,r2,1002634 <memchr+0xd4>
 1002594:	18800003 	ldbu	r2,0(r3)
 1002598:	28bffa1e 	bne	r5,r2,1002584 <memchr+0x24>
 100259c:	1805883a 	mov	r2,r3
 10025a0:	f800283a 	ret
 10025a4:	0011883a 	mov	r8,zero
 10025a8:	0007883a 	mov	r3,zero
 10025ac:	01c00104 	movi	r7,4
 10025b0:	4004923a 	slli	r2,r8,8
 10025b4:	18c00044 	addi	r3,r3,1
 10025b8:	1151883a 	add	r8,r2,r5
 10025bc:	19fffc1e 	bne	r3,r7,10025b0 <memchr+0x50>
 10025c0:	02bfbff4 	movhi	r10,65279
 10025c4:	52bfbfc4 	addi	r10,r10,-257
 10025c8:	02602074 	movhi	r9,32897
 10025cc:	4a602004 	addi	r9,r9,-32640
 10025d0:	02c000c4 	movi	r11,3
 10025d4:	20800017 	ldw	r2,0(r4)
 10025d8:	31bfff04 	addi	r6,r6,-4
 10025dc:	200f883a 	mov	r7,r4
 10025e0:	1204f03a 	xor	r2,r2,r8
 10025e4:	1287883a 	add	r3,r2,r10
 10025e8:	1a46703a 	and	r3,r3,r9
 10025ec:	0084303a 	nor	r2,zero,r2
 10025f0:	10c4703a 	and	r2,r2,r3
 10025f4:	10000b26 	beq	r2,zero,1002624 <memchr+0xc4>
 10025f8:	20800003 	ldbu	r2,0(r4)
 10025fc:	28800f26 	beq	r5,r2,100263c <memchr+0xdc>
 1002600:	20800043 	ldbu	r2,1(r4)
 1002604:	21c00044 	addi	r7,r4,1
 1002608:	28800c26 	beq	r5,r2,100263c <memchr+0xdc>
 100260c:	20800083 	ldbu	r2,2(r4)
 1002610:	21c00084 	addi	r7,r4,2
 1002614:	28800926 	beq	r5,r2,100263c <memchr+0xdc>
 1002618:	208000c3 	ldbu	r2,3(r4)
 100261c:	21c000c4 	addi	r7,r4,3
 1002620:	28800626 	beq	r5,r2,100263c <memchr+0xdc>
 1002624:	21000104 	addi	r4,r4,4
 1002628:	59bfea36 	bltu	r11,r6,10025d4 <memchr+0x74>
 100262c:	2007883a 	mov	r3,r4
 1002630:	003fd106 	br	1002578 <memchr+0x18>
 1002634:	0005883a 	mov	r2,zero
 1002638:	f800283a 	ret
 100263c:	3805883a 	mov	r2,r7
 1002640:	f800283a 	ret

01002644 <memcpy>:
 1002644:	01c003c4 	movi	r7,15
 1002648:	2007883a 	mov	r3,r4
 100264c:	3980032e 	bgeu	r7,r6,100265c <memcpy+0x18>
 1002650:	2904b03a 	or	r2,r5,r4
 1002654:	108000cc 	andi	r2,r2,3
 1002658:	10000926 	beq	r2,zero,1002680 <memcpy+0x3c>
 100265c:	30000626 	beq	r6,zero,1002678 <memcpy+0x34>
 1002660:	30cd883a 	add	r6,r6,r3
 1002664:	28800003 	ldbu	r2,0(r5)
 1002668:	29400044 	addi	r5,r5,1
 100266c:	18800005 	stb	r2,0(r3)
 1002670:	18c00044 	addi	r3,r3,1
 1002674:	30fffb1e 	bne	r6,r3,1002664 <memcpy+0x20>
 1002678:	2005883a 	mov	r2,r4
 100267c:	f800283a 	ret
 1002680:	3811883a 	mov	r8,r7
 1002684:	200f883a 	mov	r7,r4
 1002688:	28c00017 	ldw	r3,0(r5)
 100268c:	31bffc04 	addi	r6,r6,-16
 1002690:	38c00015 	stw	r3,0(r7)
 1002694:	28800117 	ldw	r2,4(r5)
 1002698:	38800115 	stw	r2,4(r7)
 100269c:	28c00217 	ldw	r3,8(r5)
 10026a0:	38c00215 	stw	r3,8(r7)
 10026a4:	28800317 	ldw	r2,12(r5)
 10026a8:	29400404 	addi	r5,r5,16
 10026ac:	38800315 	stw	r2,12(r7)
 10026b0:	39c00404 	addi	r7,r7,16
 10026b4:	41bff436 	bltu	r8,r6,1002688 <memcpy+0x44>
 10026b8:	008000c4 	movi	r2,3
 10026bc:	1180072e 	bgeu	r2,r6,10026dc <memcpy+0x98>
 10026c0:	1007883a 	mov	r3,r2
 10026c4:	28800017 	ldw	r2,0(r5)
 10026c8:	31bfff04 	addi	r6,r6,-4
 10026cc:	29400104 	addi	r5,r5,4
 10026d0:	38800015 	stw	r2,0(r7)
 10026d4:	39c00104 	addi	r7,r7,4
 10026d8:	19bffa36 	bltu	r3,r6,10026c4 <memcpy+0x80>
 10026dc:	3807883a 	mov	r3,r7
 10026e0:	003fde06 	br	100265c <memcpy+0x18>

010026e4 <memmove>:
 10026e4:	2807883a 	mov	r3,r5
 10026e8:	2011883a 	mov	r8,r4
 10026ec:	29000c2e 	bgeu	r5,r4,1002720 <memmove+0x3c>
 10026f0:	298f883a 	add	r7,r5,r6
 10026f4:	21c00a2e 	bgeu	r4,r7,1002720 <memmove+0x3c>
 10026f8:	30000726 	beq	r6,zero,1002718 <memmove+0x34>
 10026fc:	2187883a 	add	r3,r4,r6
 1002700:	198dc83a 	sub	r6,r3,r6
 1002704:	39ffffc4 	addi	r7,r7,-1
 1002708:	38800003 	ldbu	r2,0(r7)
 100270c:	18ffffc4 	addi	r3,r3,-1
 1002710:	18800005 	stb	r2,0(r3)
 1002714:	19bffb1e 	bne	r3,r6,1002704 <memmove+0x20>
 1002718:	2005883a 	mov	r2,r4
 100271c:	f800283a 	ret
 1002720:	01c003c4 	movi	r7,15
 1002724:	39800a36 	bltu	r7,r6,1002750 <memmove+0x6c>
 1002728:	303ffb26 	beq	r6,zero,1002718 <memmove+0x34>
 100272c:	400f883a 	mov	r7,r8
 1002730:	320d883a 	add	r6,r6,r8
 1002734:	28800003 	ldbu	r2,0(r5)
 1002738:	29400044 	addi	r5,r5,1
 100273c:	38800005 	stb	r2,0(r7)
 1002740:	39c00044 	addi	r7,r7,1
 1002744:	39bffb1e 	bne	r7,r6,1002734 <memmove+0x50>
 1002748:	2005883a 	mov	r2,r4
 100274c:	f800283a 	ret
 1002750:	1904b03a 	or	r2,r3,r4
 1002754:	108000cc 	andi	r2,r2,3
 1002758:	103ff31e 	bne	r2,zero,1002728 <memmove+0x44>
 100275c:	3811883a 	mov	r8,r7
 1002760:	180b883a 	mov	r5,r3
 1002764:	200f883a 	mov	r7,r4
 1002768:	28c00017 	ldw	r3,0(r5)
 100276c:	31bffc04 	addi	r6,r6,-16
 1002770:	38c00015 	stw	r3,0(r7)
 1002774:	28800117 	ldw	r2,4(r5)
 1002778:	38800115 	stw	r2,4(r7)
 100277c:	28c00217 	ldw	r3,8(r5)
 1002780:	38c00215 	stw	r3,8(r7)
 1002784:	28800317 	ldw	r2,12(r5)
 1002788:	29400404 	addi	r5,r5,16
 100278c:	38800315 	stw	r2,12(r7)
 1002790:	39c00404 	addi	r7,r7,16
 1002794:	41bff436 	bltu	r8,r6,1002768 <memmove+0x84>
 1002798:	008000c4 	movi	r2,3
 100279c:	1180072e 	bgeu	r2,r6,10027bc <memmove+0xd8>
 10027a0:	1007883a 	mov	r3,r2
 10027a4:	28800017 	ldw	r2,0(r5)
 10027a8:	31bfff04 	addi	r6,r6,-4
 10027ac:	29400104 	addi	r5,r5,4
 10027b0:	38800015 	stw	r2,0(r7)
 10027b4:	39c00104 	addi	r7,r7,4
 10027b8:	19bffa36 	bltu	r3,r6,10027a4 <memmove+0xc0>
 10027bc:	3811883a 	mov	r8,r7
 10027c0:	003fd906 	br	1002728 <memmove+0x44>

010027c4 <memset>:
 10027c4:	008000c4 	movi	r2,3
 10027c8:	29403fcc 	andi	r5,r5,255
 10027cc:	2007883a 	mov	r3,r4
 10027d0:	1180022e 	bgeu	r2,r6,10027dc <memset+0x18>
 10027d4:	2084703a 	and	r2,r4,r2
 10027d8:	10000826 	beq	r2,zero,10027fc <memset+0x38>
 10027dc:	30000526 	beq	r6,zero,10027f4 <memset+0x30>
 10027e0:	2805883a 	mov	r2,r5
 10027e4:	30cd883a 	add	r6,r6,r3
 10027e8:	18800005 	stb	r2,0(r3)
 10027ec:	18c00044 	addi	r3,r3,1
 10027f0:	19bffd1e 	bne	r3,r6,10027e8 <memset+0x24>
 10027f4:	2005883a 	mov	r2,r4
 10027f8:	f800283a 	ret
 10027fc:	2804923a 	slli	r2,r5,8
 1002800:	020003c4 	movi	r8,15
 1002804:	200f883a 	mov	r7,r4
 1002808:	2884b03a 	or	r2,r5,r2
 100280c:	1006943a 	slli	r3,r2,16
 1002810:	10c6b03a 	or	r3,r2,r3
 1002814:	41800a2e 	bgeu	r8,r6,1002840 <memset+0x7c>
 1002818:	4005883a 	mov	r2,r8
 100281c:	31bffc04 	addi	r6,r6,-16
 1002820:	38c00015 	stw	r3,0(r7)
 1002824:	38c00115 	stw	r3,4(r7)
 1002828:	38c00215 	stw	r3,8(r7)
 100282c:	38c00315 	stw	r3,12(r7)
 1002830:	39c00404 	addi	r7,r7,16
 1002834:	11bff936 	bltu	r2,r6,100281c <memset+0x58>
 1002838:	008000c4 	movi	r2,3
 100283c:	1180052e 	bgeu	r2,r6,1002854 <memset+0x90>
 1002840:	31bfff04 	addi	r6,r6,-4
 1002844:	008000c4 	movi	r2,3
 1002848:	38c00015 	stw	r3,0(r7)
 100284c:	39c00104 	addi	r7,r7,4
 1002850:	11bffb36 	bltu	r2,r6,1002840 <memset+0x7c>
 1002854:	3807883a 	mov	r3,r7
 1002858:	003fe006 	br	10027dc <memset+0x18>

0100285c <_open_r>:
 100285c:	defffd04 	addi	sp,sp,-12
 1002860:	dc000015 	stw	r16,0(sp)
 1002864:	04004074 	movhi	r16,257
 1002868:	842cf604 	addi	r16,r16,-19496
 100286c:	dc400115 	stw	r17,4(sp)
 1002870:	80000015 	stw	zero,0(r16)
 1002874:	2023883a 	mov	r17,r4
 1002878:	2809883a 	mov	r4,r5
 100287c:	300b883a 	mov	r5,r6
 1002880:	380d883a 	mov	r6,r7
 1002884:	dfc00215 	stw	ra,8(sp)
 1002888:	100421c0 	call	100421c <open>
 100288c:	1007883a 	mov	r3,r2
 1002890:	00bfffc4 	movi	r2,-1
 1002894:	18800626 	beq	r3,r2,10028b0 <_open_r+0x54>
 1002898:	1805883a 	mov	r2,r3
 100289c:	dfc00217 	ldw	ra,8(sp)
 10028a0:	dc400117 	ldw	r17,4(sp)
 10028a4:	dc000017 	ldw	r16,0(sp)
 10028a8:	dec00304 	addi	sp,sp,12
 10028ac:	f800283a 	ret
 10028b0:	80800017 	ldw	r2,0(r16)
 10028b4:	103ff826 	beq	r2,zero,1002898 <_open_r+0x3c>
 10028b8:	88800015 	stw	r2,0(r17)
 10028bc:	1805883a 	mov	r2,r3
 10028c0:	dfc00217 	ldw	ra,8(sp)
 10028c4:	dc400117 	ldw	r17,4(sp)
 10028c8:	dc000017 	ldw	r16,0(sp)
 10028cc:	dec00304 	addi	sp,sp,12
 10028d0:	f800283a 	ret

010028d4 <_puts_r>:
 10028d4:	defff604 	addi	sp,sp,-40
 10028d8:	dc400715 	stw	r17,28(sp)
 10028dc:	2023883a 	mov	r17,r4
 10028e0:	2809883a 	mov	r4,r5
 10028e4:	dfc00915 	stw	ra,36(sp)
 10028e8:	dcc00815 	stw	r19,32(sp)
 10028ec:	2827883a 	mov	r19,r5
 10028f0:	10034340 	call	1003434 <strlen>
 10028f4:	89400217 	ldw	r5,8(r17)
 10028f8:	00c04034 	movhi	r3,256
 10028fc:	18de1e04 	addi	r3,r3,30840
 1002900:	01c00044 	movi	r7,1
 1002904:	12000044 	addi	r8,r2,1
 1002908:	d8c00515 	stw	r3,20(sp)
 100290c:	d9c00615 	stw	r7,24(sp)
 1002910:	d8c00304 	addi	r3,sp,12
 1002914:	01c00084 	movi	r7,2
 1002918:	8809883a 	mov	r4,r17
 100291c:	d80d883a 	mov	r6,sp
 1002920:	d8c00015 	stw	r3,0(sp)
 1002924:	dcc00315 	stw	r19,12(sp)
 1002928:	da000215 	stw	r8,8(sp)
 100292c:	d9c00115 	stw	r7,4(sp)
 1002930:	d8800415 	stw	r2,16(sp)
 1002934:	100155c0 	call	100155c <__sfvwrite_r>
 1002938:	00ffffc4 	movi	r3,-1
 100293c:	10000626 	beq	r2,zero,1002958 <_puts_r+0x84>
 1002940:	1805883a 	mov	r2,r3
 1002944:	dfc00917 	ldw	ra,36(sp)
 1002948:	dcc00817 	ldw	r19,32(sp)
 100294c:	dc400717 	ldw	r17,28(sp)
 1002950:	dec00a04 	addi	sp,sp,40
 1002954:	f800283a 	ret
 1002958:	00c00284 	movi	r3,10
 100295c:	1805883a 	mov	r2,r3
 1002960:	dfc00917 	ldw	ra,36(sp)
 1002964:	dcc00817 	ldw	r19,32(sp)
 1002968:	dc400717 	ldw	r17,28(sp)
 100296c:	dec00a04 	addi	sp,sp,40
 1002970:	f800283a 	ret

01002974 <puts>:
 1002974:	00804074 	movhi	r2,257
 1002978:	10a5dd04 	addi	r2,r2,-26764
 100297c:	200b883a 	mov	r5,r4
 1002980:	11000017 	ldw	r4,0(r2)
 1002984:	10028d41 	jmpi	10028d4 <_puts_r>

01002988 <_realloc_r>:
 1002988:	defff404 	addi	sp,sp,-48
 100298c:	dd800815 	stw	r22,32(sp)
 1002990:	dc800415 	stw	r18,16(sp)
 1002994:	dc400315 	stw	r17,12(sp)
 1002998:	dfc00b15 	stw	ra,44(sp)
 100299c:	df000a15 	stw	fp,40(sp)
 10029a0:	ddc00915 	stw	r23,36(sp)
 10029a4:	dd400715 	stw	r21,28(sp)
 10029a8:	dd000615 	stw	r20,24(sp)
 10029ac:	dcc00515 	stw	r19,20(sp)
 10029b0:	dc000215 	stw	r16,8(sp)
 10029b4:	2825883a 	mov	r18,r5
 10029b8:	3023883a 	mov	r17,r6
 10029bc:	202d883a 	mov	r22,r4
 10029c0:	2800c926 	beq	r5,zero,1002ce8 <_realloc_r+0x360>
 10029c4:	10040e40 	call	10040e4 <__malloc_lock>
 10029c8:	943ffe04 	addi	r16,r18,-8
 10029cc:	88c002c4 	addi	r3,r17,11
 10029d0:	00800584 	movi	r2,22
 10029d4:	82000117 	ldw	r8,4(r16)
 10029d8:	10c01b2e 	bgeu	r2,r3,1002a48 <_realloc_r+0xc0>
 10029dc:	00bffe04 	movi	r2,-8
 10029e0:	188e703a 	and	r7,r3,r2
 10029e4:	3839883a 	mov	fp,r7
 10029e8:	38001a16 	blt	r7,zero,1002a54 <_realloc_r+0xcc>
 10029ec:	e4401936 	bltu	fp,r17,1002a54 <_realloc_r+0xcc>
 10029f0:	013fff04 	movi	r4,-4
 10029f4:	4126703a 	and	r19,r8,r4
 10029f8:	99c02616 	blt	r19,r7,1002a94 <_realloc_r+0x10c>
 10029fc:	802b883a 	mov	r21,r16
 1002a00:	9829883a 	mov	r20,r19
 1002a04:	84000204 	addi	r16,r16,8
 1002a08:	a80f883a 	mov	r7,r21
 1002a0c:	a70dc83a 	sub	r6,r20,fp
 1002a10:	008003c4 	movi	r2,15
 1002a14:	1180c136 	bltu	r2,r6,1002d1c <_realloc_r+0x394>
 1002a18:	38800117 	ldw	r2,4(r7)
 1002a1c:	a549883a 	add	r4,r20,r21
 1002a20:	1080004c 	andi	r2,r2,1
 1002a24:	a084b03a 	or	r2,r20,r2
 1002a28:	38800115 	stw	r2,4(r7)
 1002a2c:	20c00117 	ldw	r3,4(r4)
 1002a30:	18c00054 	ori	r3,r3,1
 1002a34:	20c00115 	stw	r3,4(r4)
 1002a38:	b009883a 	mov	r4,r22
 1002a3c:	10041040 	call	1004104 <__malloc_unlock>
 1002a40:	8023883a 	mov	r17,r16
 1002a44:	00000606 	br	1002a60 <_realloc_r+0xd8>
 1002a48:	01c00404 	movi	r7,16
 1002a4c:	3839883a 	mov	fp,r7
 1002a50:	e47fe72e 	bgeu	fp,r17,10029f0 <_realloc_r+0x68>
 1002a54:	00800304 	movi	r2,12
 1002a58:	0023883a 	mov	r17,zero
 1002a5c:	b0800015 	stw	r2,0(r22)
 1002a60:	8805883a 	mov	r2,r17
 1002a64:	dfc00b17 	ldw	ra,44(sp)
 1002a68:	df000a17 	ldw	fp,40(sp)
 1002a6c:	ddc00917 	ldw	r23,36(sp)
 1002a70:	dd800817 	ldw	r22,32(sp)
 1002a74:	dd400717 	ldw	r21,28(sp)
 1002a78:	dd000617 	ldw	r20,24(sp)
 1002a7c:	dcc00517 	ldw	r19,20(sp)
 1002a80:	dc800417 	ldw	r18,16(sp)
 1002a84:	dc400317 	ldw	r17,12(sp)
 1002a88:	dc000217 	ldw	r16,8(sp)
 1002a8c:	dec00c04 	addi	sp,sp,48
 1002a90:	f800283a 	ret
 1002a94:	00804034 	movhi	r2,256
 1002a98:	109fe504 	addi	r2,r2,32660
 1002a9c:	12400217 	ldw	r9,8(r2)
 1002aa0:	84cd883a 	add	r6,r16,r19
 1002aa4:	802b883a 	mov	r21,r16
 1002aa8:	3240b926 	beq	r6,r9,1002d90 <_realloc_r+0x408>
 1002aac:	31400117 	ldw	r5,4(r6)
 1002ab0:	00bfff84 	movi	r2,-2
 1002ab4:	2884703a 	and	r2,r5,r2
 1002ab8:	1185883a 	add	r2,r2,r6
 1002abc:	10c00117 	ldw	r3,4(r2)
 1002ac0:	18c0004c 	andi	r3,r3,1
 1002ac4:	1807003a 	cmpeq	r3,r3,zero
 1002ac8:	1800a326 	beq	r3,zero,1002d58 <_realloc_r+0x3d0>
 1002acc:	2908703a 	and	r4,r5,r4
 1002ad0:	9929883a 	add	r20,r19,r4
 1002ad4:	a1c0a30e 	bge	r20,r7,1002d64 <_realloc_r+0x3dc>
 1002ad8:	4080004c 	andi	r2,r8,1
 1002adc:	1000551e 	bne	r2,zero,1002c34 <_realloc_r+0x2ac>
 1002ae0:	80800017 	ldw	r2,0(r16)
 1002ae4:	80afc83a 	sub	r23,r16,r2
 1002ae8:	b8c00117 	ldw	r3,4(r23)
 1002aec:	00bfff04 	movi	r2,-4
 1002af0:	1884703a 	and	r2,r3,r2
 1002af4:	30002e26 	beq	r6,zero,1002bb0 <_realloc_r+0x228>
 1002af8:	3240b926 	beq	r6,r9,1002de0 <_realloc_r+0x458>
 1002afc:	98a9883a 	add	r20,r19,r2
 1002b00:	2509883a 	add	r4,r4,r20
 1002b04:	d9000015 	stw	r4,0(sp)
 1002b08:	21c02a16 	blt	r4,r7,1002bb4 <_realloc_r+0x22c>
 1002b0c:	30800317 	ldw	r2,12(r6)
 1002b10:	30c00217 	ldw	r3,8(r6)
 1002b14:	01400904 	movi	r5,36
 1002b18:	99bfff04 	addi	r6,r19,-4
 1002b1c:	18800315 	stw	r2,12(r3)
 1002b20:	10c00215 	stw	r3,8(r2)
 1002b24:	b9000317 	ldw	r4,12(r23)
 1002b28:	b8800217 	ldw	r2,8(r23)
 1002b2c:	b82b883a 	mov	r21,r23
 1002b30:	bc000204 	addi	r16,r23,8
 1002b34:	20800215 	stw	r2,8(r4)
 1002b38:	11000315 	stw	r4,12(r2)
 1002b3c:	2980e436 	bltu	r5,r6,1002ed0 <_realloc_r+0x548>
 1002b40:	008004c4 	movi	r2,19
 1002b44:	9009883a 	mov	r4,r18
 1002b48:	8011883a 	mov	r8,r16
 1002b4c:	11800f2e 	bgeu	r2,r6,1002b8c <_realloc_r+0x204>
 1002b50:	90800017 	ldw	r2,0(r18)
 1002b54:	ba000404 	addi	r8,r23,16
 1002b58:	91000204 	addi	r4,r18,8
 1002b5c:	b8800215 	stw	r2,8(r23)
 1002b60:	90c00117 	ldw	r3,4(r18)
 1002b64:	008006c4 	movi	r2,27
 1002b68:	b8c00315 	stw	r3,12(r23)
 1002b6c:	1180072e 	bgeu	r2,r6,1002b8c <_realloc_r+0x204>
 1002b70:	90c00217 	ldw	r3,8(r18)
 1002b74:	ba000604 	addi	r8,r23,24
 1002b78:	91000404 	addi	r4,r18,16
 1002b7c:	b8c00415 	stw	r3,16(r23)
 1002b80:	90800317 	ldw	r2,12(r18)
 1002b84:	b8800515 	stw	r2,20(r23)
 1002b88:	3140e726 	beq	r6,r5,1002f28 <_realloc_r+0x5a0>
 1002b8c:	20800017 	ldw	r2,0(r4)
 1002b90:	dd000017 	ldw	r20,0(sp)
 1002b94:	b80f883a 	mov	r7,r23
 1002b98:	40800015 	stw	r2,0(r8)
 1002b9c:	20c00117 	ldw	r3,4(r4)
 1002ba0:	40c00115 	stw	r3,4(r8)
 1002ba4:	20800217 	ldw	r2,8(r4)
 1002ba8:	40800215 	stw	r2,8(r8)
 1002bac:	003f9706 	br	1002a0c <_realloc_r+0x84>
 1002bb0:	98a9883a 	add	r20,r19,r2
 1002bb4:	a1c01f16 	blt	r20,r7,1002c34 <_realloc_r+0x2ac>
 1002bb8:	b8c00317 	ldw	r3,12(r23)
 1002bbc:	b8800217 	ldw	r2,8(r23)
 1002bc0:	99bfff04 	addi	r6,r19,-4
 1002bc4:	01400904 	movi	r5,36
 1002bc8:	b82b883a 	mov	r21,r23
 1002bcc:	18800215 	stw	r2,8(r3)
 1002bd0:	10c00315 	stw	r3,12(r2)
 1002bd4:	bc000204 	addi	r16,r23,8
 1002bd8:	2980c336 	bltu	r5,r6,1002ee8 <_realloc_r+0x560>
 1002bdc:	008004c4 	movi	r2,19
 1002be0:	9009883a 	mov	r4,r18
 1002be4:	8011883a 	mov	r8,r16
 1002be8:	11800f2e 	bgeu	r2,r6,1002c28 <_realloc_r+0x2a0>
 1002bec:	90800017 	ldw	r2,0(r18)
 1002bf0:	ba000404 	addi	r8,r23,16
 1002bf4:	91000204 	addi	r4,r18,8
 1002bf8:	b8800215 	stw	r2,8(r23)
 1002bfc:	90c00117 	ldw	r3,4(r18)
 1002c00:	008006c4 	movi	r2,27
 1002c04:	b8c00315 	stw	r3,12(r23)
 1002c08:	1180072e 	bgeu	r2,r6,1002c28 <_realloc_r+0x2a0>
 1002c0c:	90c00217 	ldw	r3,8(r18)
 1002c10:	ba000604 	addi	r8,r23,24
 1002c14:	91000404 	addi	r4,r18,16
 1002c18:	b8c00415 	stw	r3,16(r23)
 1002c1c:	90800317 	ldw	r2,12(r18)
 1002c20:	b8800515 	stw	r2,20(r23)
 1002c24:	3140c726 	beq	r6,r5,1002f44 <_realloc_r+0x5bc>
 1002c28:	20800017 	ldw	r2,0(r4)
 1002c2c:	b80f883a 	mov	r7,r23
 1002c30:	003fd906 	br	1002b98 <_realloc_r+0x210>
 1002c34:	880b883a 	mov	r5,r17
 1002c38:	b009883a 	mov	r4,r22
 1002c3c:	1001e200 	call	1001e20 <_malloc_r>
 1002c40:	1023883a 	mov	r17,r2
 1002c44:	10002526 	beq	r2,zero,1002cdc <_realloc_r+0x354>
 1002c48:	80800117 	ldw	r2,4(r16)
 1002c4c:	00ffff84 	movi	r3,-2
 1002c50:	893ffe04 	addi	r4,r17,-8
 1002c54:	10c4703a 	and	r2,r2,r3
 1002c58:	8085883a 	add	r2,r16,r2
 1002c5c:	20809526 	beq	r4,r2,1002eb4 <_realloc_r+0x52c>
 1002c60:	99bfff04 	addi	r6,r19,-4
 1002c64:	01c00904 	movi	r7,36
 1002c68:	39804536 	bltu	r7,r6,1002d80 <_realloc_r+0x3f8>
 1002c6c:	008004c4 	movi	r2,19
 1002c70:	9009883a 	mov	r4,r18
 1002c74:	880b883a 	mov	r5,r17
 1002c78:	11800f2e 	bgeu	r2,r6,1002cb8 <_realloc_r+0x330>
 1002c7c:	90800017 	ldw	r2,0(r18)
 1002c80:	89400204 	addi	r5,r17,8
 1002c84:	91000204 	addi	r4,r18,8
 1002c88:	88800015 	stw	r2,0(r17)
 1002c8c:	90c00117 	ldw	r3,4(r18)
 1002c90:	008006c4 	movi	r2,27
 1002c94:	88c00115 	stw	r3,4(r17)
 1002c98:	1180072e 	bgeu	r2,r6,1002cb8 <_realloc_r+0x330>
 1002c9c:	90c00217 	ldw	r3,8(r18)
 1002ca0:	89400404 	addi	r5,r17,16
 1002ca4:	91000404 	addi	r4,r18,16
 1002ca8:	88c00215 	stw	r3,8(r17)
 1002cac:	90800317 	ldw	r2,12(r18)
 1002cb0:	88800315 	stw	r2,12(r17)
 1002cb4:	31c09126 	beq	r6,r7,1002efc <_realloc_r+0x574>
 1002cb8:	20800017 	ldw	r2,0(r4)
 1002cbc:	28800015 	stw	r2,0(r5)
 1002cc0:	20c00117 	ldw	r3,4(r4)
 1002cc4:	28c00115 	stw	r3,4(r5)
 1002cc8:	20800217 	ldw	r2,8(r4)
 1002ccc:	28800215 	stw	r2,8(r5)
 1002cd0:	900b883a 	mov	r5,r18
 1002cd4:	b009883a 	mov	r4,r22
 1002cd8:	1000d740 	call	1000d74 <_free_r>
 1002cdc:	b009883a 	mov	r4,r22
 1002ce0:	10041040 	call	1004104 <__malloc_unlock>
 1002ce4:	003f5e06 	br	1002a60 <_realloc_r+0xd8>
 1002ce8:	300b883a 	mov	r5,r6
 1002cec:	dfc00b17 	ldw	ra,44(sp)
 1002cf0:	df000a17 	ldw	fp,40(sp)
 1002cf4:	ddc00917 	ldw	r23,36(sp)
 1002cf8:	dd800817 	ldw	r22,32(sp)
 1002cfc:	dd400717 	ldw	r21,28(sp)
 1002d00:	dd000617 	ldw	r20,24(sp)
 1002d04:	dcc00517 	ldw	r19,20(sp)
 1002d08:	dc800417 	ldw	r18,16(sp)
 1002d0c:	dc400317 	ldw	r17,12(sp)
 1002d10:	dc000217 	ldw	r16,8(sp)
 1002d14:	dec00c04 	addi	sp,sp,48
 1002d18:	1001e201 	jmpi	1001e20 <_malloc_r>
 1002d1c:	38800117 	ldw	r2,4(r7)
 1002d20:	e54b883a 	add	r5,fp,r21
 1002d24:	31000054 	ori	r4,r6,1
 1002d28:	1080004c 	andi	r2,r2,1
 1002d2c:	1704b03a 	or	r2,r2,fp
 1002d30:	38800115 	stw	r2,4(r7)
 1002d34:	29000115 	stw	r4,4(r5)
 1002d38:	2987883a 	add	r3,r5,r6
 1002d3c:	18800117 	ldw	r2,4(r3)
 1002d40:	29400204 	addi	r5,r5,8
 1002d44:	b009883a 	mov	r4,r22
 1002d48:	10800054 	ori	r2,r2,1
 1002d4c:	18800115 	stw	r2,4(r3)
 1002d50:	1000d740 	call	1000d74 <_free_r>
 1002d54:	003f3806 	br	1002a38 <_realloc_r+0xb0>
 1002d58:	000d883a 	mov	r6,zero
 1002d5c:	0009883a 	mov	r4,zero
 1002d60:	003f5d06 	br	1002ad8 <_realloc_r+0x150>
 1002d64:	30c00217 	ldw	r3,8(r6)
 1002d68:	30800317 	ldw	r2,12(r6)
 1002d6c:	800f883a 	mov	r7,r16
 1002d70:	84000204 	addi	r16,r16,8
 1002d74:	10c00215 	stw	r3,8(r2)
 1002d78:	18800315 	stw	r2,12(r3)
 1002d7c:	003f2306 	br	1002a0c <_realloc_r+0x84>
 1002d80:	8809883a 	mov	r4,r17
 1002d84:	900b883a 	mov	r5,r18
 1002d88:	10026e40 	call	10026e4 <memmove>
 1002d8c:	003fd006 	br	1002cd0 <_realloc_r+0x348>
 1002d90:	30800117 	ldw	r2,4(r6)
 1002d94:	e0c00404 	addi	r3,fp,16
 1002d98:	1108703a 	and	r4,r2,r4
 1002d9c:	9905883a 	add	r2,r19,r4
 1002da0:	10ff4d16 	blt	r2,r3,1002ad8 <_realloc_r+0x150>
 1002da4:	1705c83a 	sub	r2,r2,fp
 1002da8:	870b883a 	add	r5,r16,fp
 1002dac:	10800054 	ori	r2,r2,1
 1002db0:	28800115 	stw	r2,4(r5)
 1002db4:	80c00117 	ldw	r3,4(r16)
 1002db8:	00804034 	movhi	r2,256
 1002dbc:	109fe504 	addi	r2,r2,32660
 1002dc0:	b009883a 	mov	r4,r22
 1002dc4:	18c0004c 	andi	r3,r3,1
 1002dc8:	e0c6b03a 	or	r3,fp,r3
 1002dcc:	11400215 	stw	r5,8(r2)
 1002dd0:	80c00115 	stw	r3,4(r16)
 1002dd4:	10041040 	call	1004104 <__malloc_unlock>
 1002dd8:	84400204 	addi	r17,r16,8
 1002ddc:	003f2006 	br	1002a60 <_realloc_r+0xd8>
 1002de0:	98a9883a 	add	r20,r19,r2
 1002de4:	2509883a 	add	r4,r4,r20
 1002de8:	e0800404 	addi	r2,fp,16
 1002dec:	d9000115 	stw	r4,4(sp)
 1002df0:	20bf7016 	blt	r4,r2,1002bb4 <_realloc_r+0x22c>
 1002df4:	b8c00317 	ldw	r3,12(r23)
 1002df8:	b8800217 	ldw	r2,8(r23)
 1002dfc:	99bfff04 	addi	r6,r19,-4
 1002e00:	01400904 	movi	r5,36
 1002e04:	18800215 	stw	r2,8(r3)
 1002e08:	10c00315 	stw	r3,12(r2)
 1002e0c:	bc400204 	addi	r17,r23,8
 1002e10:	29804136 	bltu	r5,r6,1002f18 <_realloc_r+0x590>
 1002e14:	008004c4 	movi	r2,19
 1002e18:	9009883a 	mov	r4,r18
 1002e1c:	880f883a 	mov	r7,r17
 1002e20:	11800f2e 	bgeu	r2,r6,1002e60 <_realloc_r+0x4d8>
 1002e24:	90800017 	ldw	r2,0(r18)
 1002e28:	b9c00404 	addi	r7,r23,16
 1002e2c:	91000204 	addi	r4,r18,8
 1002e30:	b8800215 	stw	r2,8(r23)
 1002e34:	90c00117 	ldw	r3,4(r18)
 1002e38:	008006c4 	movi	r2,27
 1002e3c:	b8c00315 	stw	r3,12(r23)
 1002e40:	1180072e 	bgeu	r2,r6,1002e60 <_realloc_r+0x4d8>
 1002e44:	90c00217 	ldw	r3,8(r18)
 1002e48:	b9c00604 	addi	r7,r23,24
 1002e4c:	91000404 	addi	r4,r18,16
 1002e50:	b8c00415 	stw	r3,16(r23)
 1002e54:	90800317 	ldw	r2,12(r18)
 1002e58:	b8800515 	stw	r2,20(r23)
 1002e5c:	31404026 	beq	r6,r5,1002f60 <_realloc_r+0x5d8>
 1002e60:	20800017 	ldw	r2,0(r4)
 1002e64:	38800015 	stw	r2,0(r7)
 1002e68:	20c00117 	ldw	r3,4(r4)
 1002e6c:	38c00115 	stw	r3,4(r7)
 1002e70:	20800217 	ldw	r2,8(r4)
 1002e74:	38800215 	stw	r2,8(r7)
 1002e78:	d8c00117 	ldw	r3,4(sp)
 1002e7c:	bf0b883a 	add	r5,r23,fp
 1002e80:	b009883a 	mov	r4,r22
 1002e84:	1f05c83a 	sub	r2,r3,fp
 1002e88:	10800054 	ori	r2,r2,1
 1002e8c:	28800115 	stw	r2,4(r5)
 1002e90:	b8c00117 	ldw	r3,4(r23)
 1002e94:	00804034 	movhi	r2,256
 1002e98:	109fe504 	addi	r2,r2,32660
 1002e9c:	11400215 	stw	r5,8(r2)
 1002ea0:	18c0004c 	andi	r3,r3,1
 1002ea4:	e0c6b03a 	or	r3,fp,r3
 1002ea8:	b8c00115 	stw	r3,4(r23)
 1002eac:	10041040 	call	1004104 <__malloc_unlock>
 1002eb0:	003eeb06 	br	1002a60 <_realloc_r+0xd8>
 1002eb4:	20800117 	ldw	r2,4(r4)
 1002eb8:	00ffff04 	movi	r3,-4
 1002ebc:	800f883a 	mov	r7,r16
 1002ec0:	10c4703a 	and	r2,r2,r3
 1002ec4:	98a9883a 	add	r20,r19,r2
 1002ec8:	84000204 	addi	r16,r16,8
 1002ecc:	003ecf06 	br	1002a0c <_realloc_r+0x84>
 1002ed0:	900b883a 	mov	r5,r18
 1002ed4:	8009883a 	mov	r4,r16
 1002ed8:	10026e40 	call	10026e4 <memmove>
 1002edc:	dd000017 	ldw	r20,0(sp)
 1002ee0:	b80f883a 	mov	r7,r23
 1002ee4:	003ec906 	br	1002a0c <_realloc_r+0x84>
 1002ee8:	900b883a 	mov	r5,r18
 1002eec:	8009883a 	mov	r4,r16
 1002ef0:	10026e40 	call	10026e4 <memmove>
 1002ef4:	b80f883a 	mov	r7,r23
 1002ef8:	003ec406 	br	1002a0c <_realloc_r+0x84>
 1002efc:	90c00417 	ldw	r3,16(r18)
 1002f00:	89400604 	addi	r5,r17,24
 1002f04:	91000604 	addi	r4,r18,24
 1002f08:	88c00415 	stw	r3,16(r17)
 1002f0c:	90800517 	ldw	r2,20(r18)
 1002f10:	88800515 	stw	r2,20(r17)
 1002f14:	003f6806 	br	1002cb8 <_realloc_r+0x330>
 1002f18:	900b883a 	mov	r5,r18
 1002f1c:	8809883a 	mov	r4,r17
 1002f20:	10026e40 	call	10026e4 <memmove>
 1002f24:	003fd406 	br	1002e78 <_realloc_r+0x4f0>
 1002f28:	90c00417 	ldw	r3,16(r18)
 1002f2c:	91000604 	addi	r4,r18,24
 1002f30:	ba000804 	addi	r8,r23,32
 1002f34:	b8c00615 	stw	r3,24(r23)
 1002f38:	90800517 	ldw	r2,20(r18)
 1002f3c:	b8800715 	stw	r2,28(r23)
 1002f40:	003f1206 	br	1002b8c <_realloc_r+0x204>
 1002f44:	90c00417 	ldw	r3,16(r18)
 1002f48:	91000604 	addi	r4,r18,24
 1002f4c:	ba000804 	addi	r8,r23,32
 1002f50:	b8c00615 	stw	r3,24(r23)
 1002f54:	90800517 	ldw	r2,20(r18)
 1002f58:	b8800715 	stw	r2,28(r23)
 1002f5c:	003f3206 	br	1002c28 <_realloc_r+0x2a0>
 1002f60:	90c00417 	ldw	r3,16(r18)
 1002f64:	91000604 	addi	r4,r18,24
 1002f68:	b9c00804 	addi	r7,r23,32
 1002f6c:	b8c00615 	stw	r3,24(r23)
 1002f70:	90800517 	ldw	r2,20(r18)
 1002f74:	b8800715 	stw	r2,28(r23)
 1002f78:	003fb906 	br	1002e60 <_realloc_r+0x4d8>

01002f7c <__srefill_r>:
 1002f7c:	defffd04 	addi	sp,sp,-12
 1002f80:	dc400115 	stw	r17,4(sp)
 1002f84:	dc000015 	stw	r16,0(sp)
 1002f88:	dfc00215 	stw	ra,8(sp)
 1002f8c:	2023883a 	mov	r17,r4
 1002f90:	2821883a 	mov	r16,r5
 1002f94:	20000226 	beq	r4,zero,1002fa0 <__srefill_r+0x24>
 1002f98:	20800e17 	ldw	r2,56(r4)
 1002f9c:	10004126 	beq	r2,zero,10030a4 <__srefill_r+0x128>
 1002fa0:	80c0030b 	ldhu	r3,12(r16)
 1002fa4:	80000115 	stw	zero,4(r16)
 1002fa8:	1880080c 	andi	r2,r3,32
 1002fac:	1000361e 	bne	r2,zero,1003088 <__srefill_r+0x10c>
 1002fb0:	1880010c 	andi	r2,r3,4
 1002fb4:	1000211e 	bne	r2,zero,100303c <__srefill_r+0xc0>
 1002fb8:	1880040c 	andi	r2,r3,16
 1002fbc:	10005026 	beq	r2,zero,1003100 <__srefill_r+0x184>
 1002fc0:	1880020c 	andi	r2,r3,8
 1002fc4:	1000541e 	bne	r2,zero,1003118 <__srefill_r+0x19c>
 1002fc8:	8080030b 	ldhu	r2,12(r16)
 1002fcc:	10800114 	ori	r2,r2,4
 1002fd0:	8080030d 	sth	r2,12(r16)
 1002fd4:	80800417 	ldw	r2,16(r16)
 1002fd8:	10004526 	beq	r2,zero,10030f0 <__srefill_r+0x174>
 1002fdc:	8080030b 	ldhu	r2,12(r16)
 1002fe0:	108000cc 	andi	r2,r2,3
 1002fe4:	1000361e 	bne	r2,zero,10030c0 <__srefill_r+0x144>
 1002fe8:	81800417 	ldw	r6,16(r16)
 1002fec:	80c00817 	ldw	r3,32(r16)
 1002ff0:	81400717 	ldw	r5,28(r16)
 1002ff4:	81c00517 	ldw	r7,20(r16)
 1002ff8:	8809883a 	mov	r4,r17
 1002ffc:	81800015 	stw	r6,0(r16)
 1003000:	183ee83a 	callr	r3
 1003004:	80c0030b 	ldhu	r3,12(r16)
 1003008:	1009883a 	mov	r4,r2
 100300c:	80800115 	stw	r2,4(r16)
 1003010:	00b7ffc4 	movi	r2,-8193
 1003014:	1884703a 	and	r2,r3,r2
 1003018:	8080030d 	sth	r2,12(r16)
 100301c:	0100230e 	bge	zero,r4,10030ac <__srefill_r+0x130>
 1003020:	0009883a 	mov	r4,zero
 1003024:	2005883a 	mov	r2,r4
 1003028:	dfc00217 	ldw	ra,8(sp)
 100302c:	dc400117 	ldw	r17,4(sp)
 1003030:	dc000017 	ldw	r16,0(sp)
 1003034:	dec00304 	addi	sp,sp,12
 1003038:	f800283a 	ret
 100303c:	81400c17 	ldw	r5,48(r16)
 1003040:	283fe426 	beq	r5,zero,1002fd4 <__srefill_r+0x58>
 1003044:	80801004 	addi	r2,r16,64
 1003048:	28800226 	beq	r5,r2,1003054 <__srefill_r+0xd8>
 100304c:	8809883a 	mov	r4,r17
 1003050:	1000d740 	call	1000d74 <_free_r>
 1003054:	80800f17 	ldw	r2,60(r16)
 1003058:	80000c15 	stw	zero,48(r16)
 100305c:	80800115 	stw	r2,4(r16)
 1003060:	103fdc26 	beq	r2,zero,1002fd4 <__srefill_r+0x58>
 1003064:	80800e17 	ldw	r2,56(r16)
 1003068:	0009883a 	mov	r4,zero
 100306c:	80800015 	stw	r2,0(r16)
 1003070:	2005883a 	mov	r2,r4
 1003074:	dfc00217 	ldw	ra,8(sp)
 1003078:	dc400117 	ldw	r17,4(sp)
 100307c:	dc000017 	ldw	r16,0(sp)
 1003080:	dec00304 	addi	sp,sp,12
 1003084:	f800283a 	ret
 1003088:	013fffc4 	movi	r4,-1
 100308c:	2005883a 	mov	r2,r4
 1003090:	dfc00217 	ldw	ra,8(sp)
 1003094:	dc400117 	ldw	r17,4(sp)
 1003098:	dc000017 	ldw	r16,0(sp)
 100309c:	dec00304 	addi	sp,sp,12
 10030a0:	f800283a 	ret
 10030a4:	100081c0 	call	100081c <__sinit>
 10030a8:	003fbd06 	br	1002fa0 <__srefill_r+0x24>
 10030ac:	20000b1e 	bne	r4,zero,10030dc <__srefill_r+0x160>
 10030b0:	10800814 	ori	r2,r2,32
 10030b4:	013fffc4 	movi	r4,-1
 10030b8:	8080030d 	sth	r2,12(r16)
 10030bc:	003fd906 	br	1003024 <__srefill_r+0xa8>
 10030c0:	00804074 	movhi	r2,257
 10030c4:	10a5de04 	addi	r2,r2,-26760
 10030c8:	11000017 	ldw	r4,0(r2)
 10030cc:	01404034 	movhi	r5,256
 10030d0:	294c5004 	addi	r5,r5,12608
 10030d4:	1001ac00 	call	1001ac0 <_fwalk>
 10030d8:	003fc306 	br	1002fe8 <__srefill_r+0x6c>
 10030dc:	10801014 	ori	r2,r2,64
 10030e0:	013fffc4 	movi	r4,-1
 10030e4:	8080030d 	sth	r2,12(r16)
 10030e8:	80000115 	stw	zero,4(r16)
 10030ec:	003fcd06 	br	1003024 <__srefill_r+0xa8>
 10030f0:	8809883a 	mov	r4,r17
 10030f4:	800b883a 	mov	r5,r16
 10030f8:	1001c640 	call	1001c64 <__smakebuf_r>
 10030fc:	003fb706 	br	1002fdc <__srefill_r+0x60>
 1003100:	18c01014 	ori	r3,r3,64
 1003104:	00800244 	movi	r2,9
 1003108:	013fffc4 	movi	r4,-1
 100310c:	88800015 	stw	r2,0(r17)
 1003110:	80c0030d 	sth	r3,12(r16)
 1003114:	003fc306 	br	1003024 <__srefill_r+0xa8>
 1003118:	8809883a 	mov	r4,r17
 100311c:	800b883a 	mov	r5,r16
 1003120:	10005840 	call	1000584 <_fflush_r>
 1003124:	103fd81e 	bne	r2,zero,1003088 <__srefill_r+0x10c>
 1003128:	8080030b 	ldhu	r2,12(r16)
 100312c:	80000215 	stw	zero,8(r16)
 1003130:	80000615 	stw	zero,24(r16)
 1003134:	10bffdcc 	andi	r2,r2,65527
 1003138:	8080030d 	sth	r2,12(r16)
 100313c:	003fa206 	br	1002fc8 <__srefill_r+0x4c>

01003140 <lflush>:
 1003140:	20c0030b 	ldhu	r3,12(r4)
 1003144:	01400244 	movi	r5,9
 1003148:	0005883a 	mov	r2,zero
 100314c:	18c0024c 	andi	r3,r3,9
 1003150:	19400126 	beq	r3,r5,1003158 <lflush+0x18>
 1003154:	f800283a 	ret
 1003158:	10007801 	jmpi	1000780 <fflush>

0100315c <_sbrk_r>:
 100315c:	defffd04 	addi	sp,sp,-12
 1003160:	dc000015 	stw	r16,0(sp)
 1003164:	04004074 	movhi	r16,257
 1003168:	842cf604 	addi	r16,r16,-19496
 100316c:	dc400115 	stw	r17,4(sp)
 1003170:	80000015 	stw	zero,0(r16)
 1003174:	2023883a 	mov	r17,r4
 1003178:	2809883a 	mov	r4,r5
 100317c:	dfc00215 	stw	ra,8(sp)
 1003180:	10046040 	call	1004604 <sbrk>
 1003184:	1007883a 	mov	r3,r2
 1003188:	00bfffc4 	movi	r2,-1
 100318c:	18800626 	beq	r3,r2,10031a8 <_sbrk_r+0x4c>
 1003190:	1805883a 	mov	r2,r3
 1003194:	dfc00217 	ldw	ra,8(sp)
 1003198:	dc400117 	ldw	r17,4(sp)
 100319c:	dc000017 	ldw	r16,0(sp)
 10031a0:	dec00304 	addi	sp,sp,12
 10031a4:	f800283a 	ret
 10031a8:	80800017 	ldw	r2,0(r16)
 10031ac:	103ff826 	beq	r2,zero,1003190 <_sbrk_r+0x34>
 10031b0:	88800015 	stw	r2,0(r17)
 10031b4:	1805883a 	mov	r2,r3
 10031b8:	dfc00217 	ldw	ra,8(sp)
 10031bc:	dc400117 	ldw	r17,4(sp)
 10031c0:	dc000017 	ldw	r16,0(sp)
 10031c4:	dec00304 	addi	sp,sp,12
 10031c8:	f800283a 	ret

010031cc <__sclose>:
 10031cc:	2940038f 	ldh	r5,14(r5)
 10031d0:	100365c1 	jmpi	100365c <_close_r>

010031d4 <__sseek>:
 10031d4:	defffe04 	addi	sp,sp,-8
 10031d8:	dc000015 	stw	r16,0(sp)
 10031dc:	2821883a 	mov	r16,r5
 10031e0:	2940038f 	ldh	r5,14(r5)
 10031e4:	dfc00115 	stw	ra,4(sp)
 10031e8:	10037dc0 	call	10037dc <_lseek_r>
 10031ec:	1007883a 	mov	r3,r2
 10031f0:	00bfffc4 	movi	r2,-1
 10031f4:	18800926 	beq	r3,r2,100321c <__sseek+0x48>
 10031f8:	8080030b 	ldhu	r2,12(r16)
 10031fc:	80c01415 	stw	r3,80(r16)
 1003200:	10840014 	ori	r2,r2,4096
 1003204:	8080030d 	sth	r2,12(r16)
 1003208:	1805883a 	mov	r2,r3
 100320c:	dfc00117 	ldw	ra,4(sp)
 1003210:	dc000017 	ldw	r16,0(sp)
 1003214:	dec00204 	addi	sp,sp,8
 1003218:	f800283a 	ret
 100321c:	8080030b 	ldhu	r2,12(r16)
 1003220:	10bbffcc 	andi	r2,r2,61439
 1003224:	8080030d 	sth	r2,12(r16)
 1003228:	1805883a 	mov	r2,r3
 100322c:	dfc00117 	ldw	ra,4(sp)
 1003230:	dc000017 	ldw	r16,0(sp)
 1003234:	dec00204 	addi	sp,sp,8
 1003238:	f800283a 	ret

0100323c <__swrite>:
 100323c:	2880030b 	ldhu	r2,12(r5)
 1003240:	defffb04 	addi	sp,sp,-20
 1003244:	dcc00315 	stw	r19,12(sp)
 1003248:	1080400c 	andi	r2,r2,256
 100324c:	dc800215 	stw	r18,8(sp)
 1003250:	dc400115 	stw	r17,4(sp)
 1003254:	dc000015 	stw	r16,0(sp)
 1003258:	3027883a 	mov	r19,r6
 100325c:	3825883a 	mov	r18,r7
 1003260:	dfc00415 	stw	ra,16(sp)
 1003264:	2821883a 	mov	r16,r5
 1003268:	000d883a 	mov	r6,zero
 100326c:	01c00084 	movi	r7,2
 1003270:	2023883a 	mov	r17,r4
 1003274:	10000226 	beq	r2,zero,1003280 <__swrite+0x44>
 1003278:	2940038f 	ldh	r5,14(r5)
 100327c:	10037dc0 	call	10037dc <_lseek_r>
 1003280:	8080030b 	ldhu	r2,12(r16)
 1003284:	8140038f 	ldh	r5,14(r16)
 1003288:	8809883a 	mov	r4,r17
 100328c:	10bbffcc 	andi	r2,r2,61439
 1003290:	980d883a 	mov	r6,r19
 1003294:	900f883a 	mov	r7,r18
 1003298:	8080030d 	sth	r2,12(r16)
 100329c:	dfc00417 	ldw	ra,16(sp)
 10032a0:	dcc00317 	ldw	r19,12(sp)
 10032a4:	dc800217 	ldw	r18,8(sp)
 10032a8:	dc400117 	ldw	r17,4(sp)
 10032ac:	dc000017 	ldw	r16,0(sp)
 10032b0:	dec00504 	addi	sp,sp,20
 10032b4:	10034a81 	jmpi	10034a8 <_write_r>

010032b8 <__sread>:
 10032b8:	defffe04 	addi	sp,sp,-8
 10032bc:	dc000015 	stw	r16,0(sp)
 10032c0:	2821883a 	mov	r16,r5
 10032c4:	2940038f 	ldh	r5,14(r5)
 10032c8:	dfc00115 	stw	ra,4(sp)
 10032cc:	10038540 	call	1003854 <_read_r>
 10032d0:	1007883a 	mov	r3,r2
 10032d4:	10000816 	blt	r2,zero,10032f8 <__sread+0x40>
 10032d8:	80801417 	ldw	r2,80(r16)
 10032dc:	10c5883a 	add	r2,r2,r3
 10032e0:	80801415 	stw	r2,80(r16)
 10032e4:	1805883a 	mov	r2,r3
 10032e8:	dfc00117 	ldw	ra,4(sp)
 10032ec:	dc000017 	ldw	r16,0(sp)
 10032f0:	dec00204 	addi	sp,sp,8
 10032f4:	f800283a 	ret
 10032f8:	8080030b 	ldhu	r2,12(r16)
 10032fc:	10bbffcc 	andi	r2,r2,61439
 1003300:	8080030d 	sth	r2,12(r16)
 1003304:	1805883a 	mov	r2,r3
 1003308:	dfc00117 	ldw	ra,4(sp)
 100330c:	dc000017 	ldw	r16,0(sp)
 1003310:	dec00204 	addi	sp,sp,8
 1003314:	f800283a 	ret

01003318 <strcat>:
 1003318:	defffe04 	addi	sp,sp,-8
 100331c:	208000cc 	andi	r2,r4,3
 1003320:	dc000015 	stw	r16,0(sp)
 1003324:	dfc00115 	stw	ra,4(sp)
 1003328:	2021883a 	mov	r16,r4
 100332c:	1000161e 	bne	r2,zero,1003388 <strcat+0x70>
 1003330:	20c00017 	ldw	r3,0(r4)
 1003334:	01bfbff4 	movhi	r6,65279
 1003338:	31bfbfc4 	addi	r6,r6,-257
 100333c:	02202074 	movhi	r8,32897
 1003340:	42202004 	addi	r8,r8,-32640
 1003344:	1985883a 	add	r2,r3,r6
 1003348:	1204703a 	and	r2,r2,r8
 100334c:	00c6303a 	nor	r3,zero,r3
 1003350:	1886703a 	and	r3,r3,r2
 1003354:	18000c1e 	bne	r3,zero,1003388 <strcat+0x70>
 1003358:	300f883a 	mov	r7,r6
 100335c:	400d883a 	mov	r6,r8
 1003360:	21000104 	addi	r4,r4,4
 1003364:	20800017 	ldw	r2,0(r4)
 1003368:	11c7883a 	add	r3,r2,r7
 100336c:	1986703a 	and	r3,r3,r6
 1003370:	0084303a 	nor	r2,zero,r2
 1003374:	10c4703a 	and	r2,r2,r3
 1003378:	103ff926 	beq	r2,zero,1003360 <strcat+0x48>
 100337c:	20800007 	ldb	r2,0(r4)
 1003380:	10000326 	beq	r2,zero,1003390 <strcat+0x78>
 1003384:	21000044 	addi	r4,r4,1
 1003388:	20800007 	ldb	r2,0(r4)
 100338c:	103ffd1e 	bne	r2,zero,1003384 <strcat+0x6c>
 1003390:	10033a80 	call	10033a8 <strcpy>
 1003394:	8005883a 	mov	r2,r16
 1003398:	dfc00117 	ldw	ra,4(sp)
 100339c:	dc000017 	ldw	r16,0(sp)
 10033a0:	dec00204 	addi	sp,sp,8
 10033a4:	f800283a 	ret

010033a8 <strcpy>:
 10033a8:	2904b03a 	or	r2,r5,r4
 10033ac:	108000cc 	andi	r2,r2,3
 10033b0:	10000826 	beq	r2,zero,10033d4 <strcpy+0x2c>
 10033b4:	2007883a 	mov	r3,r4
 10033b8:	28800003 	ldbu	r2,0(r5)
 10033bc:	29400044 	addi	r5,r5,1
 10033c0:	18800005 	stb	r2,0(r3)
 10033c4:	18c00044 	addi	r3,r3,1
 10033c8:	103ffb1e 	bne	r2,zero,10033b8 <strcpy+0x10>
 10033cc:	2005883a 	mov	r2,r4
 10033d0:	f800283a 	ret
 10033d4:	29800017 	ldw	r6,0(r5)
 10033d8:	023fbff4 	movhi	r8,65279
 10033dc:	423fbfc4 	addi	r8,r8,-257
 10033e0:	02a02074 	movhi	r10,32897
 10033e4:	52a02004 	addi	r10,r10,-32640
 10033e8:	3205883a 	add	r2,r6,r8
 10033ec:	0186303a 	nor	r3,zero,r6
 10033f0:	10c4703a 	and	r2,r2,r3
 10033f4:	1284703a 	and	r2,r2,r10
 10033f8:	200f883a 	mov	r7,r4
 10033fc:	10000b1e 	bne	r2,zero,100342c <strcpy+0x84>
 1003400:	4013883a 	mov	r9,r8
 1003404:	5011883a 	mov	r8,r10
 1003408:	39800015 	stw	r6,0(r7)
 100340c:	29400104 	addi	r5,r5,4
 1003410:	29800017 	ldw	r6,0(r5)
 1003414:	39c00104 	addi	r7,r7,4
 1003418:	3245883a 	add	r2,r6,r9
 100341c:	0186303a 	nor	r3,zero,r6
 1003420:	10c4703a 	and	r2,r2,r3
 1003424:	1204703a 	and	r2,r2,r8
 1003428:	103ff726 	beq	r2,zero,1003408 <strcpy+0x60>
 100342c:	3807883a 	mov	r3,r7
 1003430:	003fe106 	br	10033b8 <strcpy+0x10>

01003434 <strlen>:
 1003434:	208000cc 	andi	r2,r4,3
 1003438:	2011883a 	mov	r8,r4
 100343c:	1000161e 	bne	r2,zero,1003498 <strlen+0x64>
 1003440:	20c00017 	ldw	r3,0(r4)
 1003444:	017fbff4 	movhi	r5,65279
 1003448:	297fbfc4 	addi	r5,r5,-257
 100344c:	01e02074 	movhi	r7,32897
 1003450:	39e02004 	addi	r7,r7,-32640
 1003454:	1945883a 	add	r2,r3,r5
 1003458:	11c4703a 	and	r2,r2,r7
 100345c:	00c6303a 	nor	r3,zero,r3
 1003460:	1886703a 	and	r3,r3,r2
 1003464:	18000c1e 	bne	r3,zero,1003498 <strlen+0x64>
 1003468:	280d883a 	mov	r6,r5
 100346c:	380b883a 	mov	r5,r7
 1003470:	21000104 	addi	r4,r4,4
 1003474:	20800017 	ldw	r2,0(r4)
 1003478:	1187883a 	add	r3,r2,r6
 100347c:	1946703a 	and	r3,r3,r5
 1003480:	0084303a 	nor	r2,zero,r2
 1003484:	10c4703a 	and	r2,r2,r3
 1003488:	103ff926 	beq	r2,zero,1003470 <strlen+0x3c>
 100348c:	20800007 	ldb	r2,0(r4)
 1003490:	10000326 	beq	r2,zero,10034a0 <strlen+0x6c>
 1003494:	21000044 	addi	r4,r4,1
 1003498:	20800007 	ldb	r2,0(r4)
 100349c:	103ffd1e 	bne	r2,zero,1003494 <strlen+0x60>
 10034a0:	2205c83a 	sub	r2,r4,r8
 10034a4:	f800283a 	ret

010034a8 <_write_r>:
 10034a8:	defffd04 	addi	sp,sp,-12
 10034ac:	dc000015 	stw	r16,0(sp)
 10034b0:	04004074 	movhi	r16,257
 10034b4:	842cf604 	addi	r16,r16,-19496
 10034b8:	dc400115 	stw	r17,4(sp)
 10034bc:	80000015 	stw	zero,0(r16)
 10034c0:	2023883a 	mov	r17,r4
 10034c4:	2809883a 	mov	r4,r5
 10034c8:	300b883a 	mov	r5,r6
 10034cc:	380d883a 	mov	r6,r7
 10034d0:	dfc00215 	stw	ra,8(sp)
 10034d4:	10046c00 	call	10046c0 <write>
 10034d8:	1007883a 	mov	r3,r2
 10034dc:	00bfffc4 	movi	r2,-1
 10034e0:	18800626 	beq	r3,r2,10034fc <_write_r+0x54>
 10034e4:	1805883a 	mov	r2,r3
 10034e8:	dfc00217 	ldw	ra,8(sp)
 10034ec:	dc400117 	ldw	r17,4(sp)
 10034f0:	dc000017 	ldw	r16,0(sp)
 10034f4:	dec00304 	addi	sp,sp,12
 10034f8:	f800283a 	ret
 10034fc:	80800017 	ldw	r2,0(r16)
 1003500:	103ff826 	beq	r2,zero,10034e4 <_write_r+0x3c>
 1003504:	88800015 	stw	r2,0(r17)
 1003508:	1805883a 	mov	r2,r3
 100350c:	dfc00217 	ldw	ra,8(sp)
 1003510:	dc400117 	ldw	r17,4(sp)
 1003514:	dc000017 	ldw	r16,0(sp)
 1003518:	dec00304 	addi	sp,sp,12
 100351c:	f800283a 	ret

01003520 <__swsetup_r>:
 1003520:	00804074 	movhi	r2,257
 1003524:	10a5dd04 	addi	r2,r2,-26764
 1003528:	10c00017 	ldw	r3,0(r2)
 100352c:	defffd04 	addi	sp,sp,-12
 1003530:	dc400115 	stw	r17,4(sp)
 1003534:	dc000015 	stw	r16,0(sp)
 1003538:	dfc00215 	stw	ra,8(sp)
 100353c:	2023883a 	mov	r17,r4
 1003540:	2821883a 	mov	r16,r5
 1003544:	18000226 	beq	r3,zero,1003550 <__swsetup_r+0x30>
 1003548:	18800e17 	ldw	r2,56(r3)
 100354c:	10001f26 	beq	r2,zero,10035cc <__swsetup_r+0xac>
 1003550:	8100030b 	ldhu	r4,12(r16)
 1003554:	2080020c 	andi	r2,r4,8
 1003558:	10002826 	beq	r2,zero,10035fc <__swsetup_r+0xdc>
 100355c:	81400417 	ldw	r5,16(r16)
 1003560:	28001d26 	beq	r5,zero,10035d8 <__swsetup_r+0xb8>
 1003564:	2080004c 	andi	r2,r4,1
 1003568:	1005003a 	cmpeq	r2,r2,zero
 100356c:	10000b26 	beq	r2,zero,100359c <__swsetup_r+0x7c>
 1003570:	2080008c 	andi	r2,r4,2
 1003574:	10001226 	beq	r2,zero,10035c0 <__swsetup_r+0xa0>
 1003578:	0005883a 	mov	r2,zero
 100357c:	80800215 	stw	r2,8(r16)
 1003580:	28000b26 	beq	r5,zero,10035b0 <__swsetup_r+0x90>
 1003584:	0005883a 	mov	r2,zero
 1003588:	dfc00217 	ldw	ra,8(sp)
 100358c:	dc400117 	ldw	r17,4(sp)
 1003590:	dc000017 	ldw	r16,0(sp)
 1003594:	dec00304 	addi	sp,sp,12
 1003598:	f800283a 	ret
 100359c:	80800517 	ldw	r2,20(r16)
 10035a0:	80000215 	stw	zero,8(r16)
 10035a4:	0085c83a 	sub	r2,zero,r2
 10035a8:	80800615 	stw	r2,24(r16)
 10035ac:	283ff51e 	bne	r5,zero,1003584 <__swsetup_r+0x64>
 10035b0:	2080200c 	andi	r2,r4,128
 10035b4:	103ff326 	beq	r2,zero,1003584 <__swsetup_r+0x64>
 10035b8:	00bfffc4 	movi	r2,-1
 10035bc:	003ff206 	br	1003588 <__swsetup_r+0x68>
 10035c0:	80800517 	ldw	r2,20(r16)
 10035c4:	80800215 	stw	r2,8(r16)
 10035c8:	003fed06 	br	1003580 <__swsetup_r+0x60>
 10035cc:	1809883a 	mov	r4,r3
 10035d0:	100081c0 	call	100081c <__sinit>
 10035d4:	003fde06 	br	1003550 <__swsetup_r+0x30>
 10035d8:	20c0a00c 	andi	r3,r4,640
 10035dc:	00808004 	movi	r2,512
 10035e0:	18bfe026 	beq	r3,r2,1003564 <__swsetup_r+0x44>
 10035e4:	8809883a 	mov	r4,r17
 10035e8:	800b883a 	mov	r5,r16
 10035ec:	1001c640 	call	1001c64 <__smakebuf_r>
 10035f0:	8100030b 	ldhu	r4,12(r16)
 10035f4:	81400417 	ldw	r5,16(r16)
 10035f8:	003fda06 	br	1003564 <__swsetup_r+0x44>
 10035fc:	2080040c 	andi	r2,r4,16
 1003600:	103fed26 	beq	r2,zero,10035b8 <__swsetup_r+0x98>
 1003604:	2080010c 	andi	r2,r4,4
 1003608:	10001226 	beq	r2,zero,1003654 <__swsetup_r+0x134>
 100360c:	81400c17 	ldw	r5,48(r16)
 1003610:	28000526 	beq	r5,zero,1003628 <__swsetup_r+0x108>
 1003614:	80801004 	addi	r2,r16,64
 1003618:	28800226 	beq	r5,r2,1003624 <__swsetup_r+0x104>
 100361c:	8809883a 	mov	r4,r17
 1003620:	1000d740 	call	1000d74 <_free_r>
 1003624:	80000c15 	stw	zero,48(r16)
 1003628:	8080030b 	ldhu	r2,12(r16)
 100362c:	81400417 	ldw	r5,16(r16)
 1003630:	80000115 	stw	zero,4(r16)
 1003634:	10bff6cc 	andi	r2,r2,65499
 1003638:	8080030d 	sth	r2,12(r16)
 100363c:	81400015 	stw	r5,0(r16)
 1003640:	8080030b 	ldhu	r2,12(r16)
 1003644:	10800214 	ori	r2,r2,8
 1003648:	113fffcc 	andi	r4,r2,65535
 100364c:	8080030d 	sth	r2,12(r16)
 1003650:	003fc306 	br	1003560 <__swsetup_r+0x40>
 1003654:	81400417 	ldw	r5,16(r16)
 1003658:	003ff906 	br	1003640 <__swsetup_r+0x120>

0100365c <_close_r>:
 100365c:	defffd04 	addi	sp,sp,-12
 1003660:	dc000015 	stw	r16,0(sp)
 1003664:	04004074 	movhi	r16,257
 1003668:	842cf604 	addi	r16,r16,-19496
 100366c:	dc400115 	stw	r17,4(sp)
 1003670:	80000015 	stw	zero,0(r16)
 1003674:	2023883a 	mov	r17,r4
 1003678:	2809883a 	mov	r4,r5
 100367c:	dfc00215 	stw	ra,8(sp)
 1003680:	1003a500 	call	1003a50 <close>
 1003684:	1007883a 	mov	r3,r2
 1003688:	00bfffc4 	movi	r2,-1
 100368c:	18800626 	beq	r3,r2,10036a8 <_close_r+0x4c>
 1003690:	1805883a 	mov	r2,r3
 1003694:	dfc00217 	ldw	ra,8(sp)
 1003698:	dc400117 	ldw	r17,4(sp)
 100369c:	dc000017 	ldw	r16,0(sp)
 10036a0:	dec00304 	addi	sp,sp,12
 10036a4:	f800283a 	ret
 10036a8:	80800017 	ldw	r2,0(r16)
 10036ac:	103ff826 	beq	r2,zero,1003690 <_close_r+0x34>
 10036b0:	88800015 	stw	r2,0(r17)
 10036b4:	1805883a 	mov	r2,r3
 10036b8:	dfc00217 	ldw	ra,8(sp)
 10036bc:	dc400117 	ldw	r17,4(sp)
 10036c0:	dc000017 	ldw	r16,0(sp)
 10036c4:	dec00304 	addi	sp,sp,12
 10036c8:	f800283a 	ret

010036cc <__sflags>:
 10036cc:	28c00007 	ldb	r3,0(r5)
 10036d0:	00801c84 	movi	r2,114
 10036d4:	18800926 	beq	r3,r2,10036fc <__sflags+0x30>
 10036d8:	00801dc4 	movi	r2,119
 10036dc:	18801426 	beq	r3,r2,1003730 <__sflags+0x64>
 10036e0:	00801844 	movi	r2,97
 10036e4:	18801626 	beq	r3,r2,1003740 <__sflags+0x74>
 10036e8:	0007883a 	mov	r3,zero
 10036ec:	00800584 	movi	r2,22
 10036f0:	20800015 	stw	r2,0(r4)
 10036f4:	1805883a 	mov	r2,r3
 10036f8:	f800283a 	ret
 10036fc:	000f883a 	mov	r7,zero
 1003700:	0011883a 	mov	r8,zero
 1003704:	00c00104 	movi	r3,4
 1003708:	28800047 	ldb	r2,1(r5)
 100370c:	10000426 	beq	r2,zero,1003720 <__sflags+0x54>
 1003710:	01000ac4 	movi	r4,43
 1003714:	11000e26 	beq	r2,r4,1003750 <__sflags+0x84>
 1003718:	28800087 	ldb	r2,2(r5)
 100371c:	11000c26 	beq	r2,r4,1003750 <__sflags+0x84>
 1003720:	3a04b03a 	or	r2,r7,r8
 1003724:	30800015 	stw	r2,0(r6)
 1003728:	1805883a 	mov	r2,r3
 100372c:	f800283a 	ret
 1003730:	01c00044 	movi	r7,1
 1003734:	02018004 	movi	r8,1536
 1003738:	00c00204 	movi	r3,8
 100373c:	003ff206 	br	1003708 <__sflags+0x3c>
 1003740:	01c00044 	movi	r7,1
 1003744:	02008204 	movi	r8,520
 1003748:	00c04204 	movi	r3,264
 100374c:	003fee06 	br	1003708 <__sflags+0x3c>
 1003750:	00bffcc4 	movi	r2,-13
 1003754:	1884703a 	and	r2,r3,r2
 1003758:	01c00084 	movi	r7,2
 100375c:	10c00414 	ori	r3,r2,16
 1003760:	3a04b03a 	or	r2,r7,r8
 1003764:	30800015 	stw	r2,0(r6)
 1003768:	003fef06 	br	1003728 <__sflags+0x5c>

0100376c <_isatty_r>:
 100376c:	defffd04 	addi	sp,sp,-12
 1003770:	dc000015 	stw	r16,0(sp)
 1003774:	04004074 	movhi	r16,257
 1003778:	842cf604 	addi	r16,r16,-19496
 100377c:	dc400115 	stw	r17,4(sp)
 1003780:	80000015 	stw	zero,0(r16)
 1003784:	2023883a 	mov	r17,r4
 1003788:	2809883a 	mov	r4,r5
 100378c:	dfc00215 	stw	ra,8(sp)
 1003790:	1003d140 	call	1003d14 <isatty>
 1003794:	1007883a 	mov	r3,r2
 1003798:	00bfffc4 	movi	r2,-1
 100379c:	18800626 	beq	r3,r2,10037b8 <_isatty_r+0x4c>
 10037a0:	1805883a 	mov	r2,r3
 10037a4:	dfc00217 	ldw	ra,8(sp)
 10037a8:	dc400117 	ldw	r17,4(sp)
 10037ac:	dc000017 	ldw	r16,0(sp)
 10037b0:	dec00304 	addi	sp,sp,12
 10037b4:	f800283a 	ret
 10037b8:	80800017 	ldw	r2,0(r16)
 10037bc:	103ff826 	beq	r2,zero,10037a0 <_isatty_r+0x34>
 10037c0:	88800015 	stw	r2,0(r17)
 10037c4:	1805883a 	mov	r2,r3
 10037c8:	dfc00217 	ldw	ra,8(sp)
 10037cc:	dc400117 	ldw	r17,4(sp)
 10037d0:	dc000017 	ldw	r16,0(sp)
 10037d4:	dec00304 	addi	sp,sp,12
 10037d8:	f800283a 	ret

010037dc <_lseek_r>:
 10037dc:	defffd04 	addi	sp,sp,-12
 10037e0:	dc000015 	stw	r16,0(sp)
 10037e4:	04004074 	movhi	r16,257
 10037e8:	842cf604 	addi	r16,r16,-19496
 10037ec:	dc400115 	stw	r17,4(sp)
 10037f0:	80000015 	stw	zero,0(r16)
 10037f4:	2023883a 	mov	r17,r4
 10037f8:	2809883a 	mov	r4,r5
 10037fc:	300b883a 	mov	r5,r6
 1003800:	380d883a 	mov	r6,r7
 1003804:	dfc00215 	stw	ra,8(sp)
 1003808:	1003f240 	call	1003f24 <lseek>
 100380c:	1007883a 	mov	r3,r2
 1003810:	00bfffc4 	movi	r2,-1
 1003814:	18800626 	beq	r3,r2,1003830 <_lseek_r+0x54>
 1003818:	1805883a 	mov	r2,r3
 100381c:	dfc00217 	ldw	ra,8(sp)
 1003820:	dc400117 	ldw	r17,4(sp)
 1003824:	dc000017 	ldw	r16,0(sp)
 1003828:	dec00304 	addi	sp,sp,12
 100382c:	f800283a 	ret
 1003830:	80800017 	ldw	r2,0(r16)
 1003834:	103ff826 	beq	r2,zero,1003818 <_lseek_r+0x3c>
 1003838:	88800015 	stw	r2,0(r17)
 100383c:	1805883a 	mov	r2,r3
 1003840:	dfc00217 	ldw	ra,8(sp)
 1003844:	dc400117 	ldw	r17,4(sp)
 1003848:	dc000017 	ldw	r16,0(sp)
 100384c:	dec00304 	addi	sp,sp,12
 1003850:	f800283a 	ret

01003854 <_read_r>:
 1003854:	defffd04 	addi	sp,sp,-12
 1003858:	dc000015 	stw	r16,0(sp)
 100385c:	04004074 	movhi	r16,257
 1003860:	842cf604 	addi	r16,r16,-19496
 1003864:	dc400115 	stw	r17,4(sp)
 1003868:	80000015 	stw	zero,0(r16)
 100386c:	2023883a 	mov	r17,r4
 1003870:	2809883a 	mov	r4,r5
 1003874:	300b883a 	mov	r5,r6
 1003878:	380d883a 	mov	r6,r7
 100387c:	dfc00215 	stw	ra,8(sp)
 1003880:	10044080 	call	1004408 <read>
 1003884:	1007883a 	mov	r3,r2
 1003888:	00bfffc4 	movi	r2,-1
 100388c:	18800626 	beq	r3,r2,10038a8 <_read_r+0x54>
 1003890:	1805883a 	mov	r2,r3
 1003894:	dfc00217 	ldw	ra,8(sp)
 1003898:	dc400117 	ldw	r17,4(sp)
 100389c:	dc000017 	ldw	r16,0(sp)
 10038a0:	dec00304 	addi	sp,sp,12
 10038a4:	f800283a 	ret
 10038a8:	80800017 	ldw	r2,0(r16)
 10038ac:	103ff826 	beq	r2,zero,1003890 <_read_r+0x3c>
 10038b0:	88800015 	stw	r2,0(r17)
 10038b4:	1805883a 	mov	r2,r3
 10038b8:	dfc00217 	ldw	ra,8(sp)
 10038bc:	dc400117 	ldw	r17,4(sp)
 10038c0:	dc000017 	ldw	r16,0(sp)
 10038c4:	dec00304 	addi	sp,sp,12
 10038c8:	f800283a 	ret

010038cc <udivmodsi4>:
 10038cc:	29001b2e 	bgeu	r5,r4,100393c <udivmodsi4+0x70>
 10038d0:	28001a16 	blt	r5,zero,100393c <udivmodsi4+0x70>
 10038d4:	00800044 	movi	r2,1
 10038d8:	0007883a 	mov	r3,zero
 10038dc:	01c007c4 	movi	r7,31
 10038e0:	00000306 	br	10038f0 <udivmodsi4+0x24>
 10038e4:	19c01326 	beq	r3,r7,1003934 <udivmodsi4+0x68>
 10038e8:	18c00044 	addi	r3,r3,1
 10038ec:	28000416 	blt	r5,zero,1003900 <udivmodsi4+0x34>
 10038f0:	294b883a 	add	r5,r5,r5
 10038f4:	1085883a 	add	r2,r2,r2
 10038f8:	293ffa36 	bltu	r5,r4,10038e4 <udivmodsi4+0x18>
 10038fc:	10000d26 	beq	r2,zero,1003934 <udivmodsi4+0x68>
 1003900:	0007883a 	mov	r3,zero
 1003904:	21400236 	bltu	r4,r5,1003910 <udivmodsi4+0x44>
 1003908:	2149c83a 	sub	r4,r4,r5
 100390c:	1886b03a 	or	r3,r3,r2
 1003910:	1004d07a 	srli	r2,r2,1
 1003914:	280ad07a 	srli	r5,r5,1
 1003918:	103ffa1e 	bne	r2,zero,1003904 <udivmodsi4+0x38>
 100391c:	30000226 	beq	r6,zero,1003928 <udivmodsi4+0x5c>
 1003920:	2005883a 	mov	r2,r4
 1003924:	f800283a 	ret
 1003928:	1809883a 	mov	r4,r3
 100392c:	2005883a 	mov	r2,r4
 1003930:	f800283a 	ret
 1003934:	0007883a 	mov	r3,zero
 1003938:	003ff806 	br	100391c <udivmodsi4+0x50>
 100393c:	00800044 	movi	r2,1
 1003940:	0007883a 	mov	r3,zero
 1003944:	003fef06 	br	1003904 <udivmodsi4+0x38>

01003948 <__divsi3>:
 1003948:	defffe04 	addi	sp,sp,-8
 100394c:	dc000015 	stw	r16,0(sp)
 1003950:	dfc00115 	stw	ra,4(sp)
 1003954:	0021883a 	mov	r16,zero
 1003958:	20000c16 	blt	r4,zero,100398c <__divsi3+0x44>
 100395c:	000d883a 	mov	r6,zero
 1003960:	28000e16 	blt	r5,zero,100399c <__divsi3+0x54>
 1003964:	10038cc0 	call	10038cc <udivmodsi4>
 1003968:	1007883a 	mov	r3,r2
 100396c:	8005003a 	cmpeq	r2,r16,zero
 1003970:	1000011e 	bne	r2,zero,1003978 <__divsi3+0x30>
 1003974:	00c7c83a 	sub	r3,zero,r3
 1003978:	1805883a 	mov	r2,r3
 100397c:	dfc00117 	ldw	ra,4(sp)
 1003980:	dc000017 	ldw	r16,0(sp)
 1003984:	dec00204 	addi	sp,sp,8
 1003988:	f800283a 	ret
 100398c:	0109c83a 	sub	r4,zero,r4
 1003990:	04000044 	movi	r16,1
 1003994:	000d883a 	mov	r6,zero
 1003998:	283ff20e 	bge	r5,zero,1003964 <__divsi3+0x1c>
 100399c:	014bc83a 	sub	r5,zero,r5
 10039a0:	8021003a 	cmpeq	r16,r16,zero
 10039a4:	003fef06 	br	1003964 <__divsi3+0x1c>

010039a8 <__modsi3>:
 10039a8:	deffff04 	addi	sp,sp,-4
 10039ac:	dfc00015 	stw	ra,0(sp)
 10039b0:	01800044 	movi	r6,1
 10039b4:	2807883a 	mov	r3,r5
 10039b8:	20000416 	blt	r4,zero,10039cc <__modsi3+0x24>
 10039bc:	28000c16 	blt	r5,zero,10039f0 <__modsi3+0x48>
 10039c0:	dfc00017 	ldw	ra,0(sp)
 10039c4:	dec00104 	addi	sp,sp,4
 10039c8:	10038cc1 	jmpi	10038cc <udivmodsi4>
 10039cc:	0109c83a 	sub	r4,zero,r4
 10039d0:	28000b16 	blt	r5,zero,1003a00 <__modsi3+0x58>
 10039d4:	180b883a 	mov	r5,r3
 10039d8:	01800044 	movi	r6,1
 10039dc:	10038cc0 	call	10038cc <udivmodsi4>
 10039e0:	0085c83a 	sub	r2,zero,r2
 10039e4:	dfc00017 	ldw	ra,0(sp)
 10039e8:	dec00104 	addi	sp,sp,4
 10039ec:	f800283a 	ret
 10039f0:	014bc83a 	sub	r5,zero,r5
 10039f4:	dfc00017 	ldw	ra,0(sp)
 10039f8:	dec00104 	addi	sp,sp,4
 10039fc:	10038cc1 	jmpi	10038cc <udivmodsi4>
 1003a00:	0147c83a 	sub	r3,zero,r5
 1003a04:	003ff306 	br	10039d4 <__modsi3+0x2c>

01003a08 <__udivsi3>:
 1003a08:	000d883a 	mov	r6,zero
 1003a0c:	10038cc1 	jmpi	10038cc <udivmodsi4>

01003a10 <__umodsi3>:
 1003a10:	01800044 	movi	r6,1
 1003a14:	10038cc1 	jmpi	10038cc <udivmodsi4>

01003a18 <__mulsi3>:
 1003a18:	20000a26 	beq	r4,zero,1003a44 <__mulsi3+0x2c>
 1003a1c:	0007883a 	mov	r3,zero
 1003a20:	2080004c 	andi	r2,r4,1
 1003a24:	1005003a 	cmpeq	r2,r2,zero
 1003a28:	2008d07a 	srli	r4,r4,1
 1003a2c:	1000011e 	bne	r2,zero,1003a34 <__mulsi3+0x1c>
 1003a30:	1947883a 	add	r3,r3,r5
 1003a34:	294b883a 	add	r5,r5,r5
 1003a38:	203ff91e 	bne	r4,zero,1003a20 <__mulsi3+0x8>
 1003a3c:	1805883a 	mov	r2,r3
 1003a40:	f800283a 	ret
 1003a44:	0007883a 	mov	r3,zero
 1003a48:	1805883a 	mov	r2,r3
 1003a4c:	f800283a 	ret

01003a50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1003a50:	defff804 	addi	sp,sp,-32
 1003a54:	dfc00715 	stw	ra,28(sp)
 1003a58:	df000615 	stw	fp,24(sp)
 1003a5c:	df000604 	addi	fp,sp,24
 1003a60:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1003a64:	e0bffc17 	ldw	r2,-16(fp)
 1003a68:	1004803a 	cmplt	r2,r2,zero
 1003a6c:	1000091e 	bne	r2,zero,1003a94 <close+0x44>
 1003a70:	e13ffc17 	ldw	r4,-16(fp)
 1003a74:	01400304 	movi	r5,12
 1003a78:	1003a180 	call	1003a18 <__mulsi3>
 1003a7c:	1007883a 	mov	r3,r2
 1003a80:	00804074 	movhi	r2,257
 1003a84:	10a0f104 	addi	r2,r2,-31804
 1003a88:	1887883a 	add	r3,r3,r2
 1003a8c:	e0ffff15 	stw	r3,-4(fp)
 1003a90:	00000106 	br	1003a98 <close+0x48>
 1003a94:	e03fff15 	stw	zero,-4(fp)
 1003a98:	e0bfff17 	ldw	r2,-4(fp)
 1003a9c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1003aa0:	e0bffb17 	ldw	r2,-20(fp)
 1003aa4:	1005003a 	cmpeq	r2,r2,zero
 1003aa8:	10001d1e 	bne	r2,zero,1003b20 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1003aac:	e0bffb17 	ldw	r2,-20(fp)
 1003ab0:	10800017 	ldw	r2,0(r2)
 1003ab4:	10800417 	ldw	r2,16(r2)
 1003ab8:	1005003a 	cmpeq	r2,r2,zero
 1003abc:	1000071e 	bne	r2,zero,1003adc <close+0x8c>
 1003ac0:	e0bffb17 	ldw	r2,-20(fp)
 1003ac4:	10800017 	ldw	r2,0(r2)
 1003ac8:	10800417 	ldw	r2,16(r2)
 1003acc:	e13ffb17 	ldw	r4,-20(fp)
 1003ad0:	103ee83a 	callr	r2
 1003ad4:	e0bffe15 	stw	r2,-8(fp)
 1003ad8:	00000106 	br	1003ae0 <close+0x90>
 1003adc:	e03ffe15 	stw	zero,-8(fp)
 1003ae0:	e0bffe17 	ldw	r2,-8(fp)
 1003ae4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1003ae8:	e13ffc17 	ldw	r4,-16(fp)
 1003aec:	100458c0 	call	100458c <alt_release_fd>
    if (rval < 0)
 1003af0:	e0bffa17 	ldw	r2,-24(fp)
 1003af4:	1004403a 	cmpge	r2,r2,zero
 1003af8:	1000071e 	bne	r2,zero,1003b18 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1003afc:	1003b500 	call	1003b50 <alt_get_errno>
 1003b00:	e0fffa17 	ldw	r3,-24(fp)
 1003b04:	00c7c83a 	sub	r3,zero,r3
 1003b08:	10c00015 	stw	r3,0(r2)
      return -1;
 1003b0c:	00bfffc4 	movi	r2,-1
 1003b10:	e0bffd15 	stw	r2,-12(fp)
 1003b14:	00000806 	br	1003b38 <close+0xe8>
    }
    return 0;
 1003b18:	e03ffd15 	stw	zero,-12(fp)
 1003b1c:	00000606 	br	1003b38 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003b20:	1003b500 	call	1003b50 <alt_get_errno>
 1003b24:	1007883a 	mov	r3,r2
 1003b28:	00801444 	movi	r2,81
 1003b2c:	18800015 	stw	r2,0(r3)
    return -1;
 1003b30:	00bfffc4 	movi	r2,-1
 1003b34:	e0bffd15 	stw	r2,-12(fp)
 1003b38:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1003b3c:	e037883a 	mov	sp,fp
 1003b40:	dfc00117 	ldw	ra,4(sp)
 1003b44:	df000017 	ldw	fp,0(sp)
 1003b48:	dec00204 	addi	sp,sp,8
 1003b4c:	f800283a 	ret

01003b50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003b50:	defffd04 	addi	sp,sp,-12
 1003b54:	dfc00215 	stw	ra,8(sp)
 1003b58:	df000115 	stw	fp,4(sp)
 1003b5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003b60:	00804074 	movhi	r2,257
 1003b64:	10a5e604 	addi	r2,r2,-26728
 1003b68:	10800017 	ldw	r2,0(r2)
 1003b6c:	1005003a 	cmpeq	r2,r2,zero
 1003b70:	1000061e 	bne	r2,zero,1003b8c <alt_get_errno+0x3c>
 1003b74:	00804074 	movhi	r2,257
 1003b78:	10a5e604 	addi	r2,r2,-26728
 1003b7c:	10800017 	ldw	r2,0(r2)
 1003b80:	103ee83a 	callr	r2
 1003b84:	e0bfff15 	stw	r2,-4(fp)
 1003b88:	00000306 	br	1003b98 <alt_get_errno+0x48>
 1003b8c:	00804074 	movhi	r2,257
 1003b90:	10acf604 	addi	r2,r2,-19496
 1003b94:	e0bfff15 	stw	r2,-4(fp)
 1003b98:	e0bfff17 	ldw	r2,-4(fp)
}
 1003b9c:	e037883a 	mov	sp,fp
 1003ba0:	dfc00117 	ldw	ra,4(sp)
 1003ba4:	df000017 	ldw	fp,0(sp)
 1003ba8:	dec00204 	addi	sp,sp,8
 1003bac:	f800283a 	ret

01003bb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1003bb0:	defffc04 	addi	sp,sp,-16
 1003bb4:	df000315 	stw	fp,12(sp)
 1003bb8:	df000304 	addi	fp,sp,12
 1003bbc:	e13ffd15 	stw	r4,-12(fp)
 1003bc0:	e17ffe15 	stw	r5,-8(fp)
 1003bc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1003bc8:	e0bfff17 	ldw	r2,-4(fp)
}
 1003bcc:	e037883a 	mov	sp,fp
 1003bd0:	df000017 	ldw	fp,0(sp)
 1003bd4:	dec00104 	addi	sp,sp,4
 1003bd8:	f800283a 	ret

01003bdc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1003bdc:	defff904 	addi	sp,sp,-28
 1003be0:	dfc00615 	stw	ra,24(sp)
 1003be4:	df000515 	stw	fp,20(sp)
 1003be8:	df000504 	addi	fp,sp,20
 1003bec:	e13ffc15 	stw	r4,-16(fp)
 1003bf0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003bf4:	e0bffc17 	ldw	r2,-16(fp)
 1003bf8:	1004803a 	cmplt	r2,r2,zero
 1003bfc:	1000091e 	bne	r2,zero,1003c24 <fstat+0x48>
 1003c00:	e13ffc17 	ldw	r4,-16(fp)
 1003c04:	01400304 	movi	r5,12
 1003c08:	1003a180 	call	1003a18 <__mulsi3>
 1003c0c:	1007883a 	mov	r3,r2
 1003c10:	00804074 	movhi	r2,257
 1003c14:	10a0f104 	addi	r2,r2,-31804
 1003c18:	1887883a 	add	r3,r3,r2
 1003c1c:	e0ffff15 	stw	r3,-4(fp)
 1003c20:	00000106 	br	1003c28 <fstat+0x4c>
 1003c24:	e03fff15 	stw	zero,-4(fp)
 1003c28:	e0bfff17 	ldw	r2,-4(fp)
 1003c2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1003c30:	e0bffb17 	ldw	r2,-20(fp)
 1003c34:	1005003a 	cmpeq	r2,r2,zero
 1003c38:	1000121e 	bne	r2,zero,1003c84 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1003c3c:	e0bffb17 	ldw	r2,-20(fp)
 1003c40:	10800017 	ldw	r2,0(r2)
 1003c44:	10800817 	ldw	r2,32(r2)
 1003c48:	1005003a 	cmpeq	r2,r2,zero
 1003c4c:	1000081e 	bne	r2,zero,1003c70 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1003c50:	e0bffb17 	ldw	r2,-20(fp)
 1003c54:	10800017 	ldw	r2,0(r2)
 1003c58:	10800817 	ldw	r2,32(r2)
 1003c5c:	e13ffb17 	ldw	r4,-20(fp)
 1003c60:	e17ffd17 	ldw	r5,-12(fp)
 1003c64:	103ee83a 	callr	r2
 1003c68:	e0bffe15 	stw	r2,-8(fp)
 1003c6c:	00000b06 	br	1003c9c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1003c70:	e0fffd17 	ldw	r3,-12(fp)
 1003c74:	00880004 	movi	r2,8192
 1003c78:	18800115 	stw	r2,4(r3)
      return 0;
 1003c7c:	e03ffe15 	stw	zero,-8(fp)
 1003c80:	00000606 	br	1003c9c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003c84:	1003cb40 	call	1003cb4 <alt_get_errno>
 1003c88:	1007883a 	mov	r3,r2
 1003c8c:	00801444 	movi	r2,81
 1003c90:	18800015 	stw	r2,0(r3)
    return -1;
 1003c94:	00bfffc4 	movi	r2,-1
 1003c98:	e0bffe15 	stw	r2,-8(fp)
 1003c9c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1003ca0:	e037883a 	mov	sp,fp
 1003ca4:	dfc00117 	ldw	ra,4(sp)
 1003ca8:	df000017 	ldw	fp,0(sp)
 1003cac:	dec00204 	addi	sp,sp,8
 1003cb0:	f800283a 	ret

01003cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003cb4:	defffd04 	addi	sp,sp,-12
 1003cb8:	dfc00215 	stw	ra,8(sp)
 1003cbc:	df000115 	stw	fp,4(sp)
 1003cc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003cc4:	00804074 	movhi	r2,257
 1003cc8:	10a5e604 	addi	r2,r2,-26728
 1003ccc:	10800017 	ldw	r2,0(r2)
 1003cd0:	1005003a 	cmpeq	r2,r2,zero
 1003cd4:	1000061e 	bne	r2,zero,1003cf0 <alt_get_errno+0x3c>
 1003cd8:	00804074 	movhi	r2,257
 1003cdc:	10a5e604 	addi	r2,r2,-26728
 1003ce0:	10800017 	ldw	r2,0(r2)
 1003ce4:	103ee83a 	callr	r2
 1003ce8:	e0bfff15 	stw	r2,-4(fp)
 1003cec:	00000306 	br	1003cfc <alt_get_errno+0x48>
 1003cf0:	00804074 	movhi	r2,257
 1003cf4:	10acf604 	addi	r2,r2,-19496
 1003cf8:	e0bfff15 	stw	r2,-4(fp)
 1003cfc:	e0bfff17 	ldw	r2,-4(fp)
}
 1003d00:	e037883a 	mov	sp,fp
 1003d04:	dfc00117 	ldw	ra,4(sp)
 1003d08:	df000017 	ldw	fp,0(sp)
 1003d0c:	dec00204 	addi	sp,sp,8
 1003d10:	f800283a 	ret

01003d14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1003d14:	deffeb04 	addi	sp,sp,-84
 1003d18:	dfc01415 	stw	ra,80(sp)
 1003d1c:	df001315 	stw	fp,76(sp)
 1003d20:	df001304 	addi	fp,sp,76
 1003d24:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003d28:	e0bffd17 	ldw	r2,-12(fp)
 1003d2c:	1004803a 	cmplt	r2,r2,zero
 1003d30:	1000091e 	bne	r2,zero,1003d58 <isatty+0x44>
 1003d34:	e13ffd17 	ldw	r4,-12(fp)
 1003d38:	01400304 	movi	r5,12
 1003d3c:	1003a180 	call	1003a18 <__mulsi3>
 1003d40:	1007883a 	mov	r3,r2
 1003d44:	00804074 	movhi	r2,257
 1003d48:	10a0f104 	addi	r2,r2,-31804
 1003d4c:	1887883a 	add	r3,r3,r2
 1003d50:	e0ffff15 	stw	r3,-4(fp)
 1003d54:	00000106 	br	1003d5c <isatty+0x48>
 1003d58:	e03fff15 	stw	zero,-4(fp)
 1003d5c:	e0bfff17 	ldw	r2,-4(fp)
 1003d60:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1003d64:	e0bfed17 	ldw	r2,-76(fp)
 1003d68:	1005003a 	cmpeq	r2,r2,zero
 1003d6c:	10000f1e 	bne	r2,zero,1003dac <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1003d70:	e0bfed17 	ldw	r2,-76(fp)
 1003d74:	10800017 	ldw	r2,0(r2)
 1003d78:	10800817 	ldw	r2,32(r2)
 1003d7c:	1004c03a 	cmpne	r2,r2,zero
 1003d80:	1000031e 	bne	r2,zero,1003d90 <isatty+0x7c>
    {
      return 1;
 1003d84:	00800044 	movi	r2,1
 1003d88:	e0bffe15 	stw	r2,-8(fp)
 1003d8c:	00000c06 	br	1003dc0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1003d90:	e17fee04 	addi	r5,fp,-72
 1003d94:	e13ffd17 	ldw	r4,-12(fp)
 1003d98:	1003bdc0 	call	1003bdc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1003d9c:	e0bfef17 	ldw	r2,-68(fp)
 1003da0:	10880020 	cmpeqi	r2,r2,8192
 1003da4:	e0bffe15 	stw	r2,-8(fp)
 1003da8:	00000506 	br	1003dc0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1003dac:	1003dd80 	call	1003dd8 <alt_get_errno>
 1003db0:	1007883a 	mov	r3,r2
 1003db4:	00801444 	movi	r2,81
 1003db8:	18800015 	stw	r2,0(r3)
    return 0;
 1003dbc:	e03ffe15 	stw	zero,-8(fp)
 1003dc0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1003dc4:	e037883a 	mov	sp,fp
 1003dc8:	dfc00117 	ldw	ra,4(sp)
 1003dcc:	df000017 	ldw	fp,0(sp)
 1003dd0:	dec00204 	addi	sp,sp,8
 1003dd4:	f800283a 	ret

01003dd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003dd8:	defffd04 	addi	sp,sp,-12
 1003ddc:	dfc00215 	stw	ra,8(sp)
 1003de0:	df000115 	stw	fp,4(sp)
 1003de4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003de8:	00804074 	movhi	r2,257
 1003dec:	10a5e604 	addi	r2,r2,-26728
 1003df0:	10800017 	ldw	r2,0(r2)
 1003df4:	1005003a 	cmpeq	r2,r2,zero
 1003df8:	1000061e 	bne	r2,zero,1003e14 <alt_get_errno+0x3c>
 1003dfc:	00804074 	movhi	r2,257
 1003e00:	10a5e604 	addi	r2,r2,-26728
 1003e04:	10800017 	ldw	r2,0(r2)
 1003e08:	103ee83a 	callr	r2
 1003e0c:	e0bfff15 	stw	r2,-4(fp)
 1003e10:	00000306 	br	1003e20 <alt_get_errno+0x48>
 1003e14:	00804074 	movhi	r2,257
 1003e18:	10acf604 	addi	r2,r2,-19496
 1003e1c:	e0bfff15 	stw	r2,-4(fp)
 1003e20:	e0bfff17 	ldw	r2,-4(fp)
}
 1003e24:	e037883a 	mov	sp,fp
 1003e28:	dfc00117 	ldw	ra,4(sp)
 1003e2c:	df000017 	ldw	fp,0(sp)
 1003e30:	dec00204 	addi	sp,sp,8
 1003e34:	f800283a 	ret

01003e38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1003e38:	defffe04 	addi	sp,sp,-8
 1003e3c:	dfc00115 	stw	ra,4(sp)
 1003e40:	df000015 	stw	fp,0(sp)
 1003e44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1003e48:	01004074 	movhi	r4,257
 1003e4c:	2125ed04 	addi	r4,r4,-26700
 1003e50:	01404034 	movhi	r5,256
 1003e54:	295ee504 	addi	r5,r5,31636
 1003e58:	01804074 	movhi	r6,257
 1003e5c:	31a5ed04 	addi	r6,r6,-26700
 1003e60:	1003eb80 	call	1003eb8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003e64:	01004034 	movhi	r4,256
 1003e68:	21000804 	addi	r4,r4,32
 1003e6c:	01404034 	movhi	r5,256
 1003e70:	29400804 	addi	r5,r5,32
 1003e74:	01804034 	movhi	r6,256
 1003e78:	31806d04 	addi	r6,r6,436
 1003e7c:	1003eb80 	call	1003eb8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1003e80:	01004034 	movhi	r4,256
 1003e84:	211e0704 	addi	r4,r4,30748
 1003e88:	01404034 	movhi	r5,256
 1003e8c:	295e0704 	addi	r5,r5,30748
 1003e90:	01804034 	movhi	r6,256
 1003e94:	319ee504 	addi	r6,r6,31636
 1003e98:	1003eb80 	call	1003eb8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003e9c:	100680c0 	call	100680c <alt_dcache_flush_all>
  alt_icache_flush_all();
 1003ea0:	1006c880 	call	1006c88 <alt_icache_flush_all>
}
 1003ea4:	e037883a 	mov	sp,fp
 1003ea8:	dfc00117 	ldw	ra,4(sp)
 1003eac:	df000017 	ldw	fp,0(sp)
 1003eb0:	dec00204 	addi	sp,sp,8
 1003eb4:	f800283a 	ret

01003eb8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1003eb8:	defffc04 	addi	sp,sp,-16
 1003ebc:	df000315 	stw	fp,12(sp)
 1003ec0:	df000304 	addi	fp,sp,12
 1003ec4:	e13ffd15 	stw	r4,-12(fp)
 1003ec8:	e17ffe15 	stw	r5,-8(fp)
 1003ecc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1003ed0:	e0fffe17 	ldw	r3,-8(fp)
 1003ed4:	e0bffd17 	ldw	r2,-12(fp)
 1003ed8:	18800e26 	beq	r3,r2,1003f14 <alt_load_section+0x5c>
  {
    while( to != end )
 1003edc:	00000a06 	br	1003f08 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1003ee0:	e0bffd17 	ldw	r2,-12(fp)
 1003ee4:	10c00017 	ldw	r3,0(r2)
 1003ee8:	e0bffe17 	ldw	r2,-8(fp)
 1003eec:	10c00015 	stw	r3,0(r2)
 1003ef0:	e0bffe17 	ldw	r2,-8(fp)
 1003ef4:	10800104 	addi	r2,r2,4
 1003ef8:	e0bffe15 	stw	r2,-8(fp)
 1003efc:	e0bffd17 	ldw	r2,-12(fp)
 1003f00:	10800104 	addi	r2,r2,4
 1003f04:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1003f08:	e0fffe17 	ldw	r3,-8(fp)
 1003f0c:	e0bfff17 	ldw	r2,-4(fp)
 1003f10:	18bff31e 	bne	r3,r2,1003ee0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1003f14:	e037883a 	mov	sp,fp
 1003f18:	df000017 	ldw	fp,0(sp)
 1003f1c:	dec00104 	addi	sp,sp,4
 1003f20:	f800283a 	ret

01003f24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1003f24:	defff804 	addi	sp,sp,-32
 1003f28:	dfc00715 	stw	ra,28(sp)
 1003f2c:	df000615 	stw	fp,24(sp)
 1003f30:	df000604 	addi	fp,sp,24
 1003f34:	e13ffc15 	stw	r4,-16(fp)
 1003f38:	e17ffd15 	stw	r5,-12(fp)
 1003f3c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003f40:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003f44:	e0bffc17 	ldw	r2,-16(fp)
 1003f48:	1004803a 	cmplt	r2,r2,zero
 1003f4c:	1000091e 	bne	r2,zero,1003f74 <lseek+0x50>
 1003f50:	e13ffc17 	ldw	r4,-16(fp)
 1003f54:	01400304 	movi	r5,12
 1003f58:	1003a180 	call	1003a18 <__mulsi3>
 1003f5c:	1007883a 	mov	r3,r2
 1003f60:	00804074 	movhi	r2,257
 1003f64:	10a0f104 	addi	r2,r2,-31804
 1003f68:	1887883a 	add	r3,r3,r2
 1003f6c:	e0ffff15 	stw	r3,-4(fp)
 1003f70:	00000106 	br	1003f78 <lseek+0x54>
 1003f74:	e03fff15 	stw	zero,-4(fp)
 1003f78:	e0bfff17 	ldw	r2,-4(fp)
 1003f7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003f80:	e0bffb17 	ldw	r2,-20(fp)
 1003f84:	1005003a 	cmpeq	r2,r2,zero
 1003f88:	1000111e 	bne	r2,zero,1003fd0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1003f8c:	e0bffb17 	ldw	r2,-20(fp)
 1003f90:	10800017 	ldw	r2,0(r2)
 1003f94:	10800717 	ldw	r2,28(r2)
 1003f98:	1005003a 	cmpeq	r2,r2,zero
 1003f9c:	1000091e 	bne	r2,zero,1003fc4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003fa0:	e0bffb17 	ldw	r2,-20(fp)
 1003fa4:	10800017 	ldw	r2,0(r2)
 1003fa8:	10800717 	ldw	r2,28(r2)
 1003fac:	e13ffb17 	ldw	r4,-20(fp)
 1003fb0:	e17ffd17 	ldw	r5,-12(fp)
 1003fb4:	e1bffe17 	ldw	r6,-8(fp)
 1003fb8:	103ee83a 	callr	r2
 1003fbc:	e0bffa15 	stw	r2,-24(fp)
 1003fc0:	00000506 	br	1003fd8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003fc4:	00bfde84 	movi	r2,-134
 1003fc8:	e0bffa15 	stw	r2,-24(fp)
 1003fcc:	00000206 	br	1003fd8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1003fd0:	00bfebc4 	movi	r2,-81
 1003fd4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1003fd8:	e0bffa17 	ldw	r2,-24(fp)
 1003fdc:	1004403a 	cmpge	r2,r2,zero
 1003fe0:	1000071e 	bne	r2,zero,1004000 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1003fe4:	10040180 	call	1004018 <alt_get_errno>
 1003fe8:	1007883a 	mov	r3,r2
 1003fec:	e0bffa17 	ldw	r2,-24(fp)
 1003ff0:	0085c83a 	sub	r2,zero,r2
 1003ff4:	18800015 	stw	r2,0(r3)
    rc = -1;
 1003ff8:	00bfffc4 	movi	r2,-1
 1003ffc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1004000:	e0bffa17 	ldw	r2,-24(fp)
}
 1004004:	e037883a 	mov	sp,fp
 1004008:	dfc00117 	ldw	ra,4(sp)
 100400c:	df000017 	ldw	fp,0(sp)
 1004010:	dec00204 	addi	sp,sp,8
 1004014:	f800283a 	ret

01004018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004018:	defffd04 	addi	sp,sp,-12
 100401c:	dfc00215 	stw	ra,8(sp)
 1004020:	df000115 	stw	fp,4(sp)
 1004024:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1004028:	00804074 	movhi	r2,257
 100402c:	10a5e604 	addi	r2,r2,-26728
 1004030:	10800017 	ldw	r2,0(r2)
 1004034:	1005003a 	cmpeq	r2,r2,zero
 1004038:	1000061e 	bne	r2,zero,1004054 <alt_get_errno+0x3c>
 100403c:	00804074 	movhi	r2,257
 1004040:	10a5e604 	addi	r2,r2,-26728
 1004044:	10800017 	ldw	r2,0(r2)
 1004048:	103ee83a 	callr	r2
 100404c:	e0bfff15 	stw	r2,-4(fp)
 1004050:	00000306 	br	1004060 <alt_get_errno+0x48>
 1004054:	00804074 	movhi	r2,257
 1004058:	10acf604 	addi	r2,r2,-19496
 100405c:	e0bfff15 	stw	r2,-4(fp)
 1004060:	e0bfff17 	ldw	r2,-4(fp)
}
 1004064:	e037883a 	mov	sp,fp
 1004068:	dfc00117 	ldw	ra,4(sp)
 100406c:	df000017 	ldw	fp,0(sp)
 1004070:	dec00204 	addi	sp,sp,8
 1004074:	f800283a 	ret

01004078 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1004078:	defffd04 	addi	sp,sp,-12
 100407c:	dfc00215 	stw	ra,8(sp)
 1004080:	df000115 	stw	fp,4(sp)
 1004084:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1004088:	0009883a 	mov	r4,zero
 100408c:	10048440 	call	1004844 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1004090:	10048780 	call	1004878 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1004094:	01004034 	movhi	r4,256
 1004098:	211e2204 	addi	r4,r4,30856
 100409c:	01404034 	movhi	r5,256
 10040a0:	295e2204 	addi	r5,r5,30856
 10040a4:	01804034 	movhi	r6,256
 10040a8:	319e2204 	addi	r6,r6,30856
 10040ac:	10070480 	call	1007048 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 10040b0:	100693c0 	call	100693c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 10040b4:	01004034 	movhi	r4,256
 10040b8:	211a6804 	addi	r4,r4,27040
 10040bc:	10074100 	call	1007410 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 10040c0:	d1271d17 	ldw	r4,-25484(gp)
 10040c4:	d1671e17 	ldw	r5,-25480(gp)
 10040c8:	d1a71f17 	ldw	r6,-25476(gp)
 10040cc:	10003680 	call	1000368 <main>
 10040d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10040d4:	01000044 	movi	r4,1
 10040d8:	1003a500 	call	1003a50 <close>
  exit (result);
 10040dc:	e13fff17 	ldw	r4,-4(fp)
 10040e0:	10074240 	call	1007424 <exit>

010040e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10040e4:	defffe04 	addi	sp,sp,-8
 10040e8:	df000115 	stw	fp,4(sp)
 10040ec:	df000104 	addi	fp,sp,4
 10040f0:	e13fff15 	stw	r4,-4(fp)
}
 10040f4:	e037883a 	mov	sp,fp
 10040f8:	df000017 	ldw	fp,0(sp)
 10040fc:	dec00104 	addi	sp,sp,4
 1004100:	f800283a 	ret

01004104 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1004104:	defffe04 	addi	sp,sp,-8
 1004108:	df000115 	stw	fp,4(sp)
 100410c:	df000104 	addi	fp,sp,4
 1004110:	e13fff15 	stw	r4,-4(fp)
}
 1004114:	e037883a 	mov	sp,fp
 1004118:	df000017 	ldw	fp,0(sp)
 100411c:	dec00104 	addi	sp,sp,4
 1004120:	f800283a 	ret

01004124 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1004124:	defffa04 	addi	sp,sp,-24
 1004128:	dfc00515 	stw	ra,20(sp)
 100412c:	df000415 	stw	fp,16(sp)
 1004130:	dc000315 	stw	r16,12(sp)
 1004134:	df000304 	addi	fp,sp,12
 1004138:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100413c:	e0bffe17 	ldw	r2,-8(fp)
 1004140:	10800217 	ldw	r2,8(r2)
 1004144:	10d00034 	orhi	r3,r2,16384
 1004148:	e0bffe17 	ldw	r2,-8(fp)
 100414c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1004150:	e03ffd15 	stw	zero,-12(fp)
 1004154:	00002306 	br	10041e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1004158:	e13ffd17 	ldw	r4,-12(fp)
 100415c:	04004074 	movhi	r16,257
 1004160:	8420f104 	addi	r16,r16,-31804
 1004164:	01400304 	movi	r5,12
 1004168:	1003a180 	call	1003a18 <__mulsi3>
 100416c:	1405883a 	add	r2,r2,r16
 1004170:	10c00017 	ldw	r3,0(r2)
 1004174:	e0bffe17 	ldw	r2,-8(fp)
 1004178:	10800017 	ldw	r2,0(r2)
 100417c:	1880161e 	bne	r3,r2,10041d8 <alt_file_locked+0xb4>
 1004180:	e13ffd17 	ldw	r4,-12(fp)
 1004184:	04004074 	movhi	r16,257
 1004188:	8420f104 	addi	r16,r16,-31804
 100418c:	01400304 	movi	r5,12
 1004190:	1003a180 	call	1003a18 <__mulsi3>
 1004194:	1405883a 	add	r2,r2,r16
 1004198:	10800204 	addi	r2,r2,8
 100419c:	10800017 	ldw	r2,0(r2)
 10041a0:	1004403a 	cmpge	r2,r2,zero
 10041a4:	10000c1e 	bne	r2,zero,10041d8 <alt_file_locked+0xb4>
 10041a8:	e13ffd17 	ldw	r4,-12(fp)
 10041ac:	01400304 	movi	r5,12
 10041b0:	1003a180 	call	1003a18 <__mulsi3>
 10041b4:	1007883a 	mov	r3,r2
 10041b8:	00804074 	movhi	r2,257
 10041bc:	10a0f104 	addi	r2,r2,-31804
 10041c0:	1887883a 	add	r3,r3,r2
 10041c4:	e0bffe17 	ldw	r2,-8(fp)
 10041c8:	18800326 	beq	r3,r2,10041d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10041cc:	00bffcc4 	movi	r2,-13
 10041d0:	e0bfff15 	stw	r2,-4(fp)
 10041d4:	00000a06 	br	1004200 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10041d8:	e0bffd17 	ldw	r2,-12(fp)
 10041dc:	10800044 	addi	r2,r2,1
 10041e0:	e0bffd15 	stw	r2,-12(fp)
 10041e4:	00804074 	movhi	r2,257
 10041e8:	10a5e504 	addi	r2,r2,-26732
 10041ec:	10800017 	ldw	r2,0(r2)
 10041f0:	1007883a 	mov	r3,r2
 10041f4:	e0bffd17 	ldw	r2,-12(fp)
 10041f8:	18bfd72e 	bgeu	r3,r2,1004158 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10041fc:	e03fff15 	stw	zero,-4(fp)
 1004200:	e0bfff17 	ldw	r2,-4(fp)
}
 1004204:	e037883a 	mov	sp,fp
 1004208:	dfc00217 	ldw	ra,8(sp)
 100420c:	df000117 	ldw	fp,4(sp)
 1004210:	dc000017 	ldw	r16,0(sp)
 1004214:	dec00304 	addi	sp,sp,12
 1004218:	f800283a 	ret

0100421c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100421c:	defff404 	addi	sp,sp,-48
 1004220:	dfc00b15 	stw	ra,44(sp)
 1004224:	df000a15 	stw	fp,40(sp)
 1004228:	df000a04 	addi	fp,sp,40
 100422c:	e13ffb15 	stw	r4,-20(fp)
 1004230:	e17ffc15 	stw	r5,-16(fp)
 1004234:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1004238:	00bfffc4 	movi	r2,-1
 100423c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1004240:	00bffb44 	movi	r2,-19
 1004244:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1004248:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100424c:	e13ffb17 	ldw	r4,-20(fp)
 1004250:	01404074 	movhi	r5,257
 1004254:	2965e304 	addi	r5,r5,-26740
 1004258:	1006a040 	call	1006a04 <alt_find_dev>
 100425c:	e0bffa15 	stw	r2,-24(fp)
 1004260:	e0bffa17 	ldw	r2,-24(fp)
 1004264:	1004c03a 	cmpne	r2,r2,zero
 1004268:	1000051e 	bne	r2,zero,1004280 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100426c:	e13ffb17 	ldw	r4,-20(fp)
 1004270:	1006a980 	call	1006a98 <alt_find_file>
 1004274:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1004278:	00800044 	movi	r2,1
 100427c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1004280:	e0bffa17 	ldw	r2,-24(fp)
 1004284:	1005003a 	cmpeq	r2,r2,zero
 1004288:	1000311e 	bne	r2,zero,1004350 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100428c:	e13ffa17 	ldw	r4,-24(fp)
 1004290:	1006bb80 	call	1006bb8 <alt_get_fd>
 1004294:	e0bff815 	stw	r2,-32(fp)
 1004298:	e0bff817 	ldw	r2,-32(fp)
 100429c:	1004403a 	cmpge	r2,r2,zero
 10042a0:	1000031e 	bne	r2,zero,10042b0 <open+0x94>
    {
      status = index;
 10042a4:	e0bff817 	ldw	r2,-32(fp)
 10042a8:	e0bff715 	stw	r2,-36(fp)
 10042ac:	00002a06 	br	1004358 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 10042b0:	e13ff817 	ldw	r4,-32(fp)
 10042b4:	01400304 	movi	r5,12
 10042b8:	1003a180 	call	1003a18 <__mulsi3>
 10042bc:	1007883a 	mov	r3,r2
 10042c0:	00804074 	movhi	r2,257
 10042c4:	10a0f104 	addi	r2,r2,-31804
 10042c8:	1885883a 	add	r2,r3,r2
 10042cc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10042d0:	e0fffc17 	ldw	r3,-16(fp)
 10042d4:	00900034 	movhi	r2,16384
 10042d8:	10bfffc4 	addi	r2,r2,-1
 10042dc:	1886703a 	and	r3,r3,r2
 10042e0:	e0bff917 	ldw	r2,-28(fp)
 10042e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10042e8:	e0bff617 	ldw	r2,-40(fp)
 10042ec:	1004c03a 	cmpne	r2,r2,zero
 10042f0:	1000061e 	bne	r2,zero,100430c <open+0xf0>
 10042f4:	e13ff917 	ldw	r4,-28(fp)
 10042f8:	10041240 	call	1004124 <alt_file_locked>
 10042fc:	e0bff715 	stw	r2,-36(fp)
 1004300:	e0bff717 	ldw	r2,-36(fp)
 1004304:	1004803a 	cmplt	r2,r2,zero
 1004308:	1000131e 	bne	r2,zero,1004358 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100430c:	e0bffa17 	ldw	r2,-24(fp)
 1004310:	10800317 	ldw	r2,12(r2)
 1004314:	1005003a 	cmpeq	r2,r2,zero
 1004318:	1000091e 	bne	r2,zero,1004340 <open+0x124>
 100431c:	e0bffa17 	ldw	r2,-24(fp)
 1004320:	10800317 	ldw	r2,12(r2)
 1004324:	e13ff917 	ldw	r4,-28(fp)
 1004328:	e17ffb17 	ldw	r5,-20(fp)
 100432c:	e1bffc17 	ldw	r6,-16(fp)
 1004330:	e1fffd17 	ldw	r7,-12(fp)
 1004334:	103ee83a 	callr	r2
 1004338:	e0bfff15 	stw	r2,-4(fp)
 100433c:	00000106 	br	1004344 <open+0x128>
 1004340:	e03fff15 	stw	zero,-4(fp)
 1004344:	e0bfff17 	ldw	r2,-4(fp)
 1004348:	e0bff715 	stw	r2,-36(fp)
 100434c:	00000206 	br	1004358 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1004350:	00bffb44 	movi	r2,-19
 1004354:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1004358:	e0bff717 	ldw	r2,-36(fp)
 100435c:	1004403a 	cmpge	r2,r2,zero
 1004360:	1000091e 	bne	r2,zero,1004388 <open+0x16c>
  {
    alt_release_fd (index);  
 1004364:	e13ff817 	ldw	r4,-32(fp)
 1004368:	100458c0 	call	100458c <alt_release_fd>
    ALT_ERRNO = -status;
 100436c:	10043a80 	call	10043a8 <alt_get_errno>
 1004370:	e0fff717 	ldw	r3,-36(fp)
 1004374:	00c7c83a 	sub	r3,zero,r3
 1004378:	10c00015 	stw	r3,0(r2)
    return -1;
 100437c:	00bfffc4 	movi	r2,-1
 1004380:	e0bffe15 	stw	r2,-8(fp)
 1004384:	00000206 	br	1004390 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1004388:	e0bff817 	ldw	r2,-32(fp)
 100438c:	e0bffe15 	stw	r2,-8(fp)
 1004390:	e0bffe17 	ldw	r2,-8(fp)
}
 1004394:	e037883a 	mov	sp,fp
 1004398:	dfc00117 	ldw	ra,4(sp)
 100439c:	df000017 	ldw	fp,0(sp)
 10043a0:	dec00204 	addi	sp,sp,8
 10043a4:	f800283a 	ret

010043a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10043a8:	defffd04 	addi	sp,sp,-12
 10043ac:	dfc00215 	stw	ra,8(sp)
 10043b0:	df000115 	stw	fp,4(sp)
 10043b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10043b8:	00804074 	movhi	r2,257
 10043bc:	10a5e604 	addi	r2,r2,-26728
 10043c0:	10800017 	ldw	r2,0(r2)
 10043c4:	1005003a 	cmpeq	r2,r2,zero
 10043c8:	1000061e 	bne	r2,zero,10043e4 <alt_get_errno+0x3c>
 10043cc:	00804074 	movhi	r2,257
 10043d0:	10a5e604 	addi	r2,r2,-26728
 10043d4:	10800017 	ldw	r2,0(r2)
 10043d8:	103ee83a 	callr	r2
 10043dc:	e0bfff15 	stw	r2,-4(fp)
 10043e0:	00000306 	br	10043f0 <alt_get_errno+0x48>
 10043e4:	00804074 	movhi	r2,257
 10043e8:	10acf604 	addi	r2,r2,-19496
 10043ec:	e0bfff15 	stw	r2,-4(fp)
 10043f0:	e0bfff17 	ldw	r2,-4(fp)
}
 10043f4:	e037883a 	mov	sp,fp
 10043f8:	dfc00117 	ldw	ra,4(sp)
 10043fc:	df000017 	ldw	fp,0(sp)
 1004400:	dec00204 	addi	sp,sp,8
 1004404:	f800283a 	ret

01004408 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 1004408:	defff704 	addi	sp,sp,-36
 100440c:	dfc00815 	stw	ra,32(sp)
 1004410:	df000715 	stw	fp,28(sp)
 1004414:	df000704 	addi	fp,sp,28
 1004418:	e13ffb15 	stw	r4,-20(fp)
 100441c:	e17ffc15 	stw	r5,-16(fp)
 1004420:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004424:	e0bffb17 	ldw	r2,-20(fp)
 1004428:	1004803a 	cmplt	r2,r2,zero
 100442c:	1000091e 	bne	r2,zero,1004454 <read+0x4c>
 1004430:	e13ffb17 	ldw	r4,-20(fp)
 1004434:	01400304 	movi	r5,12
 1004438:	1003a180 	call	1003a18 <__mulsi3>
 100443c:	1007883a 	mov	r3,r2
 1004440:	00804074 	movhi	r2,257
 1004444:	10a0f104 	addi	r2,r2,-31804
 1004448:	1887883a 	add	r3,r3,r2
 100444c:	e0ffff15 	stw	r3,-4(fp)
 1004450:	00000106 	br	1004458 <read+0x50>
 1004454:	e03fff15 	stw	zero,-4(fp)
 1004458:	e0bfff17 	ldw	r2,-4(fp)
 100445c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1004460:	e0bffa17 	ldw	r2,-24(fp)
 1004464:	1005003a 	cmpeq	r2,r2,zero
 1004468:	1000241e 	bne	r2,zero,10044fc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100446c:	e0bffa17 	ldw	r2,-24(fp)
 1004470:	10800217 	ldw	r2,8(r2)
 1004474:	108000cc 	andi	r2,r2,3
 1004478:	10800060 	cmpeqi	r2,r2,1
 100447c:	10001a1e 	bne	r2,zero,10044e8 <read+0xe0>
 1004480:	e0bffa17 	ldw	r2,-24(fp)
 1004484:	10800017 	ldw	r2,0(r2)
 1004488:	10800517 	ldw	r2,20(r2)
 100448c:	1005003a 	cmpeq	r2,r2,zero
 1004490:	1000151e 	bne	r2,zero,10044e8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1004494:	e0bffa17 	ldw	r2,-24(fp)
 1004498:	10800017 	ldw	r2,0(r2)
 100449c:	10800517 	ldw	r2,20(r2)
 10044a0:	e17ffc17 	ldw	r5,-16(fp)
 10044a4:	e1bffd17 	ldw	r6,-12(fp)
 10044a8:	e13ffa17 	ldw	r4,-24(fp)
 10044ac:	103ee83a 	callr	r2
 10044b0:	e0bff915 	stw	r2,-28(fp)
 10044b4:	e0bff917 	ldw	r2,-28(fp)
 10044b8:	1004403a 	cmpge	r2,r2,zero
 10044bc:	1000071e 	bne	r2,zero,10044dc <read+0xd4>
        {
          ALT_ERRNO = -rval;
 10044c0:	100452c0 	call	100452c <alt_get_errno>
 10044c4:	e0fff917 	ldw	r3,-28(fp)
 10044c8:	00c7c83a 	sub	r3,zero,r3
 10044cc:	10c00015 	stw	r3,0(r2)
          return -1;
 10044d0:	00bfffc4 	movi	r2,-1
 10044d4:	e0bffe15 	stw	r2,-8(fp)
 10044d8:	00000e06 	br	1004514 <read+0x10c>
        }
        return rval;
 10044dc:	e0bff917 	ldw	r2,-28(fp)
 10044e0:	e0bffe15 	stw	r2,-8(fp)
 10044e4:	00000b06 	br	1004514 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10044e8:	100452c0 	call	100452c <alt_get_errno>
 10044ec:	1007883a 	mov	r3,r2
 10044f0:	00800344 	movi	r2,13
 10044f4:	18800015 	stw	r2,0(r3)
 10044f8:	00000406 	br	100450c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10044fc:	100452c0 	call	100452c <alt_get_errno>
 1004500:	1007883a 	mov	r3,r2
 1004504:	00801444 	movi	r2,81
 1004508:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100450c:	00bfffc4 	movi	r2,-1
 1004510:	e0bffe15 	stw	r2,-8(fp)
 1004514:	e0bffe17 	ldw	r2,-8(fp)
}
 1004518:	e037883a 	mov	sp,fp
 100451c:	dfc00117 	ldw	ra,4(sp)
 1004520:	df000017 	ldw	fp,0(sp)
 1004524:	dec00204 	addi	sp,sp,8
 1004528:	f800283a 	ret

0100452c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100452c:	defffd04 	addi	sp,sp,-12
 1004530:	dfc00215 	stw	ra,8(sp)
 1004534:	df000115 	stw	fp,4(sp)
 1004538:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100453c:	00804074 	movhi	r2,257
 1004540:	10a5e604 	addi	r2,r2,-26728
 1004544:	10800017 	ldw	r2,0(r2)
 1004548:	1005003a 	cmpeq	r2,r2,zero
 100454c:	1000061e 	bne	r2,zero,1004568 <alt_get_errno+0x3c>
 1004550:	00804074 	movhi	r2,257
 1004554:	10a5e604 	addi	r2,r2,-26728
 1004558:	10800017 	ldw	r2,0(r2)
 100455c:	103ee83a 	callr	r2
 1004560:	e0bfff15 	stw	r2,-4(fp)
 1004564:	00000306 	br	1004574 <alt_get_errno+0x48>
 1004568:	00804074 	movhi	r2,257
 100456c:	10acf604 	addi	r2,r2,-19496
 1004570:	e0bfff15 	stw	r2,-4(fp)
 1004574:	e0bfff17 	ldw	r2,-4(fp)
}
 1004578:	e037883a 	mov	sp,fp
 100457c:	dfc00117 	ldw	ra,4(sp)
 1004580:	df000017 	ldw	fp,0(sp)
 1004584:	dec00204 	addi	sp,sp,8
 1004588:	f800283a 	ret

0100458c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100458c:	defffc04 	addi	sp,sp,-16
 1004590:	dfc00315 	stw	ra,12(sp)
 1004594:	df000215 	stw	fp,8(sp)
 1004598:	dc000115 	stw	r16,4(sp)
 100459c:	df000104 	addi	fp,sp,4
 10045a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10045a4:	e0bfff17 	ldw	r2,-4(fp)
 10045a8:	108000d0 	cmplti	r2,r2,3
 10045ac:	10000f1e 	bne	r2,zero,10045ec <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 10045b0:	e13fff17 	ldw	r4,-4(fp)
 10045b4:	04004074 	movhi	r16,257
 10045b8:	8420f104 	addi	r16,r16,-31804
 10045bc:	01400304 	movi	r5,12
 10045c0:	1003a180 	call	1003a18 <__mulsi3>
 10045c4:	1405883a 	add	r2,r2,r16
 10045c8:	10800204 	addi	r2,r2,8
 10045cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10045d0:	e13fff17 	ldw	r4,-4(fp)
 10045d4:	04004074 	movhi	r16,257
 10045d8:	8420f104 	addi	r16,r16,-31804
 10045dc:	01400304 	movi	r5,12
 10045e0:	1003a180 	call	1003a18 <__mulsi3>
 10045e4:	1405883a 	add	r2,r2,r16
 10045e8:	10000015 	stw	zero,0(r2)
  }
}
 10045ec:	e037883a 	mov	sp,fp
 10045f0:	dfc00217 	ldw	ra,8(sp)
 10045f4:	df000117 	ldw	fp,4(sp)
 10045f8:	dc000017 	ldw	r16,0(sp)
 10045fc:	dec00304 	addi	sp,sp,12
 1004600:	f800283a 	ret

01004604 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1004604:	defff804 	addi	sp,sp,-32
 1004608:	df000715 	stw	fp,28(sp)
 100460c:	df000704 	addi	fp,sp,28
 1004610:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1004614:	0005303a 	rdctl	r2,status
 1004618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100461c:	e0fffb17 	ldw	r3,-20(fp)
 1004620:	00bfff84 	movi	r2,-2
 1004624:	1884703a 	and	r2,r3,r2
 1004628:	1001703a 	wrctl	status,r2
  
  return context;
 100462c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1004630:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1004634:	d0a00a17 	ldw	r2,-32728(gp)
 1004638:	10c000c4 	addi	r3,r2,3
 100463c:	00bfff04 	movi	r2,-4
 1004640:	1884703a 	and	r2,r3,r2
 1004644:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1004648:	d0e00a17 	ldw	r3,-32728(gp)
 100464c:	e0bffe17 	ldw	r2,-8(fp)
 1004650:	1887883a 	add	r3,r3,r2
 1004654:	00806034 	movhi	r2,384
 1004658:	10800004 	addi	r2,r2,0
 100465c:	10c0072e 	bgeu	r2,r3,100467c <sbrk+0x78>
 1004660:	e0bffd17 	ldw	r2,-12(fp)
 1004664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1004668:	e0bffa17 	ldw	r2,-24(fp)
 100466c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1004670:	00bfffc4 	movi	r2,-1
 1004674:	e0bfff15 	stw	r2,-4(fp)
 1004678:	00000c06 	br	10046ac <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100467c:	d0a00a17 	ldw	r2,-32728(gp)
 1004680:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1004684:	d0e00a17 	ldw	r3,-32728(gp)
 1004688:	e0bffe17 	ldw	r2,-8(fp)
 100468c:	1885883a 	add	r2,r3,r2
 1004690:	d0a00a15 	stw	r2,-32728(gp)
 1004694:	e0bffd17 	ldw	r2,-12(fp)
 1004698:	e0bff915 	stw	r2,-28(fp)
 100469c:	e0bff917 	ldw	r2,-28(fp)
 10046a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10046a4:	e0bffc17 	ldw	r2,-16(fp)
 10046a8:	e0bfff15 	stw	r2,-4(fp)
 10046ac:	e0bfff17 	ldw	r2,-4(fp)
} 
 10046b0:	e037883a 	mov	sp,fp
 10046b4:	df000017 	ldw	fp,0(sp)
 10046b8:	dec00104 	addi	sp,sp,4
 10046bc:	f800283a 	ret

010046c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10046c0:	defff704 	addi	sp,sp,-36
 10046c4:	dfc00815 	stw	ra,32(sp)
 10046c8:	df000715 	stw	fp,28(sp)
 10046cc:	df000704 	addi	fp,sp,28
 10046d0:	e13ffb15 	stw	r4,-20(fp)
 10046d4:	e17ffc15 	stw	r5,-16(fp)
 10046d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10046dc:	e0bffb17 	ldw	r2,-20(fp)
 10046e0:	1004803a 	cmplt	r2,r2,zero
 10046e4:	1000091e 	bne	r2,zero,100470c <write+0x4c>
 10046e8:	e13ffb17 	ldw	r4,-20(fp)
 10046ec:	01400304 	movi	r5,12
 10046f0:	1003a180 	call	1003a18 <__mulsi3>
 10046f4:	1007883a 	mov	r3,r2
 10046f8:	00804074 	movhi	r2,257
 10046fc:	10a0f104 	addi	r2,r2,-31804
 1004700:	1887883a 	add	r3,r3,r2
 1004704:	e0ffff15 	stw	r3,-4(fp)
 1004708:	00000106 	br	1004710 <write+0x50>
 100470c:	e03fff15 	stw	zero,-4(fp)
 1004710:	e0bfff17 	ldw	r2,-4(fp)
 1004714:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1004718:	e0bffa17 	ldw	r2,-24(fp)
 100471c:	1005003a 	cmpeq	r2,r2,zero
 1004720:	1000241e 	bne	r2,zero,10047b4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1004724:	e0bffa17 	ldw	r2,-24(fp)
 1004728:	10800217 	ldw	r2,8(r2)
 100472c:	108000cc 	andi	r2,r2,3
 1004730:	1005003a 	cmpeq	r2,r2,zero
 1004734:	10001a1e 	bne	r2,zero,10047a0 <write+0xe0>
 1004738:	e0bffa17 	ldw	r2,-24(fp)
 100473c:	10800017 	ldw	r2,0(r2)
 1004740:	10800617 	ldw	r2,24(r2)
 1004744:	1005003a 	cmpeq	r2,r2,zero
 1004748:	1000151e 	bne	r2,zero,10047a0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100474c:	e0bffa17 	ldw	r2,-24(fp)
 1004750:	10800017 	ldw	r2,0(r2)
 1004754:	10800617 	ldw	r2,24(r2)
 1004758:	e17ffc17 	ldw	r5,-16(fp)
 100475c:	e1bffd17 	ldw	r6,-12(fp)
 1004760:	e13ffa17 	ldw	r4,-24(fp)
 1004764:	103ee83a 	callr	r2
 1004768:	e0bff915 	stw	r2,-28(fp)
 100476c:	e0bff917 	ldw	r2,-28(fp)
 1004770:	1004403a 	cmpge	r2,r2,zero
 1004774:	1000071e 	bne	r2,zero,1004794 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 1004778:	10047e40 	call	10047e4 <alt_get_errno>
 100477c:	e0fff917 	ldw	r3,-28(fp)
 1004780:	00c7c83a 	sub	r3,zero,r3
 1004784:	10c00015 	stw	r3,0(r2)
        return -1;
 1004788:	00bfffc4 	movi	r2,-1
 100478c:	e0bffe15 	stw	r2,-8(fp)
 1004790:	00000e06 	br	10047cc <write+0x10c>
      }
      return rval;
 1004794:	e0bff917 	ldw	r2,-28(fp)
 1004798:	e0bffe15 	stw	r2,-8(fp)
 100479c:	00000b06 	br	10047cc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 10047a0:	10047e40 	call	10047e4 <alt_get_errno>
 10047a4:	1007883a 	mov	r3,r2
 10047a8:	00800344 	movi	r2,13
 10047ac:	18800015 	stw	r2,0(r3)
 10047b0:	00000406 	br	10047c4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 10047b4:	10047e40 	call	10047e4 <alt_get_errno>
 10047b8:	1007883a 	mov	r3,r2
 10047bc:	00801444 	movi	r2,81
 10047c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10047c4:	00bfffc4 	movi	r2,-1
 10047c8:	e0bffe15 	stw	r2,-8(fp)
 10047cc:	e0bffe17 	ldw	r2,-8(fp)
}
 10047d0:	e037883a 	mov	sp,fp
 10047d4:	dfc00117 	ldw	ra,4(sp)
 10047d8:	df000017 	ldw	fp,0(sp)
 10047dc:	dec00204 	addi	sp,sp,8
 10047e0:	f800283a 	ret

010047e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10047e4:	defffd04 	addi	sp,sp,-12
 10047e8:	dfc00215 	stw	ra,8(sp)
 10047ec:	df000115 	stw	fp,4(sp)
 10047f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10047f4:	00804074 	movhi	r2,257
 10047f8:	10a5e604 	addi	r2,r2,-26728
 10047fc:	10800017 	ldw	r2,0(r2)
 1004800:	1005003a 	cmpeq	r2,r2,zero
 1004804:	1000061e 	bne	r2,zero,1004820 <alt_get_errno+0x3c>
 1004808:	00804074 	movhi	r2,257
 100480c:	10a5e604 	addi	r2,r2,-26728
 1004810:	10800017 	ldw	r2,0(r2)
 1004814:	103ee83a 	callr	r2
 1004818:	e0bfff15 	stw	r2,-4(fp)
 100481c:	00000306 	br	100482c <alt_get_errno+0x48>
 1004820:	00804074 	movhi	r2,257
 1004824:	10acf604 	addi	r2,r2,-19496
 1004828:	e0bfff15 	stw	r2,-4(fp)
 100482c:	e0bfff17 	ldw	r2,-4(fp)
}
 1004830:	e037883a 	mov	sp,fp
 1004834:	dfc00117 	ldw	ra,4(sp)
 1004838:	df000017 	ldw	fp,0(sp)
 100483c:	dec00204 	addi	sp,sp,8
 1004840:	f800283a 	ret

01004844 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1004844:	defffd04 	addi	sp,sp,-12
 1004848:	dfc00215 	stw	ra,8(sp)
 100484c:	df000115 	stw	fp,4(sp)
 1004850:	df000104 	addi	fp,sp,4
 1004854:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 1004858:	10072940 	call	1007294 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100485c:	00800044 	movi	r2,1
 1004860:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1004864:	e037883a 	mov	sp,fp
 1004868:	dfc00117 	ldw	ra,4(sp)
 100486c:	df000017 	ldw	fp,0(sp)
 1004870:	dec00204 	addi	sp,sp,8
 1004874:	f800283a 	ret

01004878 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1004878:	defffd04 	addi	sp,sp,-12
 100487c:	dfc00215 	stw	ra,8(sp)
 1004880:	df000115 	stw	fp,4(sp)
 1004884:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_SYSTEM, timer_system);
 1004888:	01000274 	movhi	r4,9
 100488c:	21254804 	addi	r4,r4,-27360
 1004890:	000b883a 	mov	r5,zero
 1004894:	01800044 	movi	r6,1
 1004898:	01c0fa04 	movi	r7,1000
 100489c:	10066280 	call	1006628 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_TIMESTAMP, timer_timestamp);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10048a0:	01004074 	movhi	r4,257
 10048a4:	21215b04 	addi	r4,r4,-31380
 10048a8:	000b883a 	mov	r5,zero
 10048ac:	000d883a 	mov	r6,zero
 10048b0:	1004c7c0 	call	1004c7c <altera_avalon_jtag_uart_init>
 10048b4:	01004074 	movhi	r4,257
 10048b8:	21215104 	addi	r4,r4,-31420
 10048bc:	1004afc0 	call	1004afc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
 10048c0:	01004074 	movhi	r4,257
 10048c4:	21257304 	addi	r4,r4,-27188
 10048c8:	10064240 	call	1006424 <altera_avalon_lcd_16207_init>
 10048cc:	01004074 	movhi	r4,257
 10048d0:	21256904 	addi	r4,r4,-27228
 10048d4:	1004afc0 	call	1004afc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
 10048d8:	01004074 	movhi	r4,257
 10048dc:	2125b104 	addi	r4,r4,-26940
 10048e0:	1004afc0 	call	1004afc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, Pixel_Buffer_DMA);
 10048e4:	00804074 	movhi	r2,257
 10048e8:	10a5bd04 	addi	r2,r2,-26892
 10048ec:	10800a17 	ldw	r2,40(r2)
 10048f0:	10800017 	ldw	r2,0(r2)
 10048f4:	1007883a 	mov	r3,r2
 10048f8:	00804074 	movhi	r2,257
 10048fc:	10a5bd04 	addi	r2,r2,-26892
 1004900:	10c00b15 	stw	r3,44(r2)
 1004904:	00804074 	movhi	r2,257
 1004908:	10a5bd04 	addi	r2,r2,-26892
 100490c:	10800a17 	ldw	r2,40(r2)
 1004910:	10800104 	addi	r2,r2,4
 1004914:	10800017 	ldw	r2,0(r2)
 1004918:	1007883a 	mov	r3,r2
 100491c:	00804074 	movhi	r2,257
 1004920:	10a5bd04 	addi	r2,r2,-26892
 1004924:	10c00c15 	stw	r3,48(r2)
 1004928:	00804074 	movhi	r2,257
 100492c:	10a5bd04 	addi	r2,r2,-26892
 1004930:	10800a17 	ldw	r2,40(r2)
 1004934:	10800204 	addi	r2,r2,8
 1004938:	10800017 	ldw	r2,0(r2)
 100493c:	10ffffcc 	andi	r3,r2,65535
 1004940:	00804074 	movhi	r2,257
 1004944:	10a5bd04 	addi	r2,r2,-26892
 1004948:	10c00f15 	stw	r3,60(r2)
 100494c:	00804074 	movhi	r2,257
 1004950:	10a5bd04 	addi	r2,r2,-26892
 1004954:	10800a17 	ldw	r2,40(r2)
 1004958:	10800204 	addi	r2,r2,8
 100495c:	10800017 	ldw	r2,0(r2)
 1004960:	1005d43a 	srai	r2,r2,16
 1004964:	10ffffcc 	andi	r3,r2,65535
 1004968:	00804074 	movhi	r2,257
 100496c:	10a5bd04 	addi	r2,r2,-26892
 1004970:	10c01015 	stw	r3,64(r2)
 1004974:	00804074 	movhi	r2,257
 1004978:	10a5bd04 	addi	r2,r2,-26892
 100497c:	10800a17 	ldw	r2,40(r2)
 1004980:	10800304 	addi	r2,r2,12
 1004984:	10800017 	ldw	r2,0(r2)
 1004988:	1005d07a 	srai	r2,r2,1
 100498c:	10c0004c 	andi	r3,r2,1
 1004990:	00804074 	movhi	r2,257
 1004994:	10a5bd04 	addi	r2,r2,-26892
 1004998:	10c00d15 	stw	r3,52(r2)
 100499c:	00804074 	movhi	r2,257
 10049a0:	10a5bd04 	addi	r2,r2,-26892
 10049a4:	10800a17 	ldw	r2,40(r2)
 10049a8:	10800304 	addi	r2,r2,12
 10049ac:	10800017 	ldw	r2,0(r2)
 10049b0:	1005d13a 	srai	r2,r2,4
 10049b4:	10c003cc 	andi	r3,r2,15
 10049b8:	00804074 	movhi	r2,257
 10049bc:	10a5bd04 	addi	r2,r2,-26892
 10049c0:	10c00e15 	stw	r3,56(r2)
 10049c4:	00804074 	movhi	r2,257
 10049c8:	10a5bd04 	addi	r2,r2,-26892
 10049cc:	10800a17 	ldw	r2,40(r2)
 10049d0:	10800304 	addi	r2,r2,12
 10049d4:	10800017 	ldw	r2,0(r2)
 10049d8:	1005d43a 	srai	r2,r2,16
 10049dc:	1007883a 	mov	r3,r2
 10049e0:	00bfffc4 	movi	r2,-1
 10049e4:	1884703a 	and	r2,r3,r2
 10049e8:	e0bfff45 	stb	r2,-3(fp)
 10049ec:	00804074 	movhi	r2,257
 10049f0:	10a5bd04 	addi	r2,r2,-26892
 10049f4:	10800a17 	ldw	r2,40(r2)
 10049f8:	10800304 	addi	r2,r2,12
 10049fc:	10800017 	ldw	r2,0(r2)
 1004a00:	1005d63a 	srai	r2,r2,24
 1004a04:	1007883a 	mov	r3,r2
 1004a08:	00bfffc4 	movi	r2,-1
 1004a0c:	1884703a 	and	r2,r3,r2
 1004a10:	e0bfff05 	stb	r2,-4(fp)
 1004a14:	00804074 	movhi	r2,257
 1004a18:	10a5bd04 	addi	r2,r2,-26892
 1004a1c:	10800e17 	ldw	r2,56(r2)
 1004a20:	10800058 	cmpnei	r2,r2,1
 1004a24:	1000041e 	bne	r2,zero,1004a38 <alt_sys_init+0x1c0>
 1004a28:	00804074 	movhi	r2,257
 1004a2c:	10a5bd04 	addi	r2,r2,-26892
 1004a30:	10001115 	stw	zero,68(r2)
 1004a34:	00000e06 	br	1004a70 <alt_sys_init+0x1f8>
 1004a38:	00804074 	movhi	r2,257
 1004a3c:	10a5bd04 	addi	r2,r2,-26892
 1004a40:	10800e17 	ldw	r2,56(r2)
 1004a44:	10800098 	cmpnei	r2,r2,2
 1004a48:	1000051e 	bne	r2,zero,1004a60 <alt_sys_init+0x1e8>
 1004a4c:	00c04074 	movhi	r3,257
 1004a50:	18e5bd04 	addi	r3,r3,-26892
 1004a54:	00800044 	movi	r2,1
 1004a58:	18801115 	stw	r2,68(r3)
 1004a5c:	00000406 	br	1004a70 <alt_sys_init+0x1f8>
 1004a60:	00c04074 	movhi	r3,257
 1004a64:	18e5bd04 	addi	r3,r3,-26892
 1004a68:	00800084 	movi	r2,2
 1004a6c:	18801115 	stw	r2,68(r3)
 1004a70:	e0ffff43 	ldbu	r3,-3(fp)
 1004a74:	00800804 	movi	r2,32
 1004a78:	10c7c83a 	sub	r3,r2,r3
 1004a7c:	00bfffc4 	movi	r2,-1
 1004a80:	10c6d83a 	srl	r3,r2,r3
 1004a84:	00804074 	movhi	r2,257
 1004a88:	10a5bd04 	addi	r2,r2,-26892
 1004a8c:	10c01215 	stw	r3,72(r2)
 1004a90:	e0ffff43 	ldbu	r3,-3(fp)
 1004a94:	00804074 	movhi	r2,257
 1004a98:	10a5bd04 	addi	r2,r2,-26892
 1004a9c:	10801117 	ldw	r2,68(r2)
 1004aa0:	1887883a 	add	r3,r3,r2
 1004aa4:	00804074 	movhi	r2,257
 1004aa8:	10a5bd04 	addi	r2,r2,-26892
 1004aac:	10c01315 	stw	r3,76(r2)
 1004ab0:	e0ffff03 	ldbu	r3,-4(fp)
 1004ab4:	00800804 	movi	r2,32
 1004ab8:	10c7c83a 	sub	r3,r2,r3
 1004abc:	00bfffc4 	movi	r2,-1
 1004ac0:	10c6d83a 	srl	r3,r2,r3
 1004ac4:	00804074 	movhi	r2,257
 1004ac8:	10a5bd04 	addi	r2,r2,-26892
 1004acc:	10c01415 	stw	r3,80(r2)
 1004ad0:	01004074 	movhi	r4,257
 1004ad4:	2125bd04 	addi	r4,r4,-26892
 1004ad8:	1004afc0 	call	1004afc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 1004adc:	01004074 	movhi	r4,257
 1004ae0:	2125d204 	addi	r4,r4,-26808
 1004ae4:	1004afc0 	call	1004afc <alt_dev_reg>
}
 1004ae8:	e037883a 	mov	sp,fp
 1004aec:	dfc00117 	ldw	ra,4(sp)
 1004af0:	df000017 	ldw	fp,0(sp)
 1004af4:	dec00204 	addi	sp,sp,8
 1004af8:	f800283a 	ret

01004afc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1004afc:	defffd04 	addi	sp,sp,-12
 1004b00:	dfc00215 	stw	ra,8(sp)
 1004b04:	df000115 	stw	fp,4(sp)
 1004b08:	df000104 	addi	fp,sp,4
 1004b0c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1004b10:	e13fff17 	ldw	r4,-4(fp)
 1004b14:	01404074 	movhi	r5,257
 1004b18:	2965e304 	addi	r5,r5,-26740
 1004b1c:	10068280 	call	1006828 <alt_dev_llist_insert>
}
 1004b20:	e037883a 	mov	sp,fp
 1004b24:	dfc00117 	ldw	ra,4(sp)
 1004b28:	df000017 	ldw	fp,0(sp)
 1004b2c:	dec00204 	addi	sp,sp,8
 1004b30:	f800283a 	ret

01004b34 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1004b34:	defffa04 	addi	sp,sp,-24
 1004b38:	dfc00515 	stw	ra,20(sp)
 1004b3c:	df000415 	stw	fp,16(sp)
 1004b40:	df000404 	addi	fp,sp,16
 1004b44:	e13ffd15 	stw	r4,-12(fp)
 1004b48:	e17ffe15 	stw	r5,-8(fp)
 1004b4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004b50:	e0bffd17 	ldw	r2,-12(fp)
 1004b54:	10800017 	ldw	r2,0(r2)
 1004b58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1004b5c:	e0bffc17 	ldw	r2,-16(fp)
 1004b60:	11000a04 	addi	r4,r2,40
 1004b64:	e0bffd17 	ldw	r2,-12(fp)
 1004b68:	11c00217 	ldw	r7,8(r2)
 1004b6c:	e17ffe17 	ldw	r5,-8(fp)
 1004b70:	e1bfff17 	ldw	r6,-4(fp)
 1004b74:	100517c0 	call	100517c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1004b78:	e037883a 	mov	sp,fp
 1004b7c:	dfc00117 	ldw	ra,4(sp)
 1004b80:	df000017 	ldw	fp,0(sp)
 1004b84:	dec00204 	addi	sp,sp,8
 1004b88:	f800283a 	ret

01004b8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1004b8c:	defffa04 	addi	sp,sp,-24
 1004b90:	dfc00515 	stw	ra,20(sp)
 1004b94:	df000415 	stw	fp,16(sp)
 1004b98:	df000404 	addi	fp,sp,16
 1004b9c:	e13ffd15 	stw	r4,-12(fp)
 1004ba0:	e17ffe15 	stw	r5,-8(fp)
 1004ba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004ba8:	e0bffd17 	ldw	r2,-12(fp)
 1004bac:	10800017 	ldw	r2,0(r2)
 1004bb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1004bb4:	e0bffc17 	ldw	r2,-16(fp)
 1004bb8:	11000a04 	addi	r4,r2,40
 1004bbc:	e0bffd17 	ldw	r2,-12(fp)
 1004bc0:	11c00217 	ldw	r7,8(r2)
 1004bc4:	e17ffe17 	ldw	r5,-8(fp)
 1004bc8:	e1bfff17 	ldw	r6,-4(fp)
 1004bcc:	10053a00 	call	10053a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1004bd0:	e037883a 	mov	sp,fp
 1004bd4:	dfc00117 	ldw	ra,4(sp)
 1004bd8:	df000017 	ldw	fp,0(sp)
 1004bdc:	dec00204 	addi	sp,sp,8
 1004be0:	f800283a 	ret

01004be4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1004be4:	defffc04 	addi	sp,sp,-16
 1004be8:	dfc00315 	stw	ra,12(sp)
 1004bec:	df000215 	stw	fp,8(sp)
 1004bf0:	df000204 	addi	fp,sp,8
 1004bf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1004bf8:	e0bfff17 	ldw	r2,-4(fp)
 1004bfc:	10800017 	ldw	r2,0(r2)
 1004c00:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1004c04:	e0bffe17 	ldw	r2,-8(fp)
 1004c08:	11000a04 	addi	r4,r2,40
 1004c0c:	e0bfff17 	ldw	r2,-4(fp)
 1004c10:	11400217 	ldw	r5,8(r2)
 1004c14:	10050140 	call	1005014 <altera_avalon_jtag_uart_close>
}
 1004c18:	e037883a 	mov	sp,fp
 1004c1c:	dfc00117 	ldw	ra,4(sp)
 1004c20:	df000017 	ldw	fp,0(sp)
 1004c24:	dec00204 	addi	sp,sp,8
 1004c28:	f800283a 	ret

01004c2c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1004c2c:	defffa04 	addi	sp,sp,-24
 1004c30:	dfc00515 	stw	ra,20(sp)
 1004c34:	df000415 	stw	fp,16(sp)
 1004c38:	df000404 	addi	fp,sp,16
 1004c3c:	e13ffd15 	stw	r4,-12(fp)
 1004c40:	e17ffe15 	stw	r5,-8(fp)
 1004c44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1004c48:	e0bffd17 	ldw	r2,-12(fp)
 1004c4c:	10800017 	ldw	r2,0(r2)
 1004c50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1004c54:	e0bffc17 	ldw	r2,-16(fp)
 1004c58:	11000a04 	addi	r4,r2,40
 1004c5c:	e17ffe17 	ldw	r5,-8(fp)
 1004c60:	e1bfff17 	ldw	r6,-4(fp)
 1004c64:	10050880 	call	1005088 <altera_avalon_jtag_uart_ioctl>
}
 1004c68:	e037883a 	mov	sp,fp
 1004c6c:	dfc00117 	ldw	ra,4(sp)
 1004c70:	df000017 	ldw	fp,0(sp)
 1004c74:	dec00204 	addi	sp,sp,8
 1004c78:	f800283a 	ret

01004c7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1004c7c:	defffa04 	addi	sp,sp,-24
 1004c80:	dfc00515 	stw	ra,20(sp)
 1004c84:	df000415 	stw	fp,16(sp)
 1004c88:	df000404 	addi	fp,sp,16
 1004c8c:	e13ffd15 	stw	r4,-12(fp)
 1004c90:	e17ffe15 	stw	r5,-8(fp)
 1004c94:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004c98:	e0fffd17 	ldw	r3,-12(fp)
 1004c9c:	00800044 	movi	r2,1
 1004ca0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1004ca4:	e0bffd17 	ldw	r2,-12(fp)
 1004ca8:	10800017 	ldw	r2,0(r2)
 1004cac:	11000104 	addi	r4,r2,4
 1004cb0:	e0bffd17 	ldw	r2,-12(fp)
 1004cb4:	10800817 	ldw	r2,32(r2)
 1004cb8:	1007883a 	mov	r3,r2
 1004cbc:	2005883a 	mov	r2,r4
 1004cc0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1004cc4:	e13ffe17 	ldw	r4,-8(fp)
 1004cc8:	e17fff17 	ldw	r5,-4(fp)
 1004ccc:	d8000015 	stw	zero,0(sp)
 1004cd0:	01804034 	movhi	r6,256
 1004cd4:	31934f04 	addi	r6,r6,19772
 1004cd8:	e1fffd17 	ldw	r7,-12(fp)
 1004cdc:	1006ca40 	call	1006ca4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1004ce0:	e0bffd17 	ldw	r2,-12(fp)
 1004ce4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1004ce8:	e0bffd17 	ldw	r2,-12(fp)
 1004cec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004cf0:	00804074 	movhi	r2,257
 1004cf4:	10acfe04 	addi	r2,r2,-19464
 1004cf8:	10800017 	ldw	r2,0(r2)
 1004cfc:	100b883a 	mov	r5,r2
 1004d00:	01804034 	movhi	r6,256
 1004d04:	3193d904 	addi	r6,r6,20324
 1004d08:	e1fffd17 	ldw	r7,-12(fp)
 1004d0c:	10066b80 	call	10066b8 <alt_alarm_start>
 1004d10:	1004403a 	cmpge	r2,r2,zero
 1004d14:	1000041e 	bne	r2,zero,1004d28 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1004d18:	e0fffd17 	ldw	r3,-12(fp)
 1004d1c:	00a00034 	movhi	r2,32768
 1004d20:	10bfffc4 	addi	r2,r2,-1
 1004d24:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1004d28:	e037883a 	mov	sp,fp
 1004d2c:	dfc00117 	ldw	ra,4(sp)
 1004d30:	df000017 	ldw	fp,0(sp)
 1004d34:	dec00204 	addi	sp,sp,8
 1004d38:	f800283a 	ret

01004d3c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1004d3c:	defff804 	addi	sp,sp,-32
 1004d40:	df000715 	stw	fp,28(sp)
 1004d44:	df000704 	addi	fp,sp,28
 1004d48:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1004d4c:	e0bfff17 	ldw	r2,-4(fp)
 1004d50:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 1004d54:	e0bffe17 	ldw	r2,-8(fp)
 1004d58:	10800017 	ldw	r2,0(r2)
 1004d5c:	e0bffd15 	stw	r2,-12(fp)
 1004d60:	00000006 	br	1004d64 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004d64:	e0bffd17 	ldw	r2,-12(fp)
 1004d68:	10800104 	addi	r2,r2,4
 1004d6c:	10800037 	ldwio	r2,0(r2)
 1004d70:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1004d74:	e0bffc17 	ldw	r2,-16(fp)
 1004d78:	1080c00c 	andi	r2,r2,768
 1004d7c:	1005003a 	cmpeq	r2,r2,zero
 1004d80:	1000741e 	bne	r2,zero,1004f54 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1004d84:	e0bffc17 	ldw	r2,-16(fp)
 1004d88:	1080400c 	andi	r2,r2,256
 1004d8c:	1005003a 	cmpeq	r2,r2,zero
 1004d90:	1000351e 	bne	r2,zero,1004e68 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1004d94:	00800074 	movhi	r2,1
 1004d98:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004d9c:	e0bffe17 	ldw	r2,-8(fp)
 1004da0:	10800a17 	ldw	r2,40(r2)
 1004da4:	10800044 	addi	r2,r2,1
 1004da8:	1081ffcc 	andi	r2,r2,2047
 1004dac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1004db0:	e0bffe17 	ldw	r2,-8(fp)
 1004db4:	10c00b17 	ldw	r3,44(r2)
 1004db8:	e0bffa17 	ldw	r2,-24(fp)
 1004dbc:	18801626 	beq	r3,r2,1004e18 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1004dc0:	e0bffd17 	ldw	r2,-12(fp)
 1004dc4:	10800037 	ldwio	r2,0(r2)
 1004dc8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1004dcc:	e0bffb17 	ldw	r2,-20(fp)
 1004dd0:	10a0000c 	andi	r2,r2,32768
 1004dd4:	1005003a 	cmpeq	r2,r2,zero
 1004dd8:	10000f1e 	bne	r2,zero,1004e18 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1004ddc:	e0bffe17 	ldw	r2,-8(fp)
 1004de0:	10c00a17 	ldw	r3,40(r2)
 1004de4:	e0bffb17 	ldw	r2,-20(fp)
 1004de8:	1009883a 	mov	r4,r2
 1004dec:	e0bffe17 	ldw	r2,-8(fp)
 1004df0:	1885883a 	add	r2,r3,r2
 1004df4:	10800e04 	addi	r2,r2,56
 1004df8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004dfc:	e0bffe17 	ldw	r2,-8(fp)
 1004e00:	10800a17 	ldw	r2,40(r2)
 1004e04:	10800044 	addi	r2,r2,1
 1004e08:	10c1ffcc 	andi	r3,r2,2047
 1004e0c:	e0bffe17 	ldw	r2,-8(fp)
 1004e10:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1004e14:	003fe106 	br	1004d9c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1004e18:	e0bffb17 	ldw	r2,-20(fp)
 1004e1c:	10bfffec 	andhi	r2,r2,65535
 1004e20:	1005003a 	cmpeq	r2,r2,zero
 1004e24:	1000101e 	bne	r2,zero,1004e68 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1004e28:	e0bffe17 	ldw	r2,-8(fp)
 1004e2c:	10c00817 	ldw	r3,32(r2)
 1004e30:	00bfff84 	movi	r2,-2
 1004e34:	1886703a 	and	r3,r3,r2
 1004e38:	e0bffe17 	ldw	r2,-8(fp)
 1004e3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1004e40:	e0bffd17 	ldw	r2,-12(fp)
 1004e44:	11000104 	addi	r4,r2,4
 1004e48:	e0bffe17 	ldw	r2,-8(fp)
 1004e4c:	10800817 	ldw	r2,32(r2)
 1004e50:	1007883a 	mov	r3,r2
 1004e54:	2005883a 	mov	r2,r4
 1004e58:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004e5c:	e0bffd17 	ldw	r2,-12(fp)
 1004e60:	10800104 	addi	r2,r2,4
 1004e64:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1004e68:	e0bffc17 	ldw	r2,-16(fp)
 1004e6c:	1080800c 	andi	r2,r2,512
 1004e70:	1005003a 	cmpeq	r2,r2,zero
 1004e74:	103fbb1e 	bne	r2,zero,1004d64 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1004e78:	e0bffc17 	ldw	r2,-16(fp)
 1004e7c:	10bfffec 	andhi	r2,r2,65535
 1004e80:	1004d43a 	srli	r2,r2,16
 1004e84:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004e88:	00001506 	br	1004ee0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1004e8c:	e13ffd17 	ldw	r4,-12(fp)
 1004e90:	e0bffe17 	ldw	r2,-8(fp)
 1004e94:	10c00d17 	ldw	r3,52(r2)
 1004e98:	e0bffe17 	ldw	r2,-8(fp)
 1004e9c:	1885883a 	add	r2,r3,r2
 1004ea0:	10820e04 	addi	r2,r2,2104
 1004ea4:	10800003 	ldbu	r2,0(r2)
 1004ea8:	10c03fcc 	andi	r3,r2,255
 1004eac:	18c0201c 	xori	r3,r3,128
 1004eb0:	18ffe004 	addi	r3,r3,-128
 1004eb4:	2005883a 	mov	r2,r4
 1004eb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1004ebc:	e0bffe17 	ldw	r2,-8(fp)
 1004ec0:	10800d17 	ldw	r2,52(r2)
 1004ec4:	10800044 	addi	r2,r2,1
 1004ec8:	10c1ffcc 	andi	r3,r2,2047
 1004ecc:	e0bffe17 	ldw	r2,-8(fp)
 1004ed0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1004ed4:	e0bff917 	ldw	r2,-28(fp)
 1004ed8:	10bfffc4 	addi	r2,r2,-1
 1004edc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1004ee0:	e0bff917 	ldw	r2,-28(fp)
 1004ee4:	1005003a 	cmpeq	r2,r2,zero
 1004ee8:	1000051e 	bne	r2,zero,1004f00 <altera_avalon_jtag_uart_irq+0x1c4>
 1004eec:	e0bffe17 	ldw	r2,-8(fp)
 1004ef0:	10c00d17 	ldw	r3,52(r2)
 1004ef4:	e0bffe17 	ldw	r2,-8(fp)
 1004ef8:	10800c17 	ldw	r2,48(r2)
 1004efc:	18bfe31e 	bne	r3,r2,1004e8c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1004f00:	e0bff917 	ldw	r2,-28(fp)
 1004f04:	1005003a 	cmpeq	r2,r2,zero
 1004f08:	103f961e 	bne	r2,zero,1004d64 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1004f0c:	e0bffe17 	ldw	r2,-8(fp)
 1004f10:	10c00817 	ldw	r3,32(r2)
 1004f14:	00bfff44 	movi	r2,-3
 1004f18:	1886703a 	and	r3,r3,r2
 1004f1c:	e0bffe17 	ldw	r2,-8(fp)
 1004f20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1004f24:	e0bffe17 	ldw	r2,-8(fp)
 1004f28:	10800017 	ldw	r2,0(r2)
 1004f2c:	11000104 	addi	r4,r2,4
 1004f30:	e0bffe17 	ldw	r2,-8(fp)
 1004f34:	10800817 	ldw	r2,32(r2)
 1004f38:	1007883a 	mov	r3,r2
 1004f3c:	2005883a 	mov	r2,r4
 1004f40:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1004f44:	e0bffd17 	ldw	r2,-12(fp)
 1004f48:	10800104 	addi	r2,r2,4
 1004f4c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1004f50:	003f8406 	br	1004d64 <altera_avalon_jtag_uart_irq+0x28>
}
 1004f54:	e037883a 	mov	sp,fp
 1004f58:	df000017 	ldw	fp,0(sp)
 1004f5c:	dec00104 	addi	sp,sp,4
 1004f60:	f800283a 	ret

01004f64 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1004f64:	defffc04 	addi	sp,sp,-16
 1004f68:	df000315 	stw	fp,12(sp)
 1004f6c:	df000304 	addi	fp,sp,12
 1004f70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1004f74:	e0bfff17 	ldw	r2,-4(fp)
 1004f78:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1004f7c:	e0bffe17 	ldw	r2,-8(fp)
 1004f80:	10800017 	ldw	r2,0(r2)
 1004f84:	10800104 	addi	r2,r2,4
 1004f88:	10800037 	ldwio	r2,0(r2)
 1004f8c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1004f90:	e0bffd17 	ldw	r2,-12(fp)
 1004f94:	1081000c 	andi	r2,r2,1024
 1004f98:	1005003a 	cmpeq	r2,r2,zero
 1004f9c:	10000c1e 	bne	r2,zero,1004fd0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1004fa0:	e0bffe17 	ldw	r2,-8(fp)
 1004fa4:	10800017 	ldw	r2,0(r2)
 1004fa8:	11000104 	addi	r4,r2,4
 1004fac:	e0bffe17 	ldw	r2,-8(fp)
 1004fb0:	10800817 	ldw	r2,32(r2)
 1004fb4:	10810014 	ori	r2,r2,1024
 1004fb8:	1007883a 	mov	r3,r2
 1004fbc:	2005883a 	mov	r2,r4
 1004fc0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1004fc4:	e0bffe17 	ldw	r2,-8(fp)
 1004fc8:	10000915 	stw	zero,36(r2)
 1004fcc:	00000a06 	br	1004ff8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1004fd0:	e0bffe17 	ldw	r2,-8(fp)
 1004fd4:	10c00917 	ldw	r3,36(r2)
 1004fd8:	00a00034 	movhi	r2,32768
 1004fdc:	10bfff04 	addi	r2,r2,-4
 1004fe0:	10c00536 	bltu	r2,r3,1004ff8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1004fe4:	e0bffe17 	ldw	r2,-8(fp)
 1004fe8:	10800917 	ldw	r2,36(r2)
 1004fec:	10c00044 	addi	r3,r2,1
 1004ff0:	e0bffe17 	ldw	r2,-8(fp)
 1004ff4:	10c00915 	stw	r3,36(r2)
 1004ff8:	00804074 	movhi	r2,257
 1004ffc:	10acfe04 	addi	r2,r2,-19464
 1005000:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1005004:	e037883a 	mov	sp,fp
 1005008:	df000017 	ldw	fp,0(sp)
 100500c:	dec00104 	addi	sp,sp,4
 1005010:	f800283a 	ret

01005014 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1005014:	defffc04 	addi	sp,sp,-16
 1005018:	df000315 	stw	fp,12(sp)
 100501c:	df000304 	addi	fp,sp,12
 1005020:	e13ffd15 	stw	r4,-12(fp)
 1005024:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1005028:	00000706 	br	1005048 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100502c:	e0bffe17 	ldw	r2,-8(fp)
 1005030:	1090000c 	andi	r2,r2,16384
 1005034:	1005003a 	cmpeq	r2,r2,zero
 1005038:	1000031e 	bne	r2,zero,1005048 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100503c:	00bffd44 	movi	r2,-11
 1005040:	e0bfff15 	stw	r2,-4(fp)
 1005044:	00000b06 	br	1005074 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1005048:	e0bffd17 	ldw	r2,-12(fp)
 100504c:	10c00d17 	ldw	r3,52(r2)
 1005050:	e0bffd17 	ldw	r2,-12(fp)
 1005054:	10800c17 	ldw	r2,48(r2)
 1005058:	18800526 	beq	r3,r2,1005070 <altera_avalon_jtag_uart_close+0x5c>
 100505c:	e0bffd17 	ldw	r2,-12(fp)
 1005060:	10c00917 	ldw	r3,36(r2)
 1005064:	e0bffd17 	ldw	r2,-12(fp)
 1005068:	10800117 	ldw	r2,4(r2)
 100506c:	18bfef36 	bltu	r3,r2,100502c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1005070:	e03fff15 	stw	zero,-4(fp)
 1005074:	e0bfff17 	ldw	r2,-4(fp)
}
 1005078:	e037883a 	mov	sp,fp
 100507c:	df000017 	ldw	fp,0(sp)
 1005080:	dec00104 	addi	sp,sp,4
 1005084:	f800283a 	ret

01005088 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1005088:	defff804 	addi	sp,sp,-32
 100508c:	df000715 	stw	fp,28(sp)
 1005090:	df000704 	addi	fp,sp,28
 1005094:	e13ffb15 	stw	r4,-20(fp)
 1005098:	e17ffc15 	stw	r5,-16(fp)
 100509c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 10050a0:	00bff9c4 	movi	r2,-25
 10050a4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 10050a8:	e0bffc17 	ldw	r2,-16(fp)
 10050ac:	e0bfff15 	stw	r2,-4(fp)
 10050b0:	e0ffff17 	ldw	r3,-4(fp)
 10050b4:	189a8060 	cmpeqi	r2,r3,27137
 10050b8:	1000041e 	bne	r2,zero,10050cc <altera_avalon_jtag_uart_ioctl+0x44>
 10050bc:	e0ffff17 	ldw	r3,-4(fp)
 10050c0:	189a80a0 	cmpeqi	r2,r3,27138
 10050c4:	10001b1e 	bne	r2,zero,1005134 <altera_avalon_jtag_uart_ioctl+0xac>
 10050c8:	00002706 	br	1005168 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10050cc:	e0bffb17 	ldw	r2,-20(fp)
 10050d0:	10c00117 	ldw	r3,4(r2)
 10050d4:	00a00034 	movhi	r2,32768
 10050d8:	10bfffc4 	addi	r2,r2,-1
 10050dc:	18802226 	beq	r3,r2,1005168 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10050e0:	e0bffd17 	ldw	r2,-12(fp)
 10050e4:	10800017 	ldw	r2,0(r2)
 10050e8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10050ec:	e0bff917 	ldw	r2,-28(fp)
 10050f0:	10800090 	cmplti	r2,r2,2
 10050f4:	1000071e 	bne	r2,zero,1005114 <altera_avalon_jtag_uart_ioctl+0x8c>
 10050f8:	e0fff917 	ldw	r3,-28(fp)
 10050fc:	00a00034 	movhi	r2,32768
 1005100:	10bfffc4 	addi	r2,r2,-1
 1005104:	18800326 	beq	r3,r2,1005114 <altera_avalon_jtag_uart_ioctl+0x8c>
 1005108:	e0bff917 	ldw	r2,-28(fp)
 100510c:	e0bffe15 	stw	r2,-8(fp)
 1005110:	00000306 	br	1005120 <altera_avalon_jtag_uart_ioctl+0x98>
 1005114:	00e00034 	movhi	r3,32768
 1005118:	18ffff84 	addi	r3,r3,-2
 100511c:	e0fffe15 	stw	r3,-8(fp)
 1005120:	e0bffb17 	ldw	r2,-20(fp)
 1005124:	e0fffe17 	ldw	r3,-8(fp)
 1005128:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100512c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1005130:	00000d06 	br	1005168 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1005134:	e0bffb17 	ldw	r2,-20(fp)
 1005138:	10c00117 	ldw	r3,4(r2)
 100513c:	00a00034 	movhi	r2,32768
 1005140:	10bfffc4 	addi	r2,r2,-1
 1005144:	18800826 	beq	r3,r2,1005168 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1005148:	e13ffd17 	ldw	r4,-12(fp)
 100514c:	e0bffb17 	ldw	r2,-20(fp)
 1005150:	10c00917 	ldw	r3,36(r2)
 1005154:	e0bffb17 	ldw	r2,-20(fp)
 1005158:	10800117 	ldw	r2,4(r2)
 100515c:	1885803a 	cmpltu	r2,r3,r2
 1005160:	20800015 	stw	r2,0(r4)
      rc = 0;
 1005164:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1005168:	e0bffa17 	ldw	r2,-24(fp)
}
 100516c:	e037883a 	mov	sp,fp
 1005170:	df000017 	ldw	fp,0(sp)
 1005174:	dec00104 	addi	sp,sp,4
 1005178:	f800283a 	ret

0100517c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100517c:	defff204 	addi	sp,sp,-56
 1005180:	dfc00d15 	stw	ra,52(sp)
 1005184:	df000c15 	stw	fp,48(sp)
 1005188:	df000c04 	addi	fp,sp,48
 100518c:	e13ffb15 	stw	r4,-20(fp)
 1005190:	e17ffc15 	stw	r5,-16(fp)
 1005194:	e1bffd15 	stw	r6,-12(fp)
 1005198:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100519c:	e0bffc17 	ldw	r2,-16(fp)
 10051a0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10051a4:	00004806 	br	10052c8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 10051a8:	e0bffb17 	ldw	r2,-20(fp)
 10051ac:	10800a17 	ldw	r2,40(r2)
 10051b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10051b4:	e0bffb17 	ldw	r2,-20(fp)
 10051b8:	10800b17 	ldw	r2,44(r2)
 10051bc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 10051c0:	e0fff717 	ldw	r3,-36(fp)
 10051c4:	e0bff617 	ldw	r2,-40(fp)
 10051c8:	18800536 	bltu	r3,r2,10051e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10051cc:	e0bff717 	ldw	r2,-36(fp)
 10051d0:	e0fff617 	ldw	r3,-40(fp)
 10051d4:	10c5c83a 	sub	r2,r2,r3
 10051d8:	e0bff815 	stw	r2,-32(fp)
 10051dc:	00000406 	br	10051f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10051e0:	00820004 	movi	r2,2048
 10051e4:	e0fff617 	ldw	r3,-40(fp)
 10051e8:	10c5c83a 	sub	r2,r2,r3
 10051ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10051f0:	e0bff817 	ldw	r2,-32(fp)
 10051f4:	1005003a 	cmpeq	r2,r2,zero
 10051f8:	10001f1e 	bne	r2,zero,1005278 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10051fc:	e0fffd17 	ldw	r3,-12(fp)
 1005200:	e0bff817 	ldw	r2,-32(fp)
 1005204:	1880022e 	bgeu	r3,r2,1005210 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1005208:	e0bffd17 	ldw	r2,-12(fp)
 100520c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1005210:	e0bffb17 	ldw	r2,-20(fp)
 1005214:	10c00e04 	addi	r3,r2,56
 1005218:	e0bff617 	ldw	r2,-40(fp)
 100521c:	1887883a 	add	r3,r3,r2
 1005220:	e0bffa17 	ldw	r2,-24(fp)
 1005224:	1009883a 	mov	r4,r2
 1005228:	180b883a 	mov	r5,r3
 100522c:	e1bff817 	ldw	r6,-32(fp)
 1005230:	10026440 	call	1002644 <memcpy>
      ptr   += n;
 1005234:	e0fff817 	ldw	r3,-32(fp)
 1005238:	e0bffa17 	ldw	r2,-24(fp)
 100523c:	10c5883a 	add	r2,r2,r3
 1005240:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1005244:	e0fffd17 	ldw	r3,-12(fp)
 1005248:	e0bff817 	ldw	r2,-32(fp)
 100524c:	1885c83a 	sub	r2,r3,r2
 1005250:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005254:	e0fff617 	ldw	r3,-40(fp)
 1005258:	e0bff817 	ldw	r2,-32(fp)
 100525c:	1885883a 	add	r2,r3,r2
 1005260:	10c1ffcc 	andi	r3,r2,2047
 1005264:	e0bffb17 	ldw	r2,-20(fp)
 1005268:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100526c:	e0bffd17 	ldw	r2,-12(fp)
 1005270:	10800048 	cmpgei	r2,r2,1
 1005274:	103fcc1e 	bne	r2,zero,10051a8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1005278:	e0fffa17 	ldw	r3,-24(fp)
 100527c:	e0bffc17 	ldw	r2,-16(fp)
 1005280:	1880141e 	bne	r3,r2,10052d4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1005284:	e0bffe17 	ldw	r2,-8(fp)
 1005288:	1090000c 	andi	r2,r2,16384
 100528c:	1004c03a 	cmpne	r2,r2,zero
 1005290:	1000101e 	bne	r2,zero,10052d4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1005294:	e0bffb17 	ldw	r2,-20(fp)
 1005298:	10c00a17 	ldw	r3,40(r2)
 100529c:	e0bff717 	ldw	r2,-36(fp)
 10052a0:	1880051e 	bne	r3,r2,10052b8 <altera_avalon_jtag_uart_read+0x13c>
 10052a4:	e0bffb17 	ldw	r2,-20(fp)
 10052a8:	10c00917 	ldw	r3,36(r2)
 10052ac:	e0bffb17 	ldw	r2,-20(fp)
 10052b0:	10800117 	ldw	r2,4(r2)
 10052b4:	18bff736 	bltu	r3,r2,1005294 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10052b8:	e0bffb17 	ldw	r2,-20(fp)
 10052bc:	10c00a17 	ldw	r3,40(r2)
 10052c0:	e0bff717 	ldw	r2,-36(fp)
 10052c4:	18800326 	beq	r3,r2,10052d4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10052c8:	e0bffd17 	ldw	r2,-12(fp)
 10052cc:	10800048 	cmpgei	r2,r2,1
 10052d0:	103fb51e 	bne	r2,zero,10051a8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10052d4:	e0fffa17 	ldw	r3,-24(fp)
 10052d8:	e0bffc17 	ldw	r2,-16(fp)
 10052dc:	18801926 	beq	r3,r2,1005344 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10052e0:	0005303a 	rdctl	r2,status
 10052e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10052e8:	e0fff517 	ldw	r3,-44(fp)
 10052ec:	00bfff84 	movi	r2,-2
 10052f0:	1884703a 	and	r2,r3,r2
 10052f4:	1001703a 	wrctl	status,r2
  
  return context;
 10052f8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10052fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1005300:	e0bffb17 	ldw	r2,-20(fp)
 1005304:	10800817 	ldw	r2,32(r2)
 1005308:	10c00054 	ori	r3,r2,1
 100530c:	e0bffb17 	ldw	r2,-20(fp)
 1005310:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1005314:	e0bffb17 	ldw	r2,-20(fp)
 1005318:	10800017 	ldw	r2,0(r2)
 100531c:	11000104 	addi	r4,r2,4
 1005320:	e0bffb17 	ldw	r2,-20(fp)
 1005324:	10800817 	ldw	r2,32(r2)
 1005328:	1007883a 	mov	r3,r2
 100532c:	2005883a 	mov	r2,r4
 1005330:	10c00035 	stwio	r3,0(r2)
 1005334:	e0bff917 	ldw	r2,-28(fp)
 1005338:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100533c:	e0bff417 	ldw	r2,-48(fp)
 1005340:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1005344:	e0fffa17 	ldw	r3,-24(fp)
 1005348:	e0bffc17 	ldw	r2,-16(fp)
 100534c:	18800526 	beq	r3,r2,1005364 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1005350:	e0fffa17 	ldw	r3,-24(fp)
 1005354:	e0bffc17 	ldw	r2,-16(fp)
 1005358:	1887c83a 	sub	r3,r3,r2
 100535c:	e0ffff15 	stw	r3,-4(fp)
 1005360:	00000906 	br	1005388 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1005364:	e0bffe17 	ldw	r2,-8(fp)
 1005368:	1090000c 	andi	r2,r2,16384
 100536c:	1005003a 	cmpeq	r2,r2,zero
 1005370:	1000031e 	bne	r2,zero,1005380 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1005374:	00bffd44 	movi	r2,-11
 1005378:	e0bfff15 	stw	r2,-4(fp)
 100537c:	00000206 	br	1005388 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1005380:	00bffec4 	movi	r2,-5
 1005384:	e0bfff15 	stw	r2,-4(fp)
 1005388:	e0bfff17 	ldw	r2,-4(fp)
}
 100538c:	e037883a 	mov	sp,fp
 1005390:	dfc00117 	ldw	ra,4(sp)
 1005394:	df000017 	ldw	fp,0(sp)
 1005398:	dec00204 	addi	sp,sp,8
 100539c:	f800283a 	ret

010053a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10053a0:	defff204 	addi	sp,sp,-56
 10053a4:	dfc00d15 	stw	ra,52(sp)
 10053a8:	df000c15 	stw	fp,48(sp)
 10053ac:	df000c04 	addi	fp,sp,48
 10053b0:	e13ffb15 	stw	r4,-20(fp)
 10053b4:	e17ffc15 	stw	r5,-16(fp)
 10053b8:	e1bffd15 	stw	r6,-12(fp)
 10053bc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10053c0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10053c4:	e0bffc17 	ldw	r2,-16(fp)
 10053c8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10053cc:	00003a06 	br	10054b8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10053d0:	e0bffb17 	ldw	r2,-20(fp)
 10053d4:	10800c17 	ldw	r2,48(r2)
 10053d8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10053dc:	e0bffb17 	ldw	r2,-20(fp)
 10053e0:	10800d17 	ldw	r2,52(r2)
 10053e4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10053e8:	e0fffa17 	ldw	r3,-24(fp)
 10053ec:	e0bff917 	ldw	r2,-28(fp)
 10053f0:	1880062e 	bgeu	r3,r2,100540c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10053f4:	e0fff917 	ldw	r3,-28(fp)
 10053f8:	e0bffa17 	ldw	r2,-24(fp)
 10053fc:	1885c83a 	sub	r2,r3,r2
 1005400:	10bfffc4 	addi	r2,r2,-1
 1005404:	e0bff815 	stw	r2,-32(fp)
 1005408:	00000c06 	br	100543c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100540c:	e0bff917 	ldw	r2,-28(fp)
 1005410:	1005003a 	cmpeq	r2,r2,zero
 1005414:	1000051e 	bne	r2,zero,100542c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1005418:	00820004 	movi	r2,2048
 100541c:	e0fffa17 	ldw	r3,-24(fp)
 1005420:	10c5c83a 	sub	r2,r2,r3
 1005424:	e0bff815 	stw	r2,-32(fp)
 1005428:	00000406 	br	100543c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100542c:	0081ffc4 	movi	r2,2047
 1005430:	e0fffa17 	ldw	r3,-24(fp)
 1005434:	10c5c83a 	sub	r2,r2,r3
 1005438:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100543c:	e0bff817 	ldw	r2,-32(fp)
 1005440:	1005003a 	cmpeq	r2,r2,zero
 1005444:	10001f1e 	bne	r2,zero,10054c4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1005448:	e0fffd17 	ldw	r3,-12(fp)
 100544c:	e0bff817 	ldw	r2,-32(fp)
 1005450:	1880022e 	bgeu	r3,r2,100545c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1005454:	e0bffd17 	ldw	r2,-12(fp)
 1005458:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100545c:	e0bffb17 	ldw	r2,-20(fp)
 1005460:	10c20e04 	addi	r3,r2,2104
 1005464:	e0bffa17 	ldw	r2,-24(fp)
 1005468:	1885883a 	add	r2,r3,r2
 100546c:	e0fffc17 	ldw	r3,-16(fp)
 1005470:	1009883a 	mov	r4,r2
 1005474:	180b883a 	mov	r5,r3
 1005478:	e1bff817 	ldw	r6,-32(fp)
 100547c:	10026440 	call	1002644 <memcpy>
      ptr   += n;
 1005480:	e0fff817 	ldw	r3,-32(fp)
 1005484:	e0bffc17 	ldw	r2,-16(fp)
 1005488:	10c5883a 	add	r2,r2,r3
 100548c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1005490:	e0fffd17 	ldw	r3,-12(fp)
 1005494:	e0bff817 	ldw	r2,-32(fp)
 1005498:	1885c83a 	sub	r2,r3,r2
 100549c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10054a0:	e0fffa17 	ldw	r3,-24(fp)
 10054a4:	e0bff817 	ldw	r2,-32(fp)
 10054a8:	1885883a 	add	r2,r3,r2
 10054ac:	10c1ffcc 	andi	r3,r2,2047
 10054b0:	e0bffb17 	ldw	r2,-20(fp)
 10054b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10054b8:	e0bffd17 	ldw	r2,-12(fp)
 10054bc:	10800048 	cmpgei	r2,r2,1
 10054c0:	103fc31e 	bne	r2,zero,10053d0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10054c4:	0005303a 	rdctl	r2,status
 10054c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10054cc:	e0fff517 	ldw	r3,-44(fp)
 10054d0:	00bfff84 	movi	r2,-2
 10054d4:	1884703a 	and	r2,r3,r2
 10054d8:	1001703a 	wrctl	status,r2
  
  return context;
 10054dc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10054e0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10054e4:	e0bffb17 	ldw	r2,-20(fp)
 10054e8:	10800817 	ldw	r2,32(r2)
 10054ec:	10c00094 	ori	r3,r2,2
 10054f0:	e0bffb17 	ldw	r2,-20(fp)
 10054f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10054f8:	e0bffb17 	ldw	r2,-20(fp)
 10054fc:	10800017 	ldw	r2,0(r2)
 1005500:	11000104 	addi	r4,r2,4
 1005504:	e0bffb17 	ldw	r2,-20(fp)
 1005508:	10800817 	ldw	r2,32(r2)
 100550c:	1007883a 	mov	r3,r2
 1005510:	2005883a 	mov	r2,r4
 1005514:	10c00035 	stwio	r3,0(r2)
 1005518:	e0bff717 	ldw	r2,-36(fp)
 100551c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005520:	e0bff417 	ldw	r2,-48(fp)
 1005524:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1005528:	e0bffd17 	ldw	r2,-12(fp)
 100552c:	10800050 	cmplti	r2,r2,1
 1005530:	1000111e 	bne	r2,zero,1005578 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1005534:	e0bffe17 	ldw	r2,-8(fp)
 1005538:	1090000c 	andi	r2,r2,16384
 100553c:	1004c03a 	cmpne	r2,r2,zero
 1005540:	1000101e 	bne	r2,zero,1005584 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1005544:	e0bffb17 	ldw	r2,-20(fp)
 1005548:	10c00d17 	ldw	r3,52(r2)
 100554c:	e0bff917 	ldw	r2,-28(fp)
 1005550:	1880051e 	bne	r3,r2,1005568 <altera_avalon_jtag_uart_write+0x1c8>
 1005554:	e0bffb17 	ldw	r2,-20(fp)
 1005558:	10c00917 	ldw	r3,36(r2)
 100555c:	e0bffb17 	ldw	r2,-20(fp)
 1005560:	10800117 	ldw	r2,4(r2)
 1005564:	18bff736 	bltu	r3,r2,1005544 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1005568:	e0bffb17 	ldw	r2,-20(fp)
 100556c:	10c00d17 	ldw	r3,52(r2)
 1005570:	e0bff917 	ldw	r2,-28(fp)
 1005574:	18800326 	beq	r3,r2,1005584 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1005578:	e0bffd17 	ldw	r2,-12(fp)
 100557c:	10800048 	cmpgei	r2,r2,1
 1005580:	103fcd1e 	bne	r2,zero,10054b8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1005584:	e0fffc17 	ldw	r3,-16(fp)
 1005588:	e0bff617 	ldw	r2,-40(fp)
 100558c:	18800526 	beq	r3,r2,10055a4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1005590:	e0fffc17 	ldw	r3,-16(fp)
 1005594:	e0bff617 	ldw	r2,-40(fp)
 1005598:	1887c83a 	sub	r3,r3,r2
 100559c:	e0ffff15 	stw	r3,-4(fp)
 10055a0:	00000906 	br	10055c8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 10055a4:	e0bffe17 	ldw	r2,-8(fp)
 10055a8:	1090000c 	andi	r2,r2,16384
 10055ac:	1005003a 	cmpeq	r2,r2,zero
 10055b0:	1000031e 	bne	r2,zero,10055c0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 10055b4:	00bffd44 	movi	r2,-11
 10055b8:	e0bfff15 	stw	r2,-4(fp)
 10055bc:	00000206 	br	10055c8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10055c0:	00bffec4 	movi	r2,-5
 10055c4:	e0bfff15 	stw	r2,-4(fp)
 10055c8:	e0bfff17 	ldw	r2,-4(fp)
}
 10055cc:	e037883a 	mov	sp,fp
 10055d0:	dfc00117 	ldw	ra,4(sp)
 10055d4:	df000017 	ldw	fp,0(sp)
 10055d8:	dec00204 	addi	sp,sp,8
 10055dc:	f800283a 	ret

010055e0 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
 10055e0:	defffa04 	addi	sp,sp,-24
 10055e4:	dfc00515 	stw	ra,20(sp)
 10055e8:	df000415 	stw	fp,16(sp)
 10055ec:	df000404 	addi	fp,sp,16
 10055f0:	e13ffe15 	stw	r4,-8(fp)
 10055f4:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 10055f8:	e0bffe17 	ldw	r2,-8(fp)
 10055fc:	10800017 	ldw	r2,0(r2)
 1005600:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 1005604:	008003f4 	movhi	r2,15
 1005608:	10909004 	addi	r2,r2,16960
 100560c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 1005610:	e0bffe17 	ldw	r2,-8(fp)
 1005614:	10800803 	ldbu	r2,32(r2)
 1005618:	10803fcc 	andi	r2,r2,255
 100561c:	1080201c 	xori	r2,r2,128
 1005620:	10bfe004 	addi	r2,r2,-128
 1005624:	1004c03a 	cmpne	r2,r2,zero
 1005628:	1000161e 	bne	r2,zero,1005684 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 100562c:	00000a06 	br	1005658 <lcd_write_command+0x78>
    if (--i == 0)
 1005630:	e0bffc17 	ldw	r2,-16(fp)
 1005634:	10bfffc4 	addi	r2,r2,-1
 1005638:	e0bffc15 	stw	r2,-16(fp)
 100563c:	e0bffc17 	ldw	r2,-16(fp)
 1005640:	1004c03a 	cmpne	r2,r2,zero
 1005644:	1000041e 	bne	r2,zero,1005658 <lcd_write_command+0x78>
    {
      sp->broken = 1;
 1005648:	e0fffe17 	ldw	r3,-8(fp)
 100564c:	00800044 	movi	r2,1
 1005650:	18800805 	stb	r2,32(r3)
      return;
 1005654:	00000b06 	br	1005684 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 1005658:	e0bffd17 	ldw	r2,-12(fp)
 100565c:	10800104 	addi	r2,r2,4
 1005660:	10800037 	ldwio	r2,0(r2)
 1005664:	1080200c 	andi	r2,r2,128
 1005668:	1004c03a 	cmpne	r2,r2,zero
 100566c:	103ff01e 	bne	r2,zero,1005630 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 1005670:	01001904 	movi	r4,100
 1005674:	10072640 	call	1007264 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
 1005678:	e0bffd17 	ldw	r2,-12(fp)
 100567c:	e0ffff03 	ldbu	r3,-4(fp)
 1005680:	10c00035 	stwio	r3,0(r2)
}
 1005684:	e037883a 	mov	sp,fp
 1005688:	dfc00117 	ldw	ra,4(sp)
 100568c:	df000017 	ldw	fp,0(sp)
 1005690:	dec00204 	addi	sp,sp,8
 1005694:	f800283a 	ret

01005698 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
 1005698:	defffa04 	addi	sp,sp,-24
 100569c:	dfc00515 	stw	ra,20(sp)
 10056a0:	df000415 	stw	fp,16(sp)
 10056a4:	df000404 	addi	fp,sp,16
 10056a8:	e13ffe15 	stw	r4,-8(fp)
 10056ac:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
 10056b0:	e0bffe17 	ldw	r2,-8(fp)
 10056b4:	10800017 	ldw	r2,0(r2)
 10056b8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
 10056bc:	008003f4 	movhi	r2,15
 10056c0:	10909004 	addi	r2,r2,16960
 10056c4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
 10056c8:	e0bffe17 	ldw	r2,-8(fp)
 10056cc:	10800803 	ldbu	r2,32(r2)
 10056d0:	10803fcc 	andi	r2,r2,255
 10056d4:	1080201c 	xori	r2,r2,128
 10056d8:	10bfe004 	addi	r2,r2,-128
 10056dc:	1004c03a 	cmpne	r2,r2,zero
 10056e0:	10001d1e 	bne	r2,zero,1005758 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 10056e4:	00000a06 	br	1005710 <lcd_write_data+0x78>
    if (--i == 0)
 10056e8:	e0bffc17 	ldw	r2,-16(fp)
 10056ec:	10bfffc4 	addi	r2,r2,-1
 10056f0:	e0bffc15 	stw	r2,-16(fp)
 10056f4:	e0bffc17 	ldw	r2,-16(fp)
 10056f8:	1004c03a 	cmpne	r2,r2,zero
 10056fc:	1000041e 	bne	r2,zero,1005710 <lcd_write_data+0x78>
    {
      sp->broken = 1;
 1005700:	e0fffe17 	ldw	r3,-8(fp)
 1005704:	00800044 	movi	r2,1
 1005708:	18800805 	stb	r2,32(r3)
      return;
 100570c:	00001206 	br	1005758 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
 1005710:	e0bffd17 	ldw	r2,-12(fp)
 1005714:	10800104 	addi	r2,r2,4
 1005718:	10800037 	ldwio	r2,0(r2)
 100571c:	1080200c 	andi	r2,r2,128
 1005720:	1004c03a 	cmpne	r2,r2,zero
 1005724:	103ff01e 	bne	r2,zero,10056e8 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
 1005728:	01001904 	movi	r4,100
 100572c:	10072640 	call	1007264 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
 1005730:	e0bffd17 	ldw	r2,-12(fp)
 1005734:	10800204 	addi	r2,r2,8
 1005738:	e0ffff03 	ldbu	r3,-4(fp)
 100573c:	10c00035 	stwio	r3,0(r2)

  sp->address++;
 1005740:	e0bffe17 	ldw	r2,-8(fp)
 1005744:	108008c3 	ldbu	r2,35(r2)
 1005748:	10800044 	addi	r2,r2,1
 100574c:	1007883a 	mov	r3,r2
 1005750:	e0bffe17 	ldw	r2,-8(fp)
 1005754:	10c008c5 	stb	r3,35(r2)
}
 1005758:	e037883a 	mov	sp,fp
 100575c:	dfc00117 	ldw	ra,4(sp)
 1005760:	df000017 	ldw	fp,0(sp)
 1005764:	dec00204 	addi	sp,sp,8
 1005768:	f800283a 	ret

0100576c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
 100576c:	defffb04 	addi	sp,sp,-20
 1005770:	dfc00415 	stw	ra,16(sp)
 1005774:	df000315 	stw	fp,12(sp)
 1005778:	dc000215 	stw	r16,8(sp)
 100577c:	df000204 	addi	fp,sp,8
 1005780:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
 1005784:	e13fff17 	ldw	r4,-4(fp)
 1005788:	01400044 	movi	r5,1
 100578c:	10055e00 	call	10055e0 <lcd_write_command>

  sp->x = 0;
 1005790:	e0bfff17 	ldw	r2,-4(fp)
 1005794:	10000845 	stb	zero,33(r2)
  sp->y = 0;
 1005798:	e0bfff17 	ldw	r2,-4(fp)
 100579c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
 10057a0:	e0bfff17 	ldw	r2,-4(fp)
 10057a4:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 10057a8:	e03ffe15 	stw	zero,-8(fp)
 10057ac:	00001c06 	br	1005820 <lcd_clear_screen+0xb4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
 10057b0:	e13ffe17 	ldw	r4,-8(fp)
 10057b4:	014018c4 	movi	r5,99
 10057b8:	1003a180 	call	1003a18 <__mulsi3>
 10057bc:	10c01004 	addi	r3,r2,64
 10057c0:	e0bfff17 	ldw	r2,-4(fp)
 10057c4:	1889883a 	add	r4,r3,r2
 10057c8:	01400804 	movi	r5,32
 10057cc:	01801444 	movi	r6,81
 10057d0:	10027c40 	call	10027c4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
 10057d4:	e13ffe17 	ldw	r4,-8(fp)
 10057d8:	014018c4 	movi	r5,99
 10057dc:	1003a180 	call	1003a18 <__mulsi3>
 10057e0:	10c00c04 	addi	r3,r2,48
 10057e4:	e0bfff17 	ldw	r2,-4(fp)
 10057e8:	1889883a 	add	r4,r3,r2
 10057ec:	01400804 	movi	r5,32
 10057f0:	01800404 	movi	r6,16
 10057f4:	10027c40 	call	10027c4 <memset>
    sp->line[y].width = 0;
 10057f8:	e13ffe17 	ldw	r4,-8(fp)
 10057fc:	e43fff17 	ldw	r16,-4(fp)
 1005800:	014018c4 	movi	r5,99
 1005804:	1003a180 	call	1003a18 <__mulsi3>
 1005808:	1405883a 	add	r2,r2,r16
 100580c:	10802404 	addi	r2,r2,144
 1005810:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 1005814:	e0bffe17 	ldw	r2,-8(fp)
 1005818:	10800044 	addi	r2,r2,1
 100581c:	e0bffe15 	stw	r2,-8(fp)
 1005820:	e0bffe17 	ldw	r2,-8(fp)
 1005824:	10800090 	cmplti	r2,r2,2
 1005828:	103fe11e 	bne	r2,zero,10057b0 <lcd_clear_screen+0x44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
 100582c:	e037883a 	mov	sp,fp
 1005830:	dfc00217 	ldw	ra,8(sp)
 1005834:	df000117 	ldw	fp,4(sp)
 1005838:	dc000017 	ldw	r16,0(sp)
 100583c:	dec00304 	addi	sp,sp,12
 1005840:	f800283a 	ret

01005844 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
 1005844:	defff404 	addi	sp,sp,-48
 1005848:	dfc00b15 	stw	ra,44(sp)
 100584c:	df000a15 	stw	fp,40(sp)
 1005850:	dc800915 	stw	r18,36(sp)
 1005854:	dc400815 	stw	r17,32(sp)
 1005858:	dc000715 	stw	r16,28(sp)
 100585c:	df000704 	addi	fp,sp,28
 1005860:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
 1005864:	e0bfff17 	ldw	r2,-4(fp)
 1005868:	10800943 	ldbu	r2,37(r2)
 100586c:	10803fcc 	andi	r2,r2,255
 1005870:	1080201c 	xori	r2,r2,128
 1005874:	10bfe004 	addi	r2,r2,-128
 1005878:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 100587c:	e03ffe15 	stw	zero,-8(fp)
 1005880:	00006a06 	br	1005a2c <lcd_repaint_screen+0x1e8>
  {
    int width  = sp->line[y].width;
 1005884:	e13ffe17 	ldw	r4,-8(fp)
 1005888:	e43fff17 	ldw	r16,-4(fp)
 100588c:	014018c4 	movi	r5,99
 1005890:	1003a180 	call	1003a18 <__mulsi3>
 1005894:	1405883a 	add	r2,r2,r16
 1005898:	10802404 	addi	r2,r2,144
 100589c:	10800043 	ldbu	r2,1(r2)
 10058a0:	10803fcc 	andi	r2,r2,255
 10058a4:	1080201c 	xori	r2,r2,128
 10058a8:	10bfe004 	addi	r2,r2,-128
 10058ac:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
 10058b0:	e13ffe17 	ldw	r4,-8(fp)
 10058b4:	e43fff17 	ldw	r16,-4(fp)
 10058b8:	014018c4 	movi	r5,99
 10058bc:	1003a180 	call	1003a18 <__mulsi3>
 10058c0:	1405883a 	add	r2,r2,r16
 10058c4:	10802404 	addi	r2,r2,144
 10058c8:	10800083 	ldbu	r2,2(r2)
 10058cc:	11003fcc 	andi	r4,r2,255
 10058d0:	e17ffc17 	ldw	r5,-16(fp)
 10058d4:	1003a180 	call	1003a18 <__mulsi3>
 10058d8:	1005d23a 	srai	r2,r2,8
 10058dc:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
 10058e0:	e0fffa17 	ldw	r3,-24(fp)
 10058e4:	e0bffb17 	ldw	r2,-20(fp)
 10058e8:	18800116 	blt	r3,r2,10058f0 <lcd_repaint_screen+0xac>
      offset = 0;
 10058ec:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 10058f0:	e03ffd15 	stw	zero,-12(fp)
 10058f4:	00004706 	br	1005a14 <lcd_repaint_screen+0x1d0>
    {
      char c = sp->line[y].data[(x + offset) % width];
 10058f8:	e47ffe17 	ldw	r17,-8(fp)
 10058fc:	e0fffd17 	ldw	r3,-12(fp)
 1005900:	e0bffa17 	ldw	r2,-24(fp)
 1005904:	1889883a 	add	r4,r3,r2
 1005908:	e17ffb17 	ldw	r5,-20(fp)
 100590c:	10039a80 	call	10039a8 <__modsi3>
 1005910:	1025883a 	mov	r18,r2
 1005914:	e43fff17 	ldw	r16,-4(fp)
 1005918:	8809883a 	mov	r4,r17
 100591c:	014018c4 	movi	r5,99
 1005920:	1003a180 	call	1003a18 <__mulsi3>
 1005924:	1405883a 	add	r2,r2,r16
 1005928:	1485883a 	add	r2,r2,r18
 100592c:	10801004 	addi	r2,r2,64
 1005930:	10800003 	ldbu	r2,0(r2)
 1005934:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
 1005938:	e13ffe17 	ldw	r4,-8(fp)
 100593c:	e47ffd17 	ldw	r17,-12(fp)
 1005940:	e43fff17 	ldw	r16,-4(fp)
 1005944:	014018c4 	movi	r5,99
 1005948:	1003a180 	call	1003a18 <__mulsi3>
 100594c:	1405883a 	add	r2,r2,r16
 1005950:	1445883a 	add	r2,r2,r17
 1005954:	10800c04 	addi	r2,r2,48
 1005958:	10800003 	ldbu	r2,0(r2)
 100595c:	10c03fcc 	andi	r3,r2,255
 1005960:	18c0201c 	xori	r3,r3,128
 1005964:	18ffe004 	addi	r3,r3,-128
 1005968:	e0bff947 	ldb	r2,-27(fp)
 100596c:	18802626 	beq	r3,r2,1005a08 <lcd_repaint_screen+0x1c4>
      {
        unsigned char address = x + colstart[y];
 1005970:	e0fffe17 	ldw	r3,-8(fp)
 1005974:	d0a00b04 	addi	r2,gp,-32724
 1005978:	1885883a 	add	r2,r3,r2
 100597c:	10800003 	ldbu	r2,0(r2)
 1005980:	1007883a 	mov	r3,r2
 1005984:	e0bffd17 	ldw	r2,-12(fp)
 1005988:	1885883a 	add	r2,r3,r2
 100598c:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
 1005990:	e0fff903 	ldbu	r3,-28(fp)
 1005994:	e0bfff17 	ldw	r2,-4(fp)
 1005998:	108008c3 	ldbu	r2,35(r2)
 100599c:	10803fcc 	andi	r2,r2,255
 10059a0:	1080201c 	xori	r2,r2,128
 10059a4:	10bfe004 	addi	r2,r2,-128
 10059a8:	18800926 	beq	r3,r2,10059d0 <lcd_repaint_screen+0x18c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
 10059ac:	e0fff903 	ldbu	r3,-28(fp)
 10059b0:	00bfe004 	movi	r2,-128
 10059b4:	1884b03a 	or	r2,r3,r2
 10059b8:	11403fcc 	andi	r5,r2,255
 10059bc:	e13fff17 	ldw	r4,-4(fp)
 10059c0:	10055e00 	call	10055e0 <lcd_write_command>
          sp->address = address;
 10059c4:	e0fff903 	ldbu	r3,-28(fp)
 10059c8:	e0bfff17 	ldw	r2,-4(fp)
 10059cc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
 10059d0:	e0bff943 	ldbu	r2,-27(fp)
 10059d4:	11403fcc 	andi	r5,r2,255
 10059d8:	e13fff17 	ldw	r4,-4(fp)
 10059dc:	10056980 	call	1005698 <lcd_write_data>
        sp->line[y].visible[x] = c;
 10059e0:	e13ffe17 	ldw	r4,-8(fp)
 10059e4:	e47ffd17 	ldw	r17,-12(fp)
 10059e8:	e43fff17 	ldw	r16,-4(fp)
 10059ec:	014018c4 	movi	r5,99
 10059f0:	1003a180 	call	1003a18 <__mulsi3>
 10059f4:	1405883a 	add	r2,r2,r16
 10059f8:	1445883a 	add	r2,r2,r17
 10059fc:	10c00c04 	addi	r3,r2,48
 1005a00:	e0bff943 	ldbu	r2,-27(fp)
 1005a04:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
 1005a08:	e0bffd17 	ldw	r2,-12(fp)
 1005a0c:	10800044 	addi	r2,r2,1
 1005a10:	e0bffd15 	stw	r2,-12(fp)
 1005a14:	e0bffd17 	ldw	r2,-12(fp)
 1005a18:	10800410 	cmplti	r2,r2,16
 1005a1c:	103fb61e 	bne	r2,zero,10058f8 <lcd_repaint_screen+0xb4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 1005a20:	e0bffe17 	ldw	r2,-8(fp)
 1005a24:	10800044 	addi	r2,r2,1
 1005a28:	e0bffe15 	stw	r2,-8(fp)
 1005a2c:	e0bffe17 	ldw	r2,-8(fp)
 1005a30:	10800090 	cmplti	r2,r2,2
 1005a34:	103f931e 	bne	r2,zero,1005884 <lcd_repaint_screen+0x40>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
 1005a38:	e037883a 	mov	sp,fp
 1005a3c:	dfc00417 	ldw	ra,16(sp)
 1005a40:	df000317 	ldw	fp,12(sp)
 1005a44:	dc800217 	ldw	r18,8(sp)
 1005a48:	dc400117 	ldw	r17,4(sp)
 1005a4c:	dc000017 	ldw	r16,0(sp)
 1005a50:	dec00504 	addi	sp,sp,20
 1005a54:	f800283a 	ret

01005a58 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
 1005a58:	defffb04 	addi	sp,sp,-20
 1005a5c:	dfc00415 	stw	ra,16(sp)
 1005a60:	df000315 	stw	fp,12(sp)
 1005a64:	dc000215 	stw	r16,8(sp)
 1005a68:	df000204 	addi	fp,sp,8
 1005a6c:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 1005a70:	e03ffe15 	stw	zero,-8(fp)
 1005a74:	00002106 	br	1005afc <lcd_scroll_up+0xa4>
  {
    if (y < ALT_LCD_HEIGHT-1)
 1005a78:	e0bffe17 	ldw	r2,-8(fp)
 1005a7c:	10800048 	cmpgei	r2,r2,1
 1005a80:	1000121e 	bne	r2,zero,1005acc <lcd_scroll_up+0x74>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
 1005a84:	e13ffe17 	ldw	r4,-8(fp)
 1005a88:	014018c4 	movi	r5,99
 1005a8c:	1003a180 	call	1003a18 <__mulsi3>
 1005a90:	10c01004 	addi	r3,r2,64
 1005a94:	e0bfff17 	ldw	r2,-4(fp)
 1005a98:	18a1883a 	add	r16,r3,r2
 1005a9c:	e0bffe17 	ldw	r2,-8(fp)
 1005aa0:	11000044 	addi	r4,r2,1
 1005aa4:	014018c4 	movi	r5,99
 1005aa8:	1003a180 	call	1003a18 <__mulsi3>
 1005aac:	10c01004 	addi	r3,r2,64
 1005ab0:	e0bfff17 	ldw	r2,-4(fp)
 1005ab4:	1885883a 	add	r2,r3,r2
 1005ab8:	8009883a 	mov	r4,r16
 1005abc:	100b883a 	mov	r5,r2
 1005ac0:	01801404 	movi	r6,80
 1005ac4:	10026440 	call	1002644 <memcpy>
 1005ac8:	00000906 	br	1005af0 <lcd_scroll_up+0x98>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
 1005acc:	e13ffe17 	ldw	r4,-8(fp)
 1005ad0:	014018c4 	movi	r5,99
 1005ad4:	1003a180 	call	1003a18 <__mulsi3>
 1005ad8:	10c01004 	addi	r3,r2,64
 1005adc:	e0bfff17 	ldw	r2,-4(fp)
 1005ae0:	1889883a 	add	r4,r3,r2
 1005ae4:	01400804 	movi	r5,32
 1005ae8:	01801404 	movi	r6,80
 1005aec:	10027c40 	call	10027c4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 1005af0:	e0bffe17 	ldw	r2,-8(fp)
 1005af4:	10800044 	addi	r2,r2,1
 1005af8:	e0bffe15 	stw	r2,-8(fp)
 1005afc:	e0bffe17 	ldw	r2,-8(fp)
 1005b00:	10800090 	cmplti	r2,r2,2
 1005b04:	103fdc1e 	bne	r2,zero,1005a78 <lcd_scroll_up+0x20>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
 1005b08:	e0bfff17 	ldw	r2,-4(fp)
 1005b0c:	10800883 	ldbu	r2,34(r2)
 1005b10:	10bfffc4 	addi	r2,r2,-1
 1005b14:	1007883a 	mov	r3,r2
 1005b18:	e0bfff17 	ldw	r2,-4(fp)
 1005b1c:	10c00885 	stb	r3,34(r2)
}
 1005b20:	e037883a 	mov	sp,fp
 1005b24:	dfc00217 	ldw	ra,8(sp)
 1005b28:	df000117 	ldw	fp,4(sp)
 1005b2c:	dc000017 	ldw	r16,0(sp)
 1005b30:	dec00304 	addi	sp,sp,12
 1005b34:	f800283a 	ret

01005b38 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
 1005b38:	defff804 	addi	sp,sp,-32
 1005b3c:	dfc00715 	stw	ra,28(sp)
 1005b40:	df000615 	stw	fp,24(sp)
 1005b44:	df000604 	addi	fp,sp,24
 1005b48:	e13ffd15 	stw	r4,-12(fp)
 1005b4c:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
 1005b50:	e03ffc15 	stw	zero,-16(fp)
 1005b54:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
 1005b58:	e0bffd17 	ldw	r2,-12(fp)
 1005b5c:	10800a03 	ldbu	r2,40(r2)
 1005b60:	10803fcc 	andi	r2,r2,255
 1005b64:	1080201c 	xori	r2,r2,128
 1005b68:	10bfe004 	addi	r2,r2,-128
 1005b6c:	108016d8 	cmpnei	r2,r2,91
 1005b70:	10004d1e 	bne	r2,zero,1005ca8 <lcd_handle_escape+0x170>
  {
    char * ptr = sp->escape+1;
 1005b74:	e0bffd17 	ldw	r2,-12(fp)
 1005b78:	10800a04 	addi	r2,r2,40
 1005b7c:	10800044 	addi	r2,r2,1
 1005b80:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
 1005b84:	00000f06 	br	1005bc4 <lcd_handle_escape+0x8c>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
 1005b88:	e13ffc17 	ldw	r4,-16(fp)
 1005b8c:	01400284 	movi	r5,10
 1005b90:	1003a180 	call	1003a18 <__mulsi3>
 1005b94:	1007883a 	mov	r3,r2
 1005b98:	e0bffa17 	ldw	r2,-24(fp)
 1005b9c:	10800003 	ldbu	r2,0(r2)
 1005ba0:	10803fcc 	andi	r2,r2,255
 1005ba4:	1080201c 	xori	r2,r2,128
 1005ba8:	10bfe004 	addi	r2,r2,-128
 1005bac:	1885883a 	add	r2,r3,r2
 1005bb0:	10bff404 	addi	r2,r2,-48
 1005bb4:	e0bffc15 	stw	r2,-16(fp)
 1005bb8:	e0bffa17 	ldw	r2,-24(fp)
 1005bbc:	10800044 	addi	r2,r2,1
 1005bc0:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
 1005bc4:	e0bffa17 	ldw	r2,-24(fp)
 1005bc8:	10800003 	ldbu	r2,0(r2)
 1005bcc:	10803fcc 	andi	r2,r2,255
 1005bd0:	1080201c 	xori	r2,r2,128
 1005bd4:	10bfe004 	addi	r2,r2,-128
 1005bd8:	1007883a 	mov	r3,r2
 1005bdc:	00804074 	movhi	r2,257
 1005be0:	10a5ec04 	addi	r2,r2,-26704
 1005be4:	10800017 	ldw	r2,0(r2)
 1005be8:	1885883a 	add	r2,r3,r2
 1005bec:	10800003 	ldbu	r2,0(r2)
 1005bf0:	10803fcc 	andi	r2,r2,255
 1005bf4:	1080010c 	andi	r2,r2,4
 1005bf8:	1004c03a 	cmpne	r2,r2,zero
 1005bfc:	103fe21e 	bne	r2,zero,1005b88 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
 1005c00:	e0bffa17 	ldw	r2,-24(fp)
 1005c04:	10800003 	ldbu	r2,0(r2)
 1005c08:	10803fcc 	andi	r2,r2,255
 1005c0c:	1080201c 	xori	r2,r2,128
 1005c10:	10bfe004 	addi	r2,r2,-128
 1005c14:	10800ed8 	cmpnei	r2,r2,59
 1005c18:	1000251e 	bne	r2,zero,1005cb0 <lcd_handle_escape+0x178>
    {
      ptr++;
 1005c1c:	e0bffa17 	ldw	r2,-24(fp)
 1005c20:	10800044 	addi	r2,r2,1
 1005c24:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
 1005c28:	00000f06 	br	1005c68 <lcd_handle_escape+0x130>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
 1005c2c:	e13ffb17 	ldw	r4,-20(fp)
 1005c30:	01400284 	movi	r5,10
 1005c34:	1003a180 	call	1003a18 <__mulsi3>
 1005c38:	1007883a 	mov	r3,r2
 1005c3c:	e0bffa17 	ldw	r2,-24(fp)
 1005c40:	10800003 	ldbu	r2,0(r2)
 1005c44:	10803fcc 	andi	r2,r2,255
 1005c48:	1080201c 	xori	r2,r2,128
 1005c4c:	10bfe004 	addi	r2,r2,-128
 1005c50:	1885883a 	add	r2,r3,r2
 1005c54:	10bff404 	addi	r2,r2,-48
 1005c58:	e0bffb15 	stw	r2,-20(fp)
 1005c5c:	e0bffa17 	ldw	r2,-24(fp)
 1005c60:	10800044 	addi	r2,r2,1
 1005c64:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
 1005c68:	e0bffa17 	ldw	r2,-24(fp)
 1005c6c:	10800003 	ldbu	r2,0(r2)
 1005c70:	10803fcc 	andi	r2,r2,255
 1005c74:	1080201c 	xori	r2,r2,128
 1005c78:	10bfe004 	addi	r2,r2,-128
 1005c7c:	1007883a 	mov	r3,r2
 1005c80:	00804074 	movhi	r2,257
 1005c84:	10a5ec04 	addi	r2,r2,-26704
 1005c88:	10800017 	ldw	r2,0(r2)
 1005c8c:	1885883a 	add	r2,r3,r2
 1005c90:	10800003 	ldbu	r2,0(r2)
 1005c94:	10803fcc 	andi	r2,r2,255
 1005c98:	1080010c 	andi	r2,r2,4
 1005c9c:	1004c03a 	cmpne	r2,r2,zero
 1005ca0:	103fe21e 	bne	r2,zero,1005c2c <lcd_handle_escape+0xf4>
 1005ca4:	00000206 	br	1005cb0 <lcd_handle_escape+0x178>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
 1005ca8:	00bfffc4 	movi	r2,-1
 1005cac:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
 1005cb0:	e0bffe07 	ldb	r2,-8(fp)
 1005cb4:	e0bfff15 	stw	r2,-4(fp)
 1005cb8:	e0ffff17 	ldw	r3,-4(fp)
 1005cbc:	188012a0 	cmpeqi	r2,r3,74
 1005cc0:	10002f1e 	bne	r2,zero,1005d80 <lcd_handle_escape+0x248>
 1005cc4:	e0ffff17 	ldw	r3,-4(fp)
 1005cc8:	188012c8 	cmpgei	r2,r3,75
 1005ccc:	1000041e 	bne	r2,zero,1005ce0 <lcd_handle_escape+0x1a8>
 1005cd0:	e0ffff17 	ldw	r3,-4(fp)
 1005cd4:	18801220 	cmpeqi	r2,r3,72
 1005cd8:	1000081e 	bne	r2,zero,1005cfc <lcd_handle_escape+0x1c4>
 1005cdc:	00004a06 	br	1005e08 <lcd_handle_escape+0x2d0>
 1005ce0:	e0ffff17 	ldw	r3,-4(fp)
 1005ce4:	188012e0 	cmpeqi	r2,r3,75
 1005ce8:	10002b1e 	bne	r2,zero,1005d98 <lcd_handle_escape+0x260>
 1005cec:	e0ffff17 	ldw	r3,-4(fp)
 1005cf0:	188019a0 	cmpeqi	r2,r3,102
 1005cf4:	1000011e 	bne	r2,zero,1005cfc <lcd_handle_escape+0x1c4>
 1005cf8:	00004306 	br	1005e08 <lcd_handle_escape+0x2d0>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
 1005cfc:	e0bffb17 	ldw	r2,-20(fp)
 1005d00:	10800050 	cmplti	r2,r2,1
 1005d04:	1000051e 	bne	r2,zero,1005d1c <lcd_handle_escape+0x1e4>
      sp->x = parm2 - 1;
 1005d08:	e0bffb17 	ldw	r2,-20(fp)
 1005d0c:	10bfffc4 	addi	r2,r2,-1
 1005d10:	1007883a 	mov	r3,r2
 1005d14:	e0bffd17 	ldw	r2,-12(fp)
 1005d18:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
 1005d1c:	e0bffc17 	ldw	r2,-16(fp)
 1005d20:	10800050 	cmplti	r2,r2,1
 1005d24:	1000381e 	bne	r2,zero,1005e08 <lcd_handle_escape+0x2d0>
    {
      sp->y = parm1 - 1;
 1005d28:	e0bffc17 	ldw	r2,-16(fp)
 1005d2c:	10bfffc4 	addi	r2,r2,-1
 1005d30:	1007883a 	mov	r3,r2
 1005d34:	e0bffd17 	ldw	r2,-12(fp)
 1005d38:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
 1005d3c:	e0bffd17 	ldw	r2,-12(fp)
 1005d40:	10800883 	ldbu	r2,34(r2)
 1005d44:	10803fcc 	andi	r2,r2,255
 1005d48:	10800170 	cmpltui	r2,r2,5
 1005d4c:	1000061e 	bne	r2,zero,1005d68 <lcd_handle_escape+0x230>
        sp->y = ALT_LCD_HEIGHT * 2;
 1005d50:	e0fffd17 	ldw	r3,-12(fp)
 1005d54:	00800104 	movi	r2,4
 1005d58:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
 1005d5c:	00000206 	br	1005d68 <lcd_handle_escape+0x230>
        lcd_scroll_up(sp);
 1005d60:	e13ffd17 	ldw	r4,-12(fp)
 1005d64:	1005a580 	call	1005a58 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
 1005d68:	e0bffd17 	ldw	r2,-12(fp)
 1005d6c:	10800883 	ldbu	r2,34(r2)
 1005d70:	10803fcc 	andi	r2,r2,255
 1005d74:	108000e8 	cmpgeui	r2,r2,3
 1005d78:	103ff91e 	bne	r2,zero,1005d60 <lcd_handle_escape+0x228>
        lcd_scroll_up(sp);
    }
    break;
 1005d7c:	00002206 	br	1005e08 <lcd_handle_escape+0x2d0>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
 1005d80:	e0bffc17 	ldw	r2,-16(fp)
 1005d84:	10800098 	cmpnei	r2,r2,2
 1005d88:	10001f1e 	bne	r2,zero,1005e08 <lcd_handle_escape+0x2d0>
      lcd_clear_screen(sp);
 1005d8c:	e13ffd17 	ldw	r4,-12(fp)
 1005d90:	100576c0 	call	100576c <lcd_clear_screen>
    break;
 1005d94:	00001c06 	br	1005e08 <lcd_handle_escape+0x2d0>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
 1005d98:	e0bffc17 	ldw	r2,-16(fp)
 1005d9c:	10800048 	cmpgei	r2,r2,1
 1005da0:	1000191e 	bne	r2,zero,1005e08 <lcd_handle_escape+0x2d0>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 1005da4:	e0bffd17 	ldw	r2,-12(fp)
 1005da8:	10800843 	ldbu	r2,33(r2)
 1005dac:	10803fcc 	andi	r2,r2,255
 1005db0:	10801428 	cmpgeui	r2,r2,80
 1005db4:	1000141e 	bne	r2,zero,1005e08 <lcd_handle_escape+0x2d0>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
 1005db8:	e0bffd17 	ldw	r2,-12(fp)
 1005dbc:	10800883 	ldbu	r2,34(r2)
 1005dc0:	11003fcc 	andi	r4,r2,255
 1005dc4:	014018c4 	movi	r5,99
 1005dc8:	1003a180 	call	1003a18 <__mulsi3>
 1005dcc:	10c01004 	addi	r3,r2,64
 1005dd0:	e0bffd17 	ldw	r2,-12(fp)
 1005dd4:	1887883a 	add	r3,r3,r2
 1005dd8:	e0bffd17 	ldw	r2,-12(fp)
 1005ddc:	10800843 	ldbu	r2,33(r2)
 1005de0:	10803fcc 	andi	r2,r2,255
 1005de4:	1889883a 	add	r4,r3,r2
 1005de8:	e0bffd17 	ldw	r2,-12(fp)
 1005dec:	10800843 	ldbu	r2,33(r2)
 1005df0:	10c03fcc 	andi	r3,r2,255
 1005df4:	00801404 	movi	r2,80
 1005df8:	10c5c83a 	sub	r2,r2,r3
 1005dfc:	100d883a 	mov	r6,r2
 1005e00:	01400804 	movi	r5,32
 1005e04:	10027c40 	call	10027c4 <memset>
    }
    break;
  }
}
 1005e08:	e037883a 	mov	sp,fp
 1005e0c:	dfc00117 	ldw	ra,4(sp)
 1005e10:	df000017 	ldw	fp,0(sp)
 1005e14:	dec00204 	addi	sp,sp,8
 1005e18:	f800283a 	ret

01005e1c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
 1005e1c:	defff004 	addi	sp,sp,-64
 1005e20:	dfc00f15 	stw	ra,60(sp)
 1005e24:	df000e15 	stw	fp,56(sp)
 1005e28:	dc800d15 	stw	r18,52(sp)
 1005e2c:	dc400c15 	stw	r17,48(sp)
 1005e30:	dc000b15 	stw	r16,44(sp)
 1005e34:	df000b04 	addi	fp,sp,44
 1005e38:	e13ffc15 	stw	r4,-16(fp)
 1005e3c:	e17ffd15 	stw	r5,-12(fp)
 1005e40:	e1bffe15 	stw	r6,-8(fp)
 1005e44:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
 1005e48:	e0bffe17 	ldw	r2,-8(fp)
 1005e4c:	1007883a 	mov	r3,r2
 1005e50:	e0bffd17 	ldw	r2,-12(fp)
 1005e54:	10c5883a 	add	r2,r2,r3
 1005e58:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
 1005e5c:	e0fffc17 	ldw	r3,-16(fp)
 1005e60:	00800044 	movi	r2,1
 1005e64:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
 1005e68:	0000a306 	br	10060f8 <altera_avalon_lcd_16207_write+0x2dc>
  {
    char c = *ptr;
 1005e6c:	e0bffd17 	ldw	r2,-12(fp)
 1005e70:	10800003 	ldbu	r2,0(r2)
 1005e74:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
 1005e78:	e0bffc17 	ldw	r2,-16(fp)
 1005e7c:	10800903 	ldbu	r2,36(r2)
 1005e80:	10803fcc 	andi	r2,r2,255
 1005e84:	1080201c 	xori	r2,r2,128
 1005e88:	10bfe004 	addi	r2,r2,-128
 1005e8c:	1004803a 	cmplt	r2,r2,zero
 1005e90:	10003b1e 	bne	r2,zero,1005f80 <altera_avalon_lcd_16207_write+0x164>
    {
      unsigned int esccount = sp->esccount;
 1005e94:	e0bffc17 	ldw	r2,-16(fp)
 1005e98:	10800903 	ldbu	r2,36(r2)
 1005e9c:	10803fcc 	andi	r2,r2,255
 1005ea0:	1080201c 	xori	r2,r2,128
 1005ea4:	10bfe004 	addi	r2,r2,-128
 1005ea8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 1005eac:	e0bff717 	ldw	r2,-36(fp)
 1005eb0:	1004c03a 	cmpne	r2,r2,zero
 1005eb4:	1000031e 	bne	r2,zero,1005ec4 <altera_avalon_lcd_16207_write+0xa8>
 1005eb8:	e0bff807 	ldb	r2,-32(fp)
 1005ebc:	108016d8 	cmpnei	r2,r2,91
 1005ec0:	1000111e 	bne	r2,zero,1005f08 <altera_avalon_lcd_16207_write+0xec>
 1005ec4:	e0bff717 	ldw	r2,-36(fp)
 1005ec8:	1005003a 	cmpeq	r2,r2,zero
 1005ecc:	10001a1e 	bne	r2,zero,1005f38 <altera_avalon_lcd_16207_write+0x11c>
 1005ed0:	e0bff807 	ldb	r2,-32(fp)
 1005ed4:	1007883a 	mov	r3,r2
 1005ed8:	00804074 	movhi	r2,257
 1005edc:	10a5ec04 	addi	r2,r2,-26704
 1005ee0:	10800017 	ldw	r2,0(r2)
 1005ee4:	1885883a 	add	r2,r3,r2
 1005ee8:	10800003 	ldbu	r2,0(r2)
 1005eec:	10803fcc 	andi	r2,r2,255
 1005ef0:	1080010c 	andi	r2,r2,4
 1005ef4:	1004c03a 	cmpne	r2,r2,zero
 1005ef8:	10000f1e 	bne	r2,zero,1005f38 <altera_avalon_lcd_16207_write+0x11c>
 1005efc:	e0bff807 	ldb	r2,-32(fp)
 1005f00:	10800ee0 	cmpeqi	r2,r2,59
 1005f04:	10000c1e 	bne	r2,zero,1005f38 <altera_avalon_lcd_16207_write+0x11c>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
 1005f08:	e0fff717 	ldw	r3,-36(fp)
 1005f0c:	e0bffc17 	ldw	r2,-16(fp)
 1005f10:	1885883a 	add	r2,r3,r2
 1005f14:	10800a04 	addi	r2,r2,40
 1005f18:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
 1005f1c:	e17ff807 	ldb	r5,-32(fp)
 1005f20:	e13ffc17 	ldw	r4,-16(fp)
 1005f24:	1005b380 	call	1005b38 <lcd_handle_escape>

        sp->esccount = -1;
 1005f28:	e0fffc17 	ldw	r3,-16(fp)
 1005f2c:	00bfffc4 	movi	r2,-1
 1005f30:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
 1005f34:	00006d06 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
 1005f38:	e0bffc17 	ldw	r2,-16(fp)
 1005f3c:	10800903 	ldbu	r2,36(r2)
 1005f40:	10803fcc 	andi	r2,r2,255
 1005f44:	108001e8 	cmpgeui	r2,r2,7
 1005f48:	1000681e 	bne	r2,zero,10060ec <altera_avalon_lcd_16207_write+0x2d0>
      {
        sp->escape[esccount] = c;
 1005f4c:	e0fff717 	ldw	r3,-36(fp)
 1005f50:	e0bffc17 	ldw	r2,-16(fp)
 1005f54:	1885883a 	add	r2,r3,r2
 1005f58:	10c00a04 	addi	r3,r2,40
 1005f5c:	e0bff803 	ldbu	r2,-32(fp)
 1005f60:	18800005 	stb	r2,0(r3)
        sp->esccount++;
 1005f64:	e0bffc17 	ldw	r2,-16(fp)
 1005f68:	10800903 	ldbu	r2,36(r2)
 1005f6c:	10800044 	addi	r2,r2,1
 1005f70:	1007883a 	mov	r3,r2
 1005f74:	e0bffc17 	ldw	r2,-16(fp)
 1005f78:	10c00905 	stb	r3,36(r2)
 1005f7c:	00005b06 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>
      }
    }
    else if (c == 27) /* ESC */
 1005f80:	e0bff807 	ldb	r2,-32(fp)
 1005f84:	108006d8 	cmpnei	r2,r2,27
 1005f88:	1000031e 	bne	r2,zero,1005f98 <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->esccount = 0;
 1005f8c:	e0bffc17 	ldw	r2,-16(fp)
 1005f90:	10000905 	stb	zero,36(r2)
 1005f94:	00005506 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\r')
 1005f98:	e0bff807 	ldb	r2,-32(fp)
 1005f9c:	10800358 	cmpnei	r2,r2,13
 1005fa0:	1000031e 	bne	r2,zero,1005fb0 <altera_avalon_lcd_16207_write+0x194>
    {
      sp->x = 0;
 1005fa4:	e0bffc17 	ldw	r2,-16(fp)
 1005fa8:	10000845 	stb	zero,33(r2)
 1005fac:	00004f06 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\n')
 1005fb0:	e0bff807 	ldb	r2,-32(fp)
 1005fb4:	10800298 	cmpnei	r2,r2,10
 1005fb8:	1000101e 	bne	r2,zero,1005ffc <altera_avalon_lcd_16207_write+0x1e0>
    {
      sp->x = 0;
 1005fbc:	e0bffc17 	ldw	r2,-16(fp)
 1005fc0:	10000845 	stb	zero,33(r2)
      sp->y++;
 1005fc4:	e0bffc17 	ldw	r2,-16(fp)
 1005fc8:	10800883 	ldbu	r2,34(r2)
 1005fcc:	10800044 	addi	r2,r2,1
 1005fd0:	1007883a 	mov	r3,r2
 1005fd4:	e0bffc17 	ldw	r2,-16(fp)
 1005fd8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
 1005fdc:	e0bffc17 	ldw	r2,-16(fp)
 1005fe0:	10800883 	ldbu	r2,34(r2)
 1005fe4:	10803fcc 	andi	r2,r2,255
 1005fe8:	108000f0 	cmpltui	r2,r2,3
 1005fec:	10003f1e 	bne	r2,zero,10060ec <altera_avalon_lcd_16207_write+0x2d0>
        lcd_scroll_up(sp);
 1005ff0:	e13ffc17 	ldw	r4,-16(fp)
 1005ff4:	1005a580 	call	1005a58 <lcd_scroll_up>
 1005ff8:	00003c06 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (c == '\b')
 1005ffc:	e0bff807 	ldb	r2,-32(fp)
 1006000:	10800218 	cmpnei	r2,r2,8
 1006004:	10000c1e 	bne	r2,zero,1006038 <altera_avalon_lcd_16207_write+0x21c>
    {
      if (sp->x > 0)
 1006008:	e0bffc17 	ldw	r2,-16(fp)
 100600c:	10800843 	ldbu	r2,33(r2)
 1006010:	10803fcc 	andi	r2,r2,255
 1006014:	1005003a 	cmpeq	r2,r2,zero
 1006018:	1000341e 	bne	r2,zero,10060ec <altera_avalon_lcd_16207_write+0x2d0>
        sp->x--;
 100601c:	e0bffc17 	ldw	r2,-16(fp)
 1006020:	10800843 	ldbu	r2,33(r2)
 1006024:	10bfffc4 	addi	r2,r2,-1
 1006028:	1007883a 	mov	r3,r2
 100602c:	e0bffc17 	ldw	r2,-16(fp)
 1006030:	10c00845 	stb	r3,33(r2)
 1006034:	00002d06 	br	10060ec <altera_avalon_lcd_16207_write+0x2d0>
    }
    else if (isprint(c))
 1006038:	e0bff807 	ldb	r2,-32(fp)
 100603c:	1007883a 	mov	r3,r2
 1006040:	00804074 	movhi	r2,257
 1006044:	10a5ec04 	addi	r2,r2,-26704
 1006048:	10800017 	ldw	r2,0(r2)
 100604c:	1885883a 	add	r2,r3,r2
 1006050:	10800003 	ldbu	r2,0(r2)
 1006054:	10803fcc 	andi	r2,r2,255
 1006058:	1080201c 	xori	r2,r2,128
 100605c:	10bfe004 	addi	r2,r2,-128
 1006060:	108025cc 	andi	r2,r2,151
 1006064:	1005003a 	cmpeq	r2,r2,zero
 1006068:	1000201e 	bne	r2,zero,10060ec <altera_avalon_lcd_16207_write+0x2d0>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
 100606c:	e0bffc17 	ldw	r2,-16(fp)
 1006070:	10800883 	ldbu	r2,34(r2)
 1006074:	10803fcc 	andi	r2,r2,255
 1006078:	108000b0 	cmpltui	r2,r2,2
 100607c:	1000021e 	bne	r2,zero,1006088 <altera_avalon_lcd_16207_write+0x26c>
        lcd_scroll_up(sp);
 1006080:	e13ffc17 	ldw	r4,-16(fp)
 1006084:	1005a580 	call	1005a58 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
 1006088:	e0bffc17 	ldw	r2,-16(fp)
 100608c:	10800843 	ldbu	r2,33(r2)
 1006090:	10803fcc 	andi	r2,r2,255
 1006094:	10801428 	cmpgeui	r2,r2,80
 1006098:	10000e1e 	bne	r2,zero,10060d4 <altera_avalon_lcd_16207_write+0x2b8>
        sp->line[sp->y].data[sp->x] = c;
 100609c:	e0bffc17 	ldw	r2,-16(fp)
 10060a0:	10800883 	ldbu	r2,34(r2)
 10060a4:	11003fcc 	andi	r4,r2,255
 10060a8:	e0bffc17 	ldw	r2,-16(fp)
 10060ac:	10800843 	ldbu	r2,33(r2)
 10060b0:	14403fcc 	andi	r17,r2,255
 10060b4:	e43ffc17 	ldw	r16,-16(fp)
 10060b8:	014018c4 	movi	r5,99
 10060bc:	1003a180 	call	1003a18 <__mulsi3>
 10060c0:	1405883a 	add	r2,r2,r16
 10060c4:	1445883a 	add	r2,r2,r17
 10060c8:	10c01004 	addi	r3,r2,64
 10060cc:	e0bff803 	ldbu	r2,-32(fp)
 10060d0:	18800005 	stb	r2,0(r3)

      sp->x++;
 10060d4:	e0bffc17 	ldw	r2,-16(fp)
 10060d8:	10800843 	ldbu	r2,33(r2)
 10060dc:	10800044 	addi	r2,r2,1
 10060e0:	1007883a 	mov	r3,r2
 10060e4:	e0bffc17 	ldw	r2,-16(fp)
 10060e8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
 10060ec:	e0bffd17 	ldw	r2,-12(fp)
 10060f0:	10800044 	addi	r2,r2,1
 10060f4:	e0bffd15 	stw	r2,-12(fp)
 10060f8:	e0fffd17 	ldw	r3,-12(fp)
 10060fc:	e0bffb17 	ldw	r2,-20(fp)
 1006100:	18bf5a36 	bltu	r3,r2,1005e6c <altera_avalon_lcd_16207_write+0x50>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
 1006104:	00800404 	movi	r2,16
 1006108:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 100610c:	e03ffa15 	stw	zero,-24(fp)
 1006110:	00003906 	br	10061f8 <altera_avalon_lcd_16207_write+0x3dc>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 1006114:	00801404 	movi	r2,80
 1006118:	e0bff615 	stw	r2,-40(fp)
 100611c:	00001206 	br	1006168 <altera_avalon_lcd_16207_write+0x34c>
      if (sp->line[y].data[width-1] != ' ')
 1006120:	e13ffa17 	ldw	r4,-24(fp)
 1006124:	e0bff617 	ldw	r2,-40(fp)
 1006128:	147fffc4 	addi	r17,r2,-1
 100612c:	e43ffc17 	ldw	r16,-16(fp)
 1006130:	014018c4 	movi	r5,99
 1006134:	1003a180 	call	1003a18 <__mulsi3>
 1006138:	1405883a 	add	r2,r2,r16
 100613c:	1445883a 	add	r2,r2,r17
 1006140:	10801004 	addi	r2,r2,64
 1006144:	10800003 	ldbu	r2,0(r2)
 1006148:	10803fcc 	andi	r2,r2,255
 100614c:	1080201c 	xori	r2,r2,128
 1006150:	10bfe004 	addi	r2,r2,-128
 1006154:	10800818 	cmpnei	r2,r2,32
 1006158:	1000061e 	bne	r2,zero,1006174 <altera_avalon_lcd_16207_write+0x358>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
 100615c:	e0bff617 	ldw	r2,-40(fp)
 1006160:	10bfffc4 	addi	r2,r2,-1
 1006164:	e0bff615 	stw	r2,-40(fp)
 1006168:	e0bff617 	ldw	r2,-40(fp)
 100616c:	10800048 	cmpgei	r2,r2,1
 1006170:	103feb1e 	bne	r2,zero,1006120 <altera_avalon_lcd_16207_write+0x304>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
 1006174:	e0bff617 	ldw	r2,-40(fp)
 1006178:	10800448 	cmpgei	r2,r2,17
 100617c:	1000031e 	bne	r2,zero,100618c <altera_avalon_lcd_16207_write+0x370>
      width = ALT_LCD_WIDTH;
 1006180:	00800404 	movi	r2,16
 1006184:	e0bff615 	stw	r2,-40(fp)
 1006188:	00000306 	br	1006198 <altera_avalon_lcd_16207_write+0x37c>
    else
      width++;
 100618c:	e0bff617 	ldw	r2,-40(fp)
 1006190:	10800044 	addi	r2,r2,1
 1006194:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
 1006198:	e13ffa17 	ldw	r4,-24(fp)
 100619c:	e0bff617 	ldw	r2,-40(fp)
 10061a0:	1023883a 	mov	r17,r2
 10061a4:	e43ffc17 	ldw	r16,-16(fp)
 10061a8:	014018c4 	movi	r5,99
 10061ac:	1003a180 	call	1003a18 <__mulsi3>
 10061b0:	1405883a 	add	r2,r2,r16
 10061b4:	10802404 	addi	r2,r2,144
 10061b8:	14400045 	stb	r17,1(r2)
    if (widthmax < width)
 10061bc:	e0fff917 	ldw	r3,-28(fp)
 10061c0:	e0bff617 	ldw	r2,-40(fp)
 10061c4:	1880020e 	bge	r3,r2,10061d0 <altera_avalon_lcd_16207_write+0x3b4>
      widthmax = width;
 10061c8:	e0bff617 	ldw	r2,-40(fp)
 10061cc:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
 10061d0:	e13ffa17 	ldw	r4,-24(fp)
 10061d4:	e43ffc17 	ldw	r16,-16(fp)
 10061d8:	014018c4 	movi	r5,99
 10061dc:	1003a180 	call	1003a18 <__mulsi3>
 10061e0:	1405883a 	add	r2,r2,r16
 10061e4:	10802404 	addi	r2,r2,144
 10061e8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 10061ec:	e0bffa17 	ldw	r2,-24(fp)
 10061f0:	10800044 	addi	r2,r2,1
 10061f4:	e0bffa15 	stw	r2,-24(fp)
 10061f8:	e0bffa17 	ldw	r2,-24(fp)
 10061fc:	10800090 	cmplti	r2,r2,2
 1006200:	103fc41e 	bne	r2,zero,1006114 <altera_avalon_lcd_16207_write+0x2f8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
 1006204:	e0bff917 	ldw	r2,-28(fp)
 1006208:	10800448 	cmpgei	r2,r2,17
 100620c:	1000031e 	bne	r2,zero,100621c <altera_avalon_lcd_16207_write+0x400>
    sp->scrollmax = 0;
 1006210:	e0bffc17 	ldw	r2,-16(fp)
 1006214:	10000985 	stb	zero,38(r2)
 1006218:	00003106 	br	10062e0 <altera_avalon_lcd_16207_write+0x4c4>
  else
  {
    widthmax *= 2;
 100621c:	e0bff917 	ldw	r2,-28(fp)
 1006220:	1085883a 	add	r2,r2,r2
 1006224:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
 1006228:	e0bff917 	ldw	r2,-28(fp)
 100622c:	1007883a 	mov	r3,r2
 1006230:	e0bffc17 	ldw	r2,-16(fp)
 1006234:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 1006238:	e03ffa15 	stw	zero,-24(fp)
 100623c:	00002506 	br	10062d4 <altera_avalon_lcd_16207_write+0x4b8>
      if (sp->line[y].width > ALT_LCD_WIDTH)
 1006240:	e13ffa17 	ldw	r4,-24(fp)
 1006244:	e43ffc17 	ldw	r16,-16(fp)
 1006248:	014018c4 	movi	r5,99
 100624c:	1003a180 	call	1003a18 <__mulsi3>
 1006250:	1405883a 	add	r2,r2,r16
 1006254:	10802404 	addi	r2,r2,144
 1006258:	10800043 	ldbu	r2,1(r2)
 100625c:	10803fcc 	andi	r2,r2,255
 1006260:	1080201c 	xori	r2,r2,128
 1006264:	10bfe004 	addi	r2,r2,-128
 1006268:	10800450 	cmplti	r2,r2,17
 100626c:	1000161e 	bne	r2,zero,10062c8 <altera_avalon_lcd_16207_write+0x4ac>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
 1006270:	e4bffa17 	ldw	r18,-24(fp)
 1006274:	e13ffa17 	ldw	r4,-24(fp)
 1006278:	e43ffc17 	ldw	r16,-16(fp)
 100627c:	014018c4 	movi	r5,99
 1006280:	1003a180 	call	1003a18 <__mulsi3>
 1006284:	1405883a 	add	r2,r2,r16
 1006288:	10802404 	addi	r2,r2,144
 100628c:	10800043 	ldbu	r2,1(r2)
 1006290:	10803fcc 	andi	r2,r2,255
 1006294:	1080201c 	xori	r2,r2,128
 1006298:	10bfe004 	addi	r2,r2,-128
 100629c:	1008923a 	slli	r4,r2,8
 10062a0:	e17ff917 	ldw	r5,-28(fp)
 10062a4:	10039480 	call	1003948 <__divsi3>
 10062a8:	1023883a 	mov	r17,r2
 10062ac:	e43ffc17 	ldw	r16,-16(fp)
 10062b0:	9009883a 	mov	r4,r18
 10062b4:	014018c4 	movi	r5,99
 10062b8:	1003a180 	call	1003a18 <__mulsi3>
 10062bc:	1405883a 	add	r2,r2,r16
 10062c0:	10802404 	addi	r2,r2,144
 10062c4:	14400085 	stb	r17,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
 10062c8:	e0bffa17 	ldw	r2,-24(fp)
 10062cc:	10800044 	addi	r2,r2,1
 10062d0:	e0bffa15 	stw	r2,-24(fp)
 10062d4:	e0bffa17 	ldw	r2,-24(fp)
 10062d8:	10800090 	cmplti	r2,r2,2
 10062dc:	103fd81e 	bne	r2,zero,1006240 <altera_avalon_lcd_16207_write+0x424>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
 10062e0:	e0bffc17 	ldw	r2,-16(fp)
 10062e4:	10800943 	ldbu	r2,37(r2)
 10062e8:	10803fcc 	andi	r2,r2,255
 10062ec:	1080201c 	xori	r2,r2,128
 10062f0:	10bfe004 	addi	r2,r2,-128
 10062f4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
 10062f8:	e13ffc17 	ldw	r4,-16(fp)
 10062fc:	10058440 	call	1005844 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
 1006300:	e0bffc17 	ldw	r2,-16(fp)
 1006304:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
 1006308:	e0bffc17 	ldw	r2,-16(fp)
 100630c:	10800943 	ldbu	r2,37(r2)
 1006310:	10c03fcc 	andi	r3,r2,255
 1006314:	18c0201c 	xori	r3,r3,128
 1006318:	18ffe004 	addi	r3,r3,-128
 100631c:	e0bff517 	ldw	r2,-44(fp)
 1006320:	18800426 	beq	r3,r2,1006334 <altera_avalon_lcd_16207_write+0x518>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
 1006324:	e0fffc17 	ldw	r3,-16(fp)
 1006328:	00800044 	movi	r2,1
 100632c:	188009c5 	stb	r2,39(r3)
  }
 1006330:	003feb06 	br	10062e0 <altera_avalon_lcd_16207_write+0x4c4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
 1006334:	e0bffe17 	ldw	r2,-8(fp)
}
 1006338:	e037883a 	mov	sp,fp
 100633c:	dfc00417 	ldw	ra,16(sp)
 1006340:	df000317 	ldw	fp,12(sp)
 1006344:	dc800217 	ldw	r18,8(sp)
 1006348:	dc400117 	ldw	r17,4(sp)
 100634c:	dc000017 	ldw	r16,0(sp)
 1006350:	dec00504 	addi	sp,sp,20
 1006354:	f800283a 	ret

01006358 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
 1006358:	defffc04 	addi	sp,sp,-16
 100635c:	dfc00315 	stw	ra,12(sp)
 1006360:	df000215 	stw	fp,8(sp)
 1006364:	df000204 	addi	fp,sp,8
 1006368:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
 100636c:	e0bfff17 	ldw	r2,-4(fp)
 1006370:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
 1006374:	e0bffe17 	ldw	r2,-8(fp)
 1006378:	10800943 	ldbu	r2,37(r2)
 100637c:	10803fcc 	andi	r2,r2,255
 1006380:	1080201c 	xori	r2,r2,128
 1006384:	10bfe004 	addi	r2,r2,-128
 1006388:	10c00044 	addi	r3,r2,1
 100638c:	e0bffe17 	ldw	r2,-8(fp)
 1006390:	10800983 	ldbu	r2,38(r2)
 1006394:	10803fcc 	andi	r2,r2,255
 1006398:	1080201c 	xori	r2,r2,128
 100639c:	10bfe004 	addi	r2,r2,-128
 10063a0:	18800316 	blt	r3,r2,10063b0 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
 10063a4:	e0bffe17 	ldw	r2,-8(fp)
 10063a8:	10000945 	stb	zero,37(r2)
 10063ac:	00000606 	br	10063c8 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
 10063b0:	e0bffe17 	ldw	r2,-8(fp)
 10063b4:	10800943 	ldbu	r2,37(r2)
 10063b8:	10800044 	addi	r2,r2,1
 10063bc:	1007883a 	mov	r3,r2
 10063c0:	e0bffe17 	ldw	r2,-8(fp)
 10063c4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
 10063c8:	e0bffe17 	ldw	r2,-8(fp)
 10063cc:	10800983 	ldbu	r2,38(r2)
 10063d0:	10803fcc 	andi	r2,r2,255
 10063d4:	1080201c 	xori	r2,r2,128
 10063d8:	10bfe004 	addi	r2,r2,-128
 10063dc:	10800050 	cmplti	r2,r2,1
 10063e0:	1000091e 	bne	r2,zero,1006408 <alt_lcd_16207_timeout+0xb0>
 10063e4:	e0bffe17 	ldw	r2,-8(fp)
 10063e8:	108009c3 	ldbu	r2,39(r2)
 10063ec:	10803fcc 	andi	r2,r2,255
 10063f0:	1080201c 	xori	r2,r2,128
 10063f4:	10bfe004 	addi	r2,r2,-128
 10063f8:	1004c03a 	cmpne	r2,r2,zero
 10063fc:	1000021e 	bne	r2,zero,1006408 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
 1006400:	e13ffe17 	ldw	r4,-8(fp)
 1006404:	10058440 	call	1005844 <lcd_repaint_screen>

  return sp->period;
 1006408:	e0bffe17 	ldw	r2,-8(fp)
 100640c:	10800717 	ldw	r2,28(r2)
}
 1006410:	e037883a 	mov	sp,fp
 1006414:	dfc00117 	ldw	ra,4(sp)
 1006418:	df000017 	ldw	fp,0(sp)
 100641c:	dec00204 	addi	sp,sp,8
 1006420:	f800283a 	ret

01006424 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
 1006424:	defffc04 	addi	sp,sp,-16
 1006428:	dfc00315 	stw	ra,12(sp)
 100642c:	df000215 	stw	fp,8(sp)
 1006430:	df000204 	addi	fp,sp,8
 1006434:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
 1006438:	e0bfff17 	ldw	r2,-4(fp)
 100643c:	10800017 	ldw	r2,0(r2)
 1006440:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
 1006444:	e0bfff17 	ldw	r2,-4(fp)
 1006448:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
 100644c:	010ea604 	movi	r4,15000
 1006450:	10072640 	call	1007264 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 1006454:	e0bffe17 	ldw	r2,-8(fp)
 1006458:	1007883a 	mov	r3,r2
 100645c:	00800c04 	movi	r2,48
 1006460:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
 1006464:	01040104 	movi	r4,4100
 1006468:	10072640 	call	1007264 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 100646c:	e0bffe17 	ldw	r2,-8(fp)
 1006470:	1007883a 	mov	r3,r2
 1006474:	00800c04 	movi	r2,48
 1006478:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
 100647c:	0100fa04 	movi	r4,1000
 1006480:	10072640 	call	1007264 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
 1006484:	e0bffe17 	ldw	r2,-8(fp)
 1006488:	1007883a 	mov	r3,r2
 100648c:	00800c04 	movi	r2,48
 1006490:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
 1006494:	e13fff17 	ldw	r4,-4(fp)
 1006498:	01400e04 	movi	r5,56
 100649c:	10055e00 	call	10055e0 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
 10064a0:	e13fff17 	ldw	r4,-4(fp)
 10064a4:	01400204 	movi	r5,8
 10064a8:	10055e00 	call	10055e0 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
 10064ac:	e13fff17 	ldw	r4,-4(fp)
 10064b0:	100576c0 	call	100576c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
 10064b4:	e13fff17 	ldw	r4,-4(fp)
 10064b8:	01400184 	movi	r5,6
 10064bc:	10055e00 	call	10055e0 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
 10064c0:	e13fff17 	ldw	r4,-4(fp)
 10064c4:	01400304 	movi	r5,12
 10064c8:	10055e00 	call	10055e0 <lcd_write_command>

  sp->esccount = -1;
 10064cc:	e0ffff17 	ldw	r3,-4(fp)
 10064d0:	00bfffc4 	movi	r2,-1
 10064d4:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
 10064d8:	e0bfff17 	ldw	r2,-4(fp)
 10064dc:	11000a04 	addi	r4,r2,40
 10064e0:	000b883a 	mov	r5,zero
 10064e4:	01800204 	movi	r6,8
 10064e8:	10027c40 	call	10027c4 <memset>

  sp->scrollpos = 0;
 10064ec:	e0bfff17 	ldw	r2,-4(fp)
 10064f0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
 10064f4:	e0bfff17 	ldw	r2,-4(fp)
 10064f8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
 10064fc:	e0bfff17 	ldw	r2,-4(fp)
 1006500:	100009c5 	stb	zero,39(r2)
 1006504:	00804074 	movhi	r2,257
 1006508:	10acfe04 	addi	r2,r2,-19464
 100650c:	10800017 	ldw	r2,0(r2)
 1006510:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
 1006514:	01400284 	movi	r5,10
 1006518:	1003a080 	call	1003a08 <__udivsi3>
 100651c:	1007883a 	mov	r3,r2
 1006520:	e0bfff17 	ldw	r2,-4(fp)
 1006524:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
 1006528:	e0bfff17 	ldw	r2,-4(fp)
 100652c:	11000104 	addi	r4,r2,4
 1006530:	e0bfff17 	ldw	r2,-4(fp)
 1006534:	10800717 	ldw	r2,28(r2)
 1006538:	100b883a 	mov	r5,r2
 100653c:	01804034 	movhi	r6,256
 1006540:	3198d604 	addi	r6,r6,25432
 1006544:	e1ffff17 	ldw	r7,-4(fp)
 1006548:	10066b80 	call	10066b8 <alt_alarm_start>
}
 100654c:	e037883a 	mov	sp,fp
 1006550:	dfc00117 	ldw	ra,4(sp)
 1006554:	df000017 	ldw	fp,0(sp)
 1006558:	dec00204 	addi	sp,sp,8
 100655c:	f800283a 	ret

01006560 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1006560:	defffa04 	addi	sp,sp,-24
 1006564:	dfc00515 	stw	ra,20(sp)
 1006568:	df000415 	stw	fp,16(sp)
 100656c:	df000404 	addi	fp,sp,16
 1006570:	e13ffd15 	stw	r4,-12(fp)
 1006574:	e17ffe15 	stw	r5,-8(fp)
 1006578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
 100657c:	e0bffd17 	ldw	r2,-12(fp)
 1006580:	10800017 	ldw	r2,0(r2)
 1006584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
 1006588:	e0bffc17 	ldw	r2,-16(fp)
 100658c:	11000a04 	addi	r4,r2,40
 1006590:	e0bffd17 	ldw	r2,-12(fp)
 1006594:	11c00217 	ldw	r7,8(r2)
 1006598:	e17ffe17 	ldw	r5,-8(fp)
 100659c:	e1bfff17 	ldw	r6,-4(fp)
 10065a0:	1005e1c0 	call	1005e1c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
 10065a4:	e037883a 	mov	sp,fp
 10065a8:	dfc00117 	ldw	ra,4(sp)
 10065ac:	df000017 	ldw	fp,0(sp)
 10065b0:	dec00204 	addi	sp,sp,8
 10065b4:	f800283a 	ret

010065b8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10065b8:	defffa04 	addi	sp,sp,-24
 10065bc:	dfc00515 	stw	ra,20(sp)
 10065c0:	df000415 	stw	fp,16(sp)
 10065c4:	df000404 	addi	fp,sp,16
 10065c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10065cc:	e0bfff17 	ldw	r2,-4(fp)
 10065d0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10065d4:	e0bfff17 	ldw	r2,-4(fp)
 10065d8:	10800104 	addi	r2,r2,4
 10065dc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10065e0:	0005303a 	rdctl	r2,status
 10065e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10065e8:	e0fffd17 	ldw	r3,-12(fp)
 10065ec:	00bfff84 	movi	r2,-2
 10065f0:	1884703a 	and	r2,r3,r2
 10065f4:	1001703a 	wrctl	status,r2
  
  return context;
 10065f8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10065fc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 1006600:	10071580 	call	1007158 <alt_tick>
 1006604:	e0bffe17 	ldw	r2,-8(fp)
 1006608:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100660c:	e0bffc17 	ldw	r2,-16(fp)
 1006610:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1006614:	e037883a 	mov	sp,fp
 1006618:	dfc00117 	ldw	ra,4(sp)
 100661c:	df000017 	ldw	fp,0(sp)
 1006620:	dec00204 	addi	sp,sp,8
 1006624:	f800283a 	ret

01006628 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1006628:	defff804 	addi	sp,sp,-32
 100662c:	dfc00715 	stw	ra,28(sp)
 1006630:	df000615 	stw	fp,24(sp)
 1006634:	df000604 	addi	fp,sp,24
 1006638:	e13ffc15 	stw	r4,-16(fp)
 100663c:	e17ffd15 	stw	r5,-12(fp)
 1006640:	e1bffe15 	stw	r6,-8(fp)
 1006644:	e1ffff15 	stw	r7,-4(fp)
 1006648:	e0bfff17 	ldw	r2,-4(fp)
 100664c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1006650:	00804074 	movhi	r2,257
 1006654:	10acfe04 	addi	r2,r2,-19464
 1006658:	10800017 	ldw	r2,0(r2)
 100665c:	1004c03a 	cmpne	r2,r2,zero
 1006660:	1000041e 	bne	r2,zero,1006674 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1006664:	00c04074 	movhi	r3,257
 1006668:	18ecfe04 	addi	r3,r3,-19464
 100666c:	e0bffb17 	ldw	r2,-20(fp)
 1006670:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1006674:	e0bffc17 	ldw	r2,-16(fp)
 1006678:	10800104 	addi	r2,r2,4
 100667c:	1007883a 	mov	r3,r2
 1006680:	008001c4 	movi	r2,7
 1006684:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1006688:	d8000015 	stw	zero,0(sp)
 100668c:	e13ffd17 	ldw	r4,-12(fp)
 1006690:	e17ffe17 	ldw	r5,-8(fp)
 1006694:	01804034 	movhi	r6,256
 1006698:	31996e04 	addi	r6,r6,26040
 100669c:	e1fffc17 	ldw	r7,-16(fp)
 10066a0:	1006ca40 	call	1006ca4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10066a4:	e037883a 	mov	sp,fp
 10066a8:	dfc00117 	ldw	ra,4(sp)
 10066ac:	df000017 	ldw	fp,0(sp)
 10066b0:	dec00204 	addi	sp,sp,8
 10066b4:	f800283a 	ret

010066b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10066b8:	defff404 	addi	sp,sp,-48
 10066bc:	df000b15 	stw	fp,44(sp)
 10066c0:	df000b04 	addi	fp,sp,44
 10066c4:	e13ffb15 	stw	r4,-20(fp)
 10066c8:	e17ffc15 	stw	r5,-16(fp)
 10066cc:	e1bffd15 	stw	r6,-12(fp)
 10066d0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10066d4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10066d8:	00804074 	movhi	r2,257
 10066dc:	10acfe04 	addi	r2,r2,-19464
 10066e0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10066e4:	1005003a 	cmpeq	r2,r2,zero
 10066e8:	1000411e 	bne	r2,zero,10067f0 <alt_alarm_start+0x138>
  {
    if (alarm)
 10066ec:	e0bffb17 	ldw	r2,-20(fp)
 10066f0:	1005003a 	cmpeq	r2,r2,zero
 10066f4:	10003b1e 	bne	r2,zero,10067e4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10066f8:	e0fffb17 	ldw	r3,-20(fp)
 10066fc:	e0bffd17 	ldw	r2,-12(fp)
 1006700:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1006704:	e0fffb17 	ldw	r3,-20(fp)
 1006708:	e0bffe17 	ldw	r2,-8(fp)
 100670c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006710:	0005303a 	rdctl	r2,status
 1006714:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006718:	e0fff817 	ldw	r3,-32(fp)
 100671c:	00bfff84 	movi	r2,-2
 1006720:	1884703a 	and	r2,r3,r2
 1006724:	1001703a 	wrctl	status,r2
  
  return context;
 1006728:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100672c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1006730:	00804074 	movhi	r2,257
 1006734:	10acff04 	addi	r2,r2,-19460
 1006738:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100673c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1006740:	e0fffc17 	ldw	r3,-16(fp)
 1006744:	e0bff917 	ldw	r2,-28(fp)
 1006748:	1885883a 	add	r2,r3,r2
 100674c:	10c00044 	addi	r3,r2,1
 1006750:	e0bffb17 	ldw	r2,-20(fp)
 1006754:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1006758:	e0bffb17 	ldw	r2,-20(fp)
 100675c:	10c00217 	ldw	r3,8(r2)
 1006760:	e0bff917 	ldw	r2,-28(fp)
 1006764:	1880042e 	bgeu	r3,r2,1006778 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1006768:	e0fffb17 	ldw	r3,-20(fp)
 100676c:	00800044 	movi	r2,1
 1006770:	18800405 	stb	r2,16(r3)
 1006774:	00000206 	br	1006780 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1006778:	e0bffb17 	ldw	r2,-20(fp)
 100677c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1006780:	e0fffb17 	ldw	r3,-20(fp)
 1006784:	00804074 	movhi	r2,257
 1006788:	10a5ea04 	addi	r2,r2,-26712
 100678c:	e0bff615 	stw	r2,-40(fp)
 1006790:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006794:	e0fff717 	ldw	r3,-36(fp)
 1006798:	e0bff617 	ldw	r2,-40(fp)
 100679c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10067a0:	e0bff617 	ldw	r2,-40(fp)
 10067a4:	10c00017 	ldw	r3,0(r2)
 10067a8:	e0bff717 	ldw	r2,-36(fp)
 10067ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10067b0:	e0bff617 	ldw	r2,-40(fp)
 10067b4:	10c00017 	ldw	r3,0(r2)
 10067b8:	e0bff717 	ldw	r2,-36(fp)
 10067bc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10067c0:	e0fff617 	ldw	r3,-40(fp)
 10067c4:	e0bff717 	ldw	r2,-36(fp)
 10067c8:	18800015 	stw	r2,0(r3)
 10067cc:	e0bffa17 	ldw	r2,-24(fp)
 10067d0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10067d4:	e0bff517 	ldw	r2,-44(fp)
 10067d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10067dc:	e03fff15 	stw	zero,-4(fp)
 10067e0:	00000506 	br	10067f8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 10067e4:	00bffa84 	movi	r2,-22
 10067e8:	e0bfff15 	stw	r2,-4(fp)
 10067ec:	00000206 	br	10067f8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 10067f0:	00bfde84 	movi	r2,-134
 10067f4:	e0bfff15 	stw	r2,-4(fp)
 10067f8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10067fc:	e037883a 	mov	sp,fp
 1006800:	df000017 	ldw	fp,0(sp)
 1006804:	dec00104 	addi	sp,sp,4
 1006808:	f800283a 	ret

0100680c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100680c:	deffff04 	addi	sp,sp,-4
 1006810:	df000015 	stw	fp,0(sp)
 1006814:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1006818:	e037883a 	mov	sp,fp
 100681c:	df000017 	ldw	fp,0(sp)
 1006820:	dec00104 	addi	sp,sp,4
 1006824:	f800283a 	ret

01006828 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1006828:	defff904 	addi	sp,sp,-28
 100682c:	dfc00615 	stw	ra,24(sp)
 1006830:	df000515 	stw	fp,20(sp)
 1006834:	df000504 	addi	fp,sp,20
 1006838:	e13ffd15 	stw	r4,-12(fp)
 100683c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1006840:	e0bffd17 	ldw	r2,-12(fp)
 1006844:	1005003a 	cmpeq	r2,r2,zero
 1006848:	1000041e 	bne	r2,zero,100685c <alt_dev_llist_insert+0x34>
 100684c:	e0bffd17 	ldw	r2,-12(fp)
 1006850:	10800217 	ldw	r2,8(r2)
 1006854:	1004c03a 	cmpne	r2,r2,zero
 1006858:	1000071e 	bne	r2,zero,1006878 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100685c:	10068dc0 	call	10068dc <alt_get_errno>
 1006860:	1007883a 	mov	r3,r2
 1006864:	00800584 	movi	r2,22
 1006868:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100686c:	00bffa84 	movi	r2,-22
 1006870:	e0bfff15 	stw	r2,-4(fp)
 1006874:	00001306 	br	10068c4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1006878:	e0fffd17 	ldw	r3,-12(fp)
 100687c:	e0bffe17 	ldw	r2,-8(fp)
 1006880:	e0bffb15 	stw	r2,-20(fp)
 1006884:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006888:	e0fffc17 	ldw	r3,-16(fp)
 100688c:	e0bffb17 	ldw	r2,-20(fp)
 1006890:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1006894:	e0bffb17 	ldw	r2,-20(fp)
 1006898:	10c00017 	ldw	r3,0(r2)
 100689c:	e0bffc17 	ldw	r2,-16(fp)
 10068a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10068a4:	e0bffb17 	ldw	r2,-20(fp)
 10068a8:	10c00017 	ldw	r3,0(r2)
 10068ac:	e0bffc17 	ldw	r2,-16(fp)
 10068b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10068b4:	e0fffb17 	ldw	r3,-20(fp)
 10068b8:	e0bffc17 	ldw	r2,-16(fp)
 10068bc:	18800015 	stw	r2,0(r3)

  return 0;  
 10068c0:	e03fff15 	stw	zero,-4(fp)
 10068c4:	e0bfff17 	ldw	r2,-4(fp)
}
 10068c8:	e037883a 	mov	sp,fp
 10068cc:	dfc00117 	ldw	ra,4(sp)
 10068d0:	df000017 	ldw	fp,0(sp)
 10068d4:	dec00204 	addi	sp,sp,8
 10068d8:	f800283a 	ret

010068dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10068dc:	defffd04 	addi	sp,sp,-12
 10068e0:	dfc00215 	stw	ra,8(sp)
 10068e4:	df000115 	stw	fp,4(sp)
 10068e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10068ec:	00804074 	movhi	r2,257
 10068f0:	10a5e604 	addi	r2,r2,-26728
 10068f4:	10800017 	ldw	r2,0(r2)
 10068f8:	1005003a 	cmpeq	r2,r2,zero
 10068fc:	1000061e 	bne	r2,zero,1006918 <alt_get_errno+0x3c>
 1006900:	00804074 	movhi	r2,257
 1006904:	10a5e604 	addi	r2,r2,-26728
 1006908:	10800017 	ldw	r2,0(r2)
 100690c:	103ee83a 	callr	r2
 1006910:	e0bfff15 	stw	r2,-4(fp)
 1006914:	00000306 	br	1006924 <alt_get_errno+0x48>
 1006918:	00804074 	movhi	r2,257
 100691c:	10acf604 	addi	r2,r2,-19496
 1006920:	e0bfff15 	stw	r2,-4(fp)
 1006924:	e0bfff17 	ldw	r2,-4(fp)
}
 1006928:	e037883a 	mov	sp,fp
 100692c:	dfc00117 	ldw	ra,4(sp)
 1006930:	df000017 	ldw	fp,0(sp)
 1006934:	dec00204 	addi	sp,sp,8
 1006938:	f800283a 	ret

0100693c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100693c:	defffd04 	addi	sp,sp,-12
 1006940:	dfc00215 	stw	ra,8(sp)
 1006944:	df000115 	stw	fp,4(sp)
 1006948:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100694c:	00bfff04 	movi	r2,-4
 1006950:	00c04034 	movhi	r3,256
 1006954:	18de0704 	addi	r3,r3,30748
 1006958:	1885883a 	add	r2,r3,r2
 100695c:	e0bfff15 	stw	r2,-4(fp)
 1006960:	00000606 	br	100697c <_do_ctors+0x40>
        (*ctor) (); 
 1006964:	e0bfff17 	ldw	r2,-4(fp)
 1006968:	10800017 	ldw	r2,0(r2)
 100696c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1006970:	e0bfff17 	ldw	r2,-4(fp)
 1006974:	10bfff04 	addi	r2,r2,-4
 1006978:	e0bfff15 	stw	r2,-4(fp)
 100697c:	e0ffff17 	ldw	r3,-4(fp)
 1006980:	00804034 	movhi	r2,256
 1006984:	109e0604 	addi	r2,r2,30744
 1006988:	18bff62e 	bgeu	r3,r2,1006964 <_do_ctors+0x28>
        (*ctor) (); 
}
 100698c:	e037883a 	mov	sp,fp
 1006990:	dfc00117 	ldw	ra,4(sp)
 1006994:	df000017 	ldw	fp,0(sp)
 1006998:	dec00204 	addi	sp,sp,8
 100699c:	f800283a 	ret

010069a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10069a0:	defffd04 	addi	sp,sp,-12
 10069a4:	dfc00215 	stw	ra,8(sp)
 10069a8:	df000115 	stw	fp,4(sp)
 10069ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10069b0:	00bfff04 	movi	r2,-4
 10069b4:	00c04034 	movhi	r3,256
 10069b8:	18de0704 	addi	r3,r3,30748
 10069bc:	1885883a 	add	r2,r3,r2
 10069c0:	e0bfff15 	stw	r2,-4(fp)
 10069c4:	00000606 	br	10069e0 <_do_dtors+0x40>
        (*dtor) (); 
 10069c8:	e0bfff17 	ldw	r2,-4(fp)
 10069cc:	10800017 	ldw	r2,0(r2)
 10069d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10069d4:	e0bfff17 	ldw	r2,-4(fp)
 10069d8:	10bfff04 	addi	r2,r2,-4
 10069dc:	e0bfff15 	stw	r2,-4(fp)
 10069e0:	e0ffff17 	ldw	r3,-4(fp)
 10069e4:	00804034 	movhi	r2,256
 10069e8:	109e0704 	addi	r2,r2,30748
 10069ec:	18bff62e 	bgeu	r3,r2,10069c8 <_do_dtors+0x28>
        (*dtor) (); 
}
 10069f0:	e037883a 	mov	sp,fp
 10069f4:	dfc00117 	ldw	ra,4(sp)
 10069f8:	df000017 	ldw	fp,0(sp)
 10069fc:	dec00204 	addi	sp,sp,8
 1006a00:	f800283a 	ret

01006a04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1006a04:	defff904 	addi	sp,sp,-28
 1006a08:	dfc00615 	stw	ra,24(sp)
 1006a0c:	df000515 	stw	fp,20(sp)
 1006a10:	df000504 	addi	fp,sp,20
 1006a14:	e13ffd15 	stw	r4,-12(fp)
 1006a18:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1006a1c:	e0bffe17 	ldw	r2,-8(fp)
 1006a20:	10800017 	ldw	r2,0(r2)
 1006a24:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1006a28:	e13ffd17 	ldw	r4,-12(fp)
 1006a2c:	10034340 	call	1003434 <strlen>
 1006a30:	10800044 	addi	r2,r2,1
 1006a34:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006a38:	00000d06 	br	1006a70 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1006a3c:	e0bffc17 	ldw	r2,-16(fp)
 1006a40:	11000217 	ldw	r4,8(r2)
 1006a44:	e1bffb17 	ldw	r6,-20(fp)
 1006a48:	e17ffd17 	ldw	r5,-12(fp)
 1006a4c:	100745c0 	call	100745c <memcmp>
 1006a50:	1004c03a 	cmpne	r2,r2,zero
 1006a54:	1000031e 	bne	r2,zero,1006a64 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1006a58:	e0bffc17 	ldw	r2,-16(fp)
 1006a5c:	e0bfff15 	stw	r2,-4(fp)
 1006a60:	00000706 	br	1006a80 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1006a64:	e0bffc17 	ldw	r2,-16(fp)
 1006a68:	10800017 	ldw	r2,0(r2)
 1006a6c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006a70:	e0fffe17 	ldw	r3,-8(fp)
 1006a74:	e0bffc17 	ldw	r2,-16(fp)
 1006a78:	10fff01e 	bne	r2,r3,1006a3c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1006a7c:	e03fff15 	stw	zero,-4(fp)
 1006a80:	e0bfff17 	ldw	r2,-4(fp)
}
 1006a84:	e037883a 	mov	sp,fp
 1006a88:	dfc00117 	ldw	ra,4(sp)
 1006a8c:	df000017 	ldw	fp,0(sp)
 1006a90:	dec00204 	addi	sp,sp,8
 1006a94:	f800283a 	ret

01006a98 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1006a98:	defffa04 	addi	sp,sp,-24
 1006a9c:	dfc00515 	stw	ra,20(sp)
 1006aa0:	df000415 	stw	fp,16(sp)
 1006aa4:	df000404 	addi	fp,sp,16
 1006aa8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1006aac:	00804074 	movhi	r2,257
 1006ab0:	10a5e104 	addi	r2,r2,-26748
 1006ab4:	10800017 	ldw	r2,0(r2)
 1006ab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1006abc:	00003306 	br	1006b8c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1006ac0:	e0bffd17 	ldw	r2,-12(fp)
 1006ac4:	11000217 	ldw	r4,8(r2)
 1006ac8:	10034340 	call	1003434 <strlen>
 1006acc:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1006ad0:	e0bffd17 	ldw	r2,-12(fp)
 1006ad4:	10c00217 	ldw	r3,8(r2)
 1006ad8:	e0bffc17 	ldw	r2,-16(fp)
 1006adc:	1885883a 	add	r2,r3,r2
 1006ae0:	10bfffc4 	addi	r2,r2,-1
 1006ae4:	10800003 	ldbu	r2,0(r2)
 1006ae8:	10803fcc 	andi	r2,r2,255
 1006aec:	1080201c 	xori	r2,r2,128
 1006af0:	10bfe004 	addi	r2,r2,-128
 1006af4:	10800bd8 	cmpnei	r2,r2,47
 1006af8:	1000031e 	bne	r2,zero,1006b08 <alt_find_file+0x70>
    {
      len -= 1;
 1006afc:	e0bffc17 	ldw	r2,-16(fp)
 1006b00:	10bfffc4 	addi	r2,r2,-1
 1006b04:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1006b08:	e0bffc17 	ldw	r2,-16(fp)
 1006b0c:	1007883a 	mov	r3,r2
 1006b10:	e0bffe17 	ldw	r2,-8(fp)
 1006b14:	1885883a 	add	r2,r3,r2
 1006b18:	10800003 	ldbu	r2,0(r2)
 1006b1c:	10803fcc 	andi	r2,r2,255
 1006b20:	1080201c 	xori	r2,r2,128
 1006b24:	10bfe004 	addi	r2,r2,-128
 1006b28:	10800be0 	cmpeqi	r2,r2,47
 1006b2c:	10000a1e 	bne	r2,zero,1006b58 <alt_find_file+0xc0>
 1006b30:	e0bffc17 	ldw	r2,-16(fp)
 1006b34:	1007883a 	mov	r3,r2
 1006b38:	e0bffe17 	ldw	r2,-8(fp)
 1006b3c:	1885883a 	add	r2,r3,r2
 1006b40:	10800003 	ldbu	r2,0(r2)
 1006b44:	10803fcc 	andi	r2,r2,255
 1006b48:	1080201c 	xori	r2,r2,128
 1006b4c:	10bfe004 	addi	r2,r2,-128
 1006b50:	1004c03a 	cmpne	r2,r2,zero
 1006b54:	10000a1e 	bne	r2,zero,1006b80 <alt_find_file+0xe8>
 1006b58:	e0bffd17 	ldw	r2,-12(fp)
 1006b5c:	11000217 	ldw	r4,8(r2)
 1006b60:	e1bffc17 	ldw	r6,-16(fp)
 1006b64:	e17ffe17 	ldw	r5,-8(fp)
 1006b68:	100745c0 	call	100745c <memcmp>
 1006b6c:	1004c03a 	cmpne	r2,r2,zero
 1006b70:	1000031e 	bne	r2,zero,1006b80 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1006b74:	e0bffd17 	ldw	r2,-12(fp)
 1006b78:	e0bfff15 	stw	r2,-4(fp)
 1006b7c:	00000806 	br	1006ba0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1006b80:	e0bffd17 	ldw	r2,-12(fp)
 1006b84:	10800017 	ldw	r2,0(r2)
 1006b88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1006b8c:	00c04074 	movhi	r3,257
 1006b90:	18e5e104 	addi	r3,r3,-26748
 1006b94:	e0bffd17 	ldw	r2,-12(fp)
 1006b98:	10ffc91e 	bne	r2,r3,1006ac0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1006b9c:	e03fff15 	stw	zero,-4(fp)
 1006ba0:	e0bfff17 	ldw	r2,-4(fp)
}
 1006ba4:	e037883a 	mov	sp,fp
 1006ba8:	dfc00117 	ldw	ra,4(sp)
 1006bac:	df000017 	ldw	fp,0(sp)
 1006bb0:	dec00204 	addi	sp,sp,8
 1006bb4:	f800283a 	ret

01006bb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1006bb8:	defffa04 	addi	sp,sp,-24
 1006bbc:	dfc00515 	stw	ra,20(sp)
 1006bc0:	df000415 	stw	fp,16(sp)
 1006bc4:	dc000315 	stw	r16,12(sp)
 1006bc8:	df000304 	addi	fp,sp,12
 1006bcc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1006bd0:	00bffa04 	movi	r2,-24
 1006bd4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1006bd8:	e03ffe15 	stw	zero,-8(fp)
 1006bdc:	00002006 	br	1006c60 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1006be0:	e13ffe17 	ldw	r4,-8(fp)
 1006be4:	04004074 	movhi	r16,257
 1006be8:	8420f104 	addi	r16,r16,-31804
 1006bec:	01400304 	movi	r5,12
 1006bf0:	1003a180 	call	1003a18 <__mulsi3>
 1006bf4:	1405883a 	add	r2,r2,r16
 1006bf8:	10800017 	ldw	r2,0(r2)
 1006bfc:	1004c03a 	cmpne	r2,r2,zero
 1006c00:	1000141e 	bne	r2,zero,1006c54 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1006c04:	e13ffe17 	ldw	r4,-8(fp)
 1006c08:	04004074 	movhi	r16,257
 1006c0c:	8420f104 	addi	r16,r16,-31804
 1006c10:	01400304 	movi	r5,12
 1006c14:	1003a180 	call	1003a18 <__mulsi3>
 1006c18:	1407883a 	add	r3,r2,r16
 1006c1c:	e0bfff17 	ldw	r2,-4(fp)
 1006c20:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1006c24:	00804074 	movhi	r2,257
 1006c28:	10a5e504 	addi	r2,r2,-26732
 1006c2c:	10c00017 	ldw	r3,0(r2)
 1006c30:	e0bffe17 	ldw	r2,-8(fp)
 1006c34:	1880040e 	bge	r3,r2,1006c48 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1006c38:	00c04074 	movhi	r3,257
 1006c3c:	18e5e504 	addi	r3,r3,-26732
 1006c40:	e0bffe17 	ldw	r2,-8(fp)
 1006c44:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1006c48:	e0bffe17 	ldw	r2,-8(fp)
 1006c4c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1006c50:	00000606 	br	1006c6c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1006c54:	e0bffe17 	ldw	r2,-8(fp)
 1006c58:	10800044 	addi	r2,r2,1
 1006c5c:	e0bffe15 	stw	r2,-8(fp)
 1006c60:	e0bffe17 	ldw	r2,-8(fp)
 1006c64:	10800810 	cmplti	r2,r2,32
 1006c68:	103fdd1e 	bne	r2,zero,1006be0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1006c6c:	e0bffd17 	ldw	r2,-12(fp)
}
 1006c70:	e037883a 	mov	sp,fp
 1006c74:	dfc00217 	ldw	ra,8(sp)
 1006c78:	df000117 	ldw	fp,4(sp)
 1006c7c:	dc000017 	ldw	r16,0(sp)
 1006c80:	dec00304 	addi	sp,sp,12
 1006c84:	f800283a 	ret

01006c88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1006c88:	deffff04 	addi	sp,sp,-4
 1006c8c:	df000015 	stw	fp,0(sp)
 1006c90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1006c94:	e037883a 	mov	sp,fp
 1006c98:	df000017 	ldw	fp,0(sp)
 1006c9c:	dec00104 	addi	sp,sp,4
 1006ca0:	f800283a 	ret

01006ca4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1006ca4:	defff904 	addi	sp,sp,-28
 1006ca8:	dfc00615 	stw	ra,24(sp)
 1006cac:	df000515 	stw	fp,20(sp)
 1006cb0:	df000504 	addi	fp,sp,20
 1006cb4:	e13ffc15 	stw	r4,-16(fp)
 1006cb8:	e17ffd15 	stw	r5,-12(fp)
 1006cbc:	e1bffe15 	stw	r6,-8(fp)
 1006cc0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1006cc4:	e0800217 	ldw	r2,8(fp)
 1006cc8:	d8800015 	stw	r2,0(sp)
 1006ccc:	e13ffc17 	ldw	r4,-16(fp)
 1006cd0:	e17ffd17 	ldw	r5,-12(fp)
 1006cd4:	e1bffe17 	ldw	r6,-8(fp)
 1006cd8:	e1ffff17 	ldw	r7,-4(fp)
 1006cdc:	1006e780 	call	1006e78 <alt_iic_isr_register>
}  
 1006ce0:	e037883a 	mov	sp,fp
 1006ce4:	dfc00117 	ldw	ra,4(sp)
 1006ce8:	df000017 	ldw	fp,0(sp)
 1006cec:	dec00204 	addi	sp,sp,8
 1006cf0:	f800283a 	ret

01006cf4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1006cf4:	defff904 	addi	sp,sp,-28
 1006cf8:	df000615 	stw	fp,24(sp)
 1006cfc:	df000604 	addi	fp,sp,24
 1006d00:	e13ffe15 	stw	r4,-8(fp)
 1006d04:	e17fff15 	stw	r5,-4(fp)
 1006d08:	e0bfff17 	ldw	r2,-4(fp)
 1006d0c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006d10:	0005303a 	rdctl	r2,status
 1006d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006d18:	e0fffb17 	ldw	r3,-20(fp)
 1006d1c:	00bfff84 	movi	r2,-2
 1006d20:	1884703a 	and	r2,r3,r2
 1006d24:	1001703a 	wrctl	status,r2
  
  return context;
 1006d28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1006d2c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1006d30:	e0fffc17 	ldw	r3,-16(fp)
 1006d34:	00800044 	movi	r2,1
 1006d38:	10c4983a 	sll	r2,r2,r3
 1006d3c:	1007883a 	mov	r3,r2
 1006d40:	00804074 	movhi	r2,257
 1006d44:	10acfd04 	addi	r2,r2,-19468
 1006d48:	10800017 	ldw	r2,0(r2)
 1006d4c:	1886b03a 	or	r3,r3,r2
 1006d50:	00804074 	movhi	r2,257
 1006d54:	10acfd04 	addi	r2,r2,-19468
 1006d58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1006d5c:	00804074 	movhi	r2,257
 1006d60:	10acfd04 	addi	r2,r2,-19468
 1006d64:	10800017 	ldw	r2,0(r2)
 1006d68:	100170fa 	wrctl	ienable,r2
 1006d6c:	e0bffd17 	ldw	r2,-12(fp)
 1006d70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006d74:	e0bffa17 	ldw	r2,-24(fp)
 1006d78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1006d7c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1006d80:	e037883a 	mov	sp,fp
 1006d84:	df000017 	ldw	fp,0(sp)
 1006d88:	dec00104 	addi	sp,sp,4
 1006d8c:	f800283a 	ret

01006d90 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1006d90:	defff904 	addi	sp,sp,-28
 1006d94:	df000615 	stw	fp,24(sp)
 1006d98:	df000604 	addi	fp,sp,24
 1006d9c:	e13ffe15 	stw	r4,-8(fp)
 1006da0:	e17fff15 	stw	r5,-4(fp)
 1006da4:	e0bfff17 	ldw	r2,-4(fp)
 1006da8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006dac:	0005303a 	rdctl	r2,status
 1006db0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006db4:	e0fffb17 	ldw	r3,-20(fp)
 1006db8:	00bfff84 	movi	r2,-2
 1006dbc:	1884703a 	and	r2,r3,r2
 1006dc0:	1001703a 	wrctl	status,r2
  
  return context;
 1006dc4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1006dc8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1006dcc:	e0fffc17 	ldw	r3,-16(fp)
 1006dd0:	00800044 	movi	r2,1
 1006dd4:	10c4983a 	sll	r2,r2,r3
 1006dd8:	0084303a 	nor	r2,zero,r2
 1006ddc:	1007883a 	mov	r3,r2
 1006de0:	00804074 	movhi	r2,257
 1006de4:	10acfd04 	addi	r2,r2,-19468
 1006de8:	10800017 	ldw	r2,0(r2)
 1006dec:	1886703a 	and	r3,r3,r2
 1006df0:	00804074 	movhi	r2,257
 1006df4:	10acfd04 	addi	r2,r2,-19468
 1006df8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1006dfc:	00804074 	movhi	r2,257
 1006e00:	10acfd04 	addi	r2,r2,-19468
 1006e04:	10800017 	ldw	r2,0(r2)
 1006e08:	100170fa 	wrctl	ienable,r2
 1006e0c:	e0bffd17 	ldw	r2,-12(fp)
 1006e10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006e14:	e0bffa17 	ldw	r2,-24(fp)
 1006e18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1006e1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1006e20:	e037883a 	mov	sp,fp
 1006e24:	df000017 	ldw	fp,0(sp)
 1006e28:	dec00104 	addi	sp,sp,4
 1006e2c:	f800283a 	ret

01006e30 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1006e30:	defffc04 	addi	sp,sp,-16
 1006e34:	df000315 	stw	fp,12(sp)
 1006e38:	df000304 	addi	fp,sp,12
 1006e3c:	e13ffe15 	stw	r4,-8(fp)
 1006e40:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1006e44:	000530fa 	rdctl	r2,ienable
 1006e48:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1006e4c:	e0ffff17 	ldw	r3,-4(fp)
 1006e50:	00800044 	movi	r2,1
 1006e54:	10c4983a 	sll	r2,r2,r3
 1006e58:	1007883a 	mov	r3,r2
 1006e5c:	e0bffd17 	ldw	r2,-12(fp)
 1006e60:	1884703a 	and	r2,r3,r2
 1006e64:	1004c03a 	cmpne	r2,r2,zero
}
 1006e68:	e037883a 	mov	sp,fp
 1006e6c:	df000017 	ldw	fp,0(sp)
 1006e70:	dec00104 	addi	sp,sp,4
 1006e74:	f800283a 	ret

01006e78 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1006e78:	defff404 	addi	sp,sp,-48
 1006e7c:	dfc00b15 	stw	ra,44(sp)
 1006e80:	df000a15 	stw	fp,40(sp)
 1006e84:	df000a04 	addi	fp,sp,40
 1006e88:	e13ffb15 	stw	r4,-20(fp)
 1006e8c:	e17ffc15 	stw	r5,-16(fp)
 1006e90:	e1bffd15 	stw	r6,-12(fp)
 1006e94:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1006e98:	00bffa84 	movi	r2,-22
 1006e9c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1006ea0:	e0bffc17 	ldw	r2,-16(fp)
 1006ea4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1006ea8:	e0bff917 	ldw	r2,-28(fp)
 1006eac:	10800808 	cmpgei	r2,r2,32
 1006eb0:	1000291e 	bne	r2,zero,1006f58 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006eb4:	0005303a 	rdctl	r2,status
 1006eb8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006ebc:	e0fff717 	ldw	r3,-36(fp)
 1006ec0:	00bfff84 	movi	r2,-2
 1006ec4:	1884703a 	and	r2,r3,r2
 1006ec8:	1001703a 	wrctl	status,r2
  
  return context;
 1006ecc:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1006ed0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1006ed4:	e0bff917 	ldw	r2,-28(fp)
 1006ed8:	00c04074 	movhi	r3,257
 1006edc:	18ed0a04 	addi	r3,r3,-19416
 1006ee0:	100490fa 	slli	r2,r2,3
 1006ee4:	10c7883a 	add	r3,r2,r3
 1006ee8:	e0bffd17 	ldw	r2,-12(fp)
 1006eec:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1006ef0:	e0bff917 	ldw	r2,-28(fp)
 1006ef4:	00c04074 	movhi	r3,257
 1006ef8:	18ed0a04 	addi	r3,r3,-19416
 1006efc:	100490fa 	slli	r2,r2,3
 1006f00:	10c5883a 	add	r2,r2,r3
 1006f04:	10c00104 	addi	r3,r2,4
 1006f08:	e0bffe17 	ldw	r2,-8(fp)
 1006f0c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1006f10:	e0bffd17 	ldw	r2,-12(fp)
 1006f14:	1005003a 	cmpeq	r2,r2,zero
 1006f18:	1000051e 	bne	r2,zero,1006f30 <alt_iic_isr_register+0xb8>
 1006f1c:	e17ff917 	ldw	r5,-28(fp)
 1006f20:	e13ffb17 	ldw	r4,-20(fp)
 1006f24:	1006cf40 	call	1006cf4 <alt_ic_irq_enable>
 1006f28:	e0bfff15 	stw	r2,-4(fp)
 1006f2c:	00000406 	br	1006f40 <alt_iic_isr_register+0xc8>
 1006f30:	e17ff917 	ldw	r5,-28(fp)
 1006f34:	e13ffb17 	ldw	r4,-20(fp)
 1006f38:	1006d900 	call	1006d90 <alt_ic_irq_disable>
 1006f3c:	e0bfff15 	stw	r2,-4(fp)
 1006f40:	e0bfff17 	ldw	r2,-4(fp)
 1006f44:	e0bffa15 	stw	r2,-24(fp)
 1006f48:	e0bff817 	ldw	r2,-32(fp)
 1006f4c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006f50:	e0bff617 	ldw	r2,-40(fp)
 1006f54:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1006f58:	e0bffa17 	ldw	r2,-24(fp)
}
 1006f5c:	e037883a 	mov	sp,fp
 1006f60:	dfc00117 	ldw	ra,4(sp)
 1006f64:	df000017 	ldw	fp,0(sp)
 1006f68:	dec00204 	addi	sp,sp,8
 1006f6c:	f800283a 	ret

01006f70 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1006f70:	defff804 	addi	sp,sp,-32
 1006f74:	dfc00715 	stw	ra,28(sp)
 1006f78:	df000615 	stw	fp,24(sp)
 1006f7c:	dc000515 	stw	r16,20(sp)
 1006f80:	df000504 	addi	fp,sp,20
 1006f84:	e13ffc15 	stw	r4,-16(fp)
 1006f88:	e17ffd15 	stw	r5,-12(fp)
 1006f8c:	e1bffe15 	stw	r6,-8(fp)
 1006f90:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1006f94:	e13ffd17 	ldw	r4,-12(fp)
 1006f98:	e17ffe17 	ldw	r5,-8(fp)
 1006f9c:	e1bfff17 	ldw	r6,-4(fp)
 1006fa0:	100421c0 	call	100421c <open>
 1006fa4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1006fa8:	e0bffb17 	ldw	r2,-20(fp)
 1006fac:	1004803a 	cmplt	r2,r2,zero
 1006fb0:	10001f1e 	bne	r2,zero,1007030 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1006fb4:	e13ffb17 	ldw	r4,-20(fp)
 1006fb8:	04004074 	movhi	r16,257
 1006fbc:	8420f104 	addi	r16,r16,-31804
 1006fc0:	01400304 	movi	r5,12
 1006fc4:	1003a180 	call	1003a18 <__mulsi3>
 1006fc8:	1405883a 	add	r2,r2,r16
 1006fcc:	10c00017 	ldw	r3,0(r2)
 1006fd0:	e0bffc17 	ldw	r2,-16(fp)
 1006fd4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1006fd8:	e13ffb17 	ldw	r4,-20(fp)
 1006fdc:	04004074 	movhi	r16,257
 1006fe0:	8420f104 	addi	r16,r16,-31804
 1006fe4:	01400304 	movi	r5,12
 1006fe8:	1003a180 	call	1003a18 <__mulsi3>
 1006fec:	1405883a 	add	r2,r2,r16
 1006ff0:	10800104 	addi	r2,r2,4
 1006ff4:	10c00017 	ldw	r3,0(r2)
 1006ff8:	e0bffc17 	ldw	r2,-16(fp)
 1006ffc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1007000:	e13ffb17 	ldw	r4,-20(fp)
 1007004:	04004074 	movhi	r16,257
 1007008:	8420f104 	addi	r16,r16,-31804
 100700c:	01400304 	movi	r5,12
 1007010:	1003a180 	call	1003a18 <__mulsi3>
 1007014:	1405883a 	add	r2,r2,r16
 1007018:	10800204 	addi	r2,r2,8
 100701c:	10c00017 	ldw	r3,0(r2)
 1007020:	e0bffc17 	ldw	r2,-16(fp)
 1007024:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1007028:	e13ffb17 	ldw	r4,-20(fp)
 100702c:	100458c0 	call	100458c <alt_release_fd>
  }
} 
 1007030:	e037883a 	mov	sp,fp
 1007034:	dfc00217 	ldw	ra,8(sp)
 1007038:	df000117 	ldw	fp,4(sp)
 100703c:	dc000017 	ldw	r16,0(sp)
 1007040:	dec00304 	addi	sp,sp,12
 1007044:	f800283a 	ret

01007048 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1007048:	defffb04 	addi	sp,sp,-20
 100704c:	dfc00415 	stw	ra,16(sp)
 1007050:	df000315 	stw	fp,12(sp)
 1007054:	df000304 	addi	fp,sp,12
 1007058:	e13ffd15 	stw	r4,-12(fp)
 100705c:	e17ffe15 	stw	r5,-8(fp)
 1007060:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1007064:	01004074 	movhi	r4,257
 1007068:	2120f404 	addi	r4,r4,-31792
 100706c:	e17ffd17 	ldw	r5,-12(fp)
 1007070:	01800044 	movi	r6,1
 1007074:	01c07fc4 	movi	r7,511
 1007078:	1006f700 	call	1006f70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100707c:	01004074 	movhi	r4,257
 1007080:	2120f104 	addi	r4,r4,-31804
 1007084:	e17ffe17 	ldw	r5,-8(fp)
 1007088:	000d883a 	mov	r6,zero
 100708c:	01c07fc4 	movi	r7,511
 1007090:	1006f700 	call	1006f70 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1007094:	01004074 	movhi	r4,257
 1007098:	2120f704 	addi	r4,r4,-31780
 100709c:	e17fff17 	ldw	r5,-4(fp)
 10070a0:	01800044 	movi	r6,1
 10070a4:	01c07fc4 	movi	r7,511
 10070a8:	1006f700 	call	1006f70 <alt_open_fd>
}  
 10070ac:	e037883a 	mov	sp,fp
 10070b0:	dfc00117 	ldw	ra,4(sp)
 10070b4:	df000017 	ldw	fp,0(sp)
 10070b8:	dec00204 	addi	sp,sp,8
 10070bc:	f800283a 	ret

010070c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10070c0:	defffa04 	addi	sp,sp,-24
 10070c4:	df000515 	stw	fp,20(sp)
 10070c8:	df000504 	addi	fp,sp,20
 10070cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10070d0:	0005303a 	rdctl	r2,status
 10070d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10070d8:	e0fffd17 	ldw	r3,-12(fp)
 10070dc:	00bfff84 	movi	r2,-2
 10070e0:	1884703a 	and	r2,r3,r2
 10070e4:	1001703a 	wrctl	status,r2
  
  return context;
 10070e8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10070ec:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 10070f0:	e0bfff17 	ldw	r2,-4(fp)
 10070f4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10070f8:	e0bffc17 	ldw	r2,-16(fp)
 10070fc:	10c00017 	ldw	r3,0(r2)
 1007100:	e0bffc17 	ldw	r2,-16(fp)
 1007104:	10800117 	ldw	r2,4(r2)
 1007108:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100710c:	e0bffc17 	ldw	r2,-16(fp)
 1007110:	10c00117 	ldw	r3,4(r2)
 1007114:	e0bffc17 	ldw	r2,-16(fp)
 1007118:	10800017 	ldw	r2,0(r2)
 100711c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1007120:	e0fffc17 	ldw	r3,-16(fp)
 1007124:	e0bffc17 	ldw	r2,-16(fp)
 1007128:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100712c:	e0fffc17 	ldw	r3,-16(fp)
 1007130:	e0bffc17 	ldw	r2,-16(fp)
 1007134:	18800015 	stw	r2,0(r3)
 1007138:	e0bffe17 	ldw	r2,-8(fp)
 100713c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007140:	e0bffb17 	ldw	r2,-20(fp)
 1007144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1007148:	e037883a 	mov	sp,fp
 100714c:	df000017 	ldw	fp,0(sp)
 1007150:	dec00104 	addi	sp,sp,4
 1007154:	f800283a 	ret

01007158 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1007158:	defffb04 	addi	sp,sp,-20
 100715c:	dfc00415 	stw	ra,16(sp)
 1007160:	df000315 	stw	fp,12(sp)
 1007164:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1007168:	d0a00d17 	ldw	r2,-32716(gp)
 100716c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1007170:	d0a72217 	ldw	r2,-25464(gp)
 1007174:	10800044 	addi	r2,r2,1
 1007178:	d0a72215 	stw	r2,-25464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100717c:	00003106 	br	1007244 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1007180:	e0bffe17 	ldw	r2,-8(fp)
 1007184:	10800017 	ldw	r2,0(r2)
 1007188:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100718c:	e0bffe17 	ldw	r2,-8(fp)
 1007190:	10800403 	ldbu	r2,16(r2)
 1007194:	10803fcc 	andi	r2,r2,255
 1007198:	1005003a 	cmpeq	r2,r2,zero
 100719c:	1000051e 	bne	r2,zero,10071b4 <alt_tick+0x5c>
 10071a0:	d0a72217 	ldw	r2,-25464(gp)
 10071a4:	1004c03a 	cmpne	r2,r2,zero
 10071a8:	1000021e 	bne	r2,zero,10071b4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 10071ac:	e0bffe17 	ldw	r2,-8(fp)
 10071b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10071b4:	e0bffe17 	ldw	r2,-8(fp)
 10071b8:	10c00217 	ldw	r3,8(r2)
 10071bc:	d0a72217 	ldw	r2,-25464(gp)
 10071c0:	10c01e36 	bltu	r2,r3,100723c <alt_tick+0xe4>
 10071c4:	e0bffe17 	ldw	r2,-8(fp)
 10071c8:	10800403 	ldbu	r2,16(r2)
 10071cc:	10803fcc 	andi	r2,r2,255
 10071d0:	1004c03a 	cmpne	r2,r2,zero
 10071d4:	1000191e 	bne	r2,zero,100723c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 10071d8:	e0bffe17 	ldw	r2,-8(fp)
 10071dc:	10c00317 	ldw	r3,12(r2)
 10071e0:	e0bffe17 	ldw	r2,-8(fp)
 10071e4:	11000517 	ldw	r4,20(r2)
 10071e8:	183ee83a 	callr	r3
 10071ec:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10071f0:	e0bffd17 	ldw	r2,-12(fp)
 10071f4:	1004c03a 	cmpne	r2,r2,zero
 10071f8:	1000031e 	bne	r2,zero,1007208 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10071fc:	e13ffe17 	ldw	r4,-8(fp)
 1007200:	10070c00 	call	10070c0 <alt_alarm_stop>
 1007204:	00000d06 	br	100723c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1007208:	e0bffe17 	ldw	r2,-8(fp)
 100720c:	10c00217 	ldw	r3,8(r2)
 1007210:	e0bffd17 	ldw	r2,-12(fp)
 1007214:	1887883a 	add	r3,r3,r2
 1007218:	e0bffe17 	ldw	r2,-8(fp)
 100721c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1007220:	e0bffe17 	ldw	r2,-8(fp)
 1007224:	10c00217 	ldw	r3,8(r2)
 1007228:	d0a72217 	ldw	r2,-25464(gp)
 100722c:	1880032e 	bgeu	r3,r2,100723c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1007230:	e0fffe17 	ldw	r3,-8(fp)
 1007234:	00800044 	movi	r2,1
 1007238:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100723c:	e0bfff17 	ldw	r2,-4(fp)
 1007240:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1007244:	d0e00d04 	addi	r3,gp,-32716
 1007248:	e0bffe17 	ldw	r2,-8(fp)
 100724c:	10ffcc1e 	bne	r2,r3,1007180 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1007250:	e037883a 	mov	sp,fp
 1007254:	dfc00117 	ldw	ra,4(sp)
 1007258:	df000017 	ldw	fp,0(sp)
 100725c:	dec00204 	addi	sp,sp,8
 1007260:	f800283a 	ret

01007264 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 1007264:	defffd04 	addi	sp,sp,-12
 1007268:	dfc00215 	stw	ra,8(sp)
 100726c:	df000115 	stw	fp,4(sp)
 1007270:	df000104 	addi	fp,sp,4
 1007274:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1007278:	e13fff17 	ldw	r4,-4(fp)
 100727c:	10072b40 	call	10072b4 <alt_busy_sleep>
}
 1007280:	e037883a 	mov	sp,fp
 1007284:	dfc00117 	ldw	ra,4(sp)
 1007288:	df000017 	ldw	fp,0(sp)
 100728c:	dec00204 	addi	sp,sp,8
 1007290:	f800283a 	ret

01007294 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1007294:	deffff04 	addi	sp,sp,-4
 1007298:	df000015 	stw	fp,0(sp)
 100729c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10072a0:	000170fa 	wrctl	ienable,zero
}
 10072a4:	e037883a 	mov	sp,fp
 10072a8:	df000017 	ldw	fp,0(sp)
 10072ac:	dec00104 	addi	sp,sp,4
 10072b0:	f800283a 	ret

010072b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10072b4:	defffa04 	addi	sp,sp,-24
 10072b8:	dfc00515 	stw	ra,20(sp)
 10072bc:	df000415 	stw	fp,16(sp)
 10072c0:	df000404 	addi	fp,sp,16
 10072c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 10072c8:	00800244 	movi	r2,9
 10072cc:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 10072d0:	e13ffc17 	ldw	r4,-16(fp)
 10072d4:	014003f4 	movhi	r5,15
 10072d8:	29509004 	addi	r5,r5,16960
 10072dc:	1003a180 	call	1003a18 <__mulsi3>
 10072e0:	100b883a 	mov	r5,r2
 10072e4:	0100bef4 	movhi	r4,763
 10072e8:	213c2004 	addi	r4,r4,-3968
 10072ec:	1003a080 	call	1003a08 <__udivsi3>
 10072f0:	100b883a 	mov	r5,r2
 10072f4:	01200034 	movhi	r4,32768
 10072f8:	213fffc4 	addi	r4,r4,-1
 10072fc:	1003a080 	call	1003a08 <__udivsi3>
 1007300:	100b883a 	mov	r5,r2
 1007304:	e13fff17 	ldw	r4,-4(fp)
 1007308:	1003a080 	call	1003a08 <__udivsi3>
 100730c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1007310:	e0bffd17 	ldw	r2,-12(fp)
 1007314:	1005003a 	cmpeq	r2,r2,zero
 1007318:	10002a1e 	bne	r2,zero,10073c4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 100731c:	e03ffe15 	stw	zero,-8(fp)
 1007320:	00001706 	br	1007380 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1007324:	00a00034 	movhi	r2,32768
 1007328:	10bfffc4 	addi	r2,r2,-1
 100732c:	10bfffc4 	addi	r2,r2,-1
 1007330:	103ffe1e 	bne	r2,zero,100732c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1007334:	e13ffc17 	ldw	r4,-16(fp)
 1007338:	014003f4 	movhi	r5,15
 100733c:	29509004 	addi	r5,r5,16960
 1007340:	1003a180 	call	1003a18 <__mulsi3>
 1007344:	100b883a 	mov	r5,r2
 1007348:	0100bef4 	movhi	r4,763
 100734c:	213c2004 	addi	r4,r4,-3968
 1007350:	1003a080 	call	1003a08 <__udivsi3>
 1007354:	100b883a 	mov	r5,r2
 1007358:	01200034 	movhi	r4,32768
 100735c:	213fffc4 	addi	r4,r4,-1
 1007360:	1003a080 	call	1003a08 <__udivsi3>
 1007364:	1007883a 	mov	r3,r2
 1007368:	e0bfff17 	ldw	r2,-4(fp)
 100736c:	10c5c83a 	sub	r2,r2,r3
 1007370:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1007374:	e0bffe17 	ldw	r2,-8(fp)
 1007378:	10800044 	addi	r2,r2,1
 100737c:	e0bffe15 	stw	r2,-8(fp)
 1007380:	e0fffe17 	ldw	r3,-8(fp)
 1007384:	e0bffd17 	ldw	r2,-12(fp)
 1007388:	18bfe616 	blt	r3,r2,1007324 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100738c:	e13ffc17 	ldw	r4,-16(fp)
 1007390:	014003f4 	movhi	r5,15
 1007394:	29509004 	addi	r5,r5,16960
 1007398:	1003a180 	call	1003a18 <__mulsi3>
 100739c:	100b883a 	mov	r5,r2
 10073a0:	0100bef4 	movhi	r4,763
 10073a4:	213c2004 	addi	r4,r4,-3968
 10073a8:	1003a080 	call	1003a08 <__udivsi3>
 10073ac:	1009883a 	mov	r4,r2
 10073b0:	e17fff17 	ldw	r5,-4(fp)
 10073b4:	1003a180 	call	1003a18 <__mulsi3>
 10073b8:	10bfffc4 	addi	r2,r2,-1
 10073bc:	103ffe1e 	bne	r2,zero,10073b8 <alt_busy_sleep+0x104>
 10073c0:	00000d06 	br	10073f8 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10073c4:	e13ffc17 	ldw	r4,-16(fp)
 10073c8:	014003f4 	movhi	r5,15
 10073cc:	29509004 	addi	r5,r5,16960
 10073d0:	1003a180 	call	1003a18 <__mulsi3>
 10073d4:	100b883a 	mov	r5,r2
 10073d8:	0100bef4 	movhi	r4,763
 10073dc:	213c2004 	addi	r4,r4,-3968
 10073e0:	1003a080 	call	1003a08 <__udivsi3>
 10073e4:	1009883a 	mov	r4,r2
 10073e8:	e17fff17 	ldw	r5,-4(fp)
 10073ec:	1003a180 	call	1003a18 <__mulsi3>
 10073f0:	10bfffc4 	addi	r2,r2,-1
 10073f4:	00bffe16 	blt	zero,r2,10073f0 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 10073f8:	0005883a 	mov	r2,zero
}
 10073fc:	e037883a 	mov	sp,fp
 1007400:	dfc00117 	ldw	ra,4(sp)
 1007404:	df000017 	ldw	fp,0(sp)
 1007408:	dec00204 	addi	sp,sp,8
 100740c:	f800283a 	ret

01007410 <atexit>:
 1007410:	200b883a 	mov	r5,r4
 1007414:	000d883a 	mov	r6,zero
 1007418:	0009883a 	mov	r4,zero
 100741c:	000f883a 	mov	r7,zero
 1007420:	10074d01 	jmpi	10074d0 <__register_exitproc>

01007424 <exit>:
 1007424:	defffe04 	addi	sp,sp,-8
 1007428:	000b883a 	mov	r5,zero
 100742c:	dc000015 	stw	r16,0(sp)
 1007430:	dfc00115 	stw	ra,4(sp)
 1007434:	2021883a 	mov	r16,r4
 1007438:	10076080 	call	1007608 <__call_exitprocs>
 100743c:	00804074 	movhi	r2,257
 1007440:	10a5de04 	addi	r2,r2,-26760
 1007444:	11000017 	ldw	r4,0(r2)
 1007448:	20800f17 	ldw	r2,60(r4)
 100744c:	10000126 	beq	r2,zero,1007454 <exit+0x30>
 1007450:	103ee83a 	callr	r2
 1007454:	8009883a 	mov	r4,r16
 1007458:	10077f80 	call	10077f8 <_exit>

0100745c <memcmp>:
 100745c:	00c000c4 	movi	r3,3
 1007460:	1980032e 	bgeu	r3,r6,1007470 <memcmp+0x14>
 1007464:	2144b03a 	or	r2,r4,r5
 1007468:	10c4703a 	and	r2,r2,r3
 100746c:	10000f26 	beq	r2,zero,10074ac <memcmp+0x50>
 1007470:	31ffffc4 	addi	r7,r6,-1
 1007474:	3000061e 	bne	r6,zero,1007490 <memcmp+0x34>
 1007478:	00000a06 	br	10074a4 <memcmp+0x48>
 100747c:	39ffffc4 	addi	r7,r7,-1
 1007480:	00bfffc4 	movi	r2,-1
 1007484:	21000044 	addi	r4,r4,1
 1007488:	29400044 	addi	r5,r5,1
 100748c:	38800526 	beq	r7,r2,10074a4 <memcmp+0x48>
 1007490:	20c00003 	ldbu	r3,0(r4)
 1007494:	28800003 	ldbu	r2,0(r5)
 1007498:	18bff826 	beq	r3,r2,100747c <memcmp+0x20>
 100749c:	1885c83a 	sub	r2,r3,r2
 10074a0:	f800283a 	ret
 10074a4:	0005883a 	mov	r2,zero
 10074a8:	f800283a 	ret
 10074ac:	180f883a 	mov	r7,r3
 10074b0:	20c00017 	ldw	r3,0(r4)
 10074b4:	28800017 	ldw	r2,0(r5)
 10074b8:	18bfed1e 	bne	r3,r2,1007470 <memcmp+0x14>
 10074bc:	31bfff04 	addi	r6,r6,-4
 10074c0:	21000104 	addi	r4,r4,4
 10074c4:	29400104 	addi	r5,r5,4
 10074c8:	39bff936 	bltu	r7,r6,10074b0 <memcmp+0x54>
 10074cc:	003fe806 	br	1007470 <memcmp+0x14>

010074d0 <__register_exitproc>:
 10074d0:	defffa04 	addi	sp,sp,-24
 10074d4:	00804074 	movhi	r2,257
 10074d8:	10a5de04 	addi	r2,r2,-26760
 10074dc:	dc000015 	stw	r16,0(sp)
 10074e0:	14000017 	ldw	r16,0(r2)
 10074e4:	dd000415 	stw	r20,16(sp)
 10074e8:	2829883a 	mov	r20,r5
 10074ec:	81405217 	ldw	r5,328(r16)
 10074f0:	dcc00315 	stw	r19,12(sp)
 10074f4:	dc800215 	stw	r18,8(sp)
 10074f8:	dc400115 	stw	r17,4(sp)
 10074fc:	dfc00515 	stw	ra,20(sp)
 1007500:	2023883a 	mov	r17,r4
 1007504:	3027883a 	mov	r19,r6
 1007508:	3825883a 	mov	r18,r7
 100750c:	28002526 	beq	r5,zero,10075a4 <__register_exitproc+0xd4>
 1007510:	29000117 	ldw	r4,4(r5)
 1007514:	008007c4 	movi	r2,31
 1007518:	11002716 	blt	r2,r4,10075b8 <__register_exitproc+0xe8>
 100751c:	8800101e 	bne	r17,zero,1007560 <__register_exitproc+0x90>
 1007520:	2105883a 	add	r2,r4,r4
 1007524:	1085883a 	add	r2,r2,r2
 1007528:	20c00044 	addi	r3,r4,1
 100752c:	1145883a 	add	r2,r2,r5
 1007530:	0009883a 	mov	r4,zero
 1007534:	15000215 	stw	r20,8(r2)
 1007538:	28c00115 	stw	r3,4(r5)
 100753c:	2005883a 	mov	r2,r4
 1007540:	dfc00517 	ldw	ra,20(sp)
 1007544:	dd000417 	ldw	r20,16(sp)
 1007548:	dcc00317 	ldw	r19,12(sp)
 100754c:	dc800217 	ldw	r18,8(sp)
 1007550:	dc400117 	ldw	r17,4(sp)
 1007554:	dc000017 	ldw	r16,0(sp)
 1007558:	dec00604 	addi	sp,sp,24
 100755c:	f800283a 	ret
 1007560:	29802204 	addi	r6,r5,136
 1007564:	00800044 	movi	r2,1
 1007568:	110e983a 	sll	r7,r2,r4
 100756c:	30c04017 	ldw	r3,256(r6)
 1007570:	2105883a 	add	r2,r4,r4
 1007574:	1085883a 	add	r2,r2,r2
 1007578:	1185883a 	add	r2,r2,r6
 100757c:	19c6b03a 	or	r3,r3,r7
 1007580:	14802015 	stw	r18,128(r2)
 1007584:	14c00015 	stw	r19,0(r2)
 1007588:	00800084 	movi	r2,2
 100758c:	30c04015 	stw	r3,256(r6)
 1007590:	88bfe31e 	bne	r17,r2,1007520 <__register_exitproc+0x50>
 1007594:	30804117 	ldw	r2,260(r6)
 1007598:	11c4b03a 	or	r2,r2,r7
 100759c:	30804115 	stw	r2,260(r6)
 10075a0:	003fdf06 	br	1007520 <__register_exitproc+0x50>
 10075a4:	00804074 	movhi	r2,257
 10075a8:	10ad4a04 	addi	r2,r2,-19160
 10075ac:	100b883a 	mov	r5,r2
 10075b0:	80805215 	stw	r2,328(r16)
 10075b4:	003fd606 	br	1007510 <__register_exitproc+0x40>
 10075b8:	00804034 	movhi	r2,256
 10075bc:	10878304 	addi	r2,r2,7692
 10075c0:	1000021e 	bne	r2,zero,10075cc <__register_exitproc+0xfc>
 10075c4:	013fffc4 	movi	r4,-1
 10075c8:	003fdc06 	br	100753c <__register_exitproc+0x6c>
 10075cc:	01006404 	movi	r4,400
 10075d0:	103ee83a 	callr	r2
 10075d4:	1007883a 	mov	r3,r2
 10075d8:	103ffa26 	beq	r2,zero,10075c4 <__register_exitproc+0xf4>
 10075dc:	80805217 	ldw	r2,328(r16)
 10075e0:	180b883a 	mov	r5,r3
 10075e4:	18000115 	stw	zero,4(r3)
 10075e8:	18800015 	stw	r2,0(r3)
 10075ec:	80c05215 	stw	r3,328(r16)
 10075f0:	18006215 	stw	zero,392(r3)
 10075f4:	18006315 	stw	zero,396(r3)
 10075f8:	0009883a 	mov	r4,zero
 10075fc:	883fc826 	beq	r17,zero,1007520 <__register_exitproc+0x50>
 1007600:	003fd706 	br	1007560 <__register_exitproc+0x90>

01007604 <register_fini>:
 1007604:	f800283a 	ret

01007608 <__call_exitprocs>:
 1007608:	00804074 	movhi	r2,257
 100760c:	10a5de04 	addi	r2,r2,-26760
 1007610:	10800017 	ldw	r2,0(r2)
 1007614:	defff304 	addi	sp,sp,-52
 1007618:	df000b15 	stw	fp,44(sp)
 100761c:	d8800115 	stw	r2,4(sp)
 1007620:	00804034 	movhi	r2,256
 1007624:	10877e04 	addi	r2,r2,7672
 1007628:	1005003a 	cmpeq	r2,r2,zero
 100762c:	d8800215 	stw	r2,8(sp)
 1007630:	d8800117 	ldw	r2,4(sp)
 1007634:	dd400815 	stw	r21,32(sp)
 1007638:	dd000715 	stw	r20,28(sp)
 100763c:	10805204 	addi	r2,r2,328
 1007640:	dfc00c15 	stw	ra,48(sp)
 1007644:	ddc00a15 	stw	r23,40(sp)
 1007648:	dd800915 	stw	r22,36(sp)
 100764c:	dcc00615 	stw	r19,24(sp)
 1007650:	dc800515 	stw	r18,20(sp)
 1007654:	dc400415 	stw	r17,16(sp)
 1007658:	dc000315 	stw	r16,12(sp)
 100765c:	282b883a 	mov	r21,r5
 1007660:	2039883a 	mov	fp,r4
 1007664:	d8800015 	stw	r2,0(sp)
 1007668:	2829003a 	cmpeq	r20,r5,zero
 100766c:	d8800117 	ldw	r2,4(sp)
 1007670:	14405217 	ldw	r17,328(r2)
 1007674:	88001026 	beq	r17,zero,10076b8 <__call_exitprocs+0xb0>
 1007678:	ddc00017 	ldw	r23,0(sp)
 100767c:	88800117 	ldw	r2,4(r17)
 1007680:	8c802204 	addi	r18,r17,136
 1007684:	143fffc4 	addi	r16,r2,-1
 1007688:	80000916 	blt	r16,zero,10076b0 <__call_exitprocs+0xa8>
 100768c:	05bfffc4 	movi	r22,-1
 1007690:	a000151e 	bne	r20,zero,10076e8 <__call_exitprocs+0xe0>
 1007694:	8409883a 	add	r4,r16,r16
 1007698:	2105883a 	add	r2,r4,r4
 100769c:	1485883a 	add	r2,r2,r18
 10076a0:	10c02017 	ldw	r3,128(r2)
 10076a4:	a8c01126 	beq	r21,r3,10076ec <__call_exitprocs+0xe4>
 10076a8:	843fffc4 	addi	r16,r16,-1
 10076ac:	85bff81e 	bne	r16,r22,1007690 <__call_exitprocs+0x88>
 10076b0:	d8800217 	ldw	r2,8(sp)
 10076b4:	10003126 	beq	r2,zero,100777c <__call_exitprocs+0x174>
 10076b8:	dfc00c17 	ldw	ra,48(sp)
 10076bc:	df000b17 	ldw	fp,44(sp)
 10076c0:	ddc00a17 	ldw	r23,40(sp)
 10076c4:	dd800917 	ldw	r22,36(sp)
 10076c8:	dd400817 	ldw	r21,32(sp)
 10076cc:	dd000717 	ldw	r20,28(sp)
 10076d0:	dcc00617 	ldw	r19,24(sp)
 10076d4:	dc800517 	ldw	r18,20(sp)
 10076d8:	dc400417 	ldw	r17,16(sp)
 10076dc:	dc000317 	ldw	r16,12(sp)
 10076e0:	dec00d04 	addi	sp,sp,52
 10076e4:	f800283a 	ret
 10076e8:	8409883a 	add	r4,r16,r16
 10076ec:	88c00117 	ldw	r3,4(r17)
 10076f0:	2105883a 	add	r2,r4,r4
 10076f4:	1445883a 	add	r2,r2,r17
 10076f8:	18ffffc4 	addi	r3,r3,-1
 10076fc:	11800217 	ldw	r6,8(r2)
 1007700:	1c001526 	beq	r3,r16,1007758 <__call_exitprocs+0x150>
 1007704:	10000215 	stw	zero,8(r2)
 1007708:	303fe726 	beq	r6,zero,10076a8 <__call_exitprocs+0xa0>
 100770c:	00c00044 	movi	r3,1
 1007710:	1c06983a 	sll	r3,r3,r16
 1007714:	90804017 	ldw	r2,256(r18)
 1007718:	8cc00117 	ldw	r19,4(r17)
 100771c:	1884703a 	and	r2,r3,r2
 1007720:	10001426 	beq	r2,zero,1007774 <__call_exitprocs+0x16c>
 1007724:	90804117 	ldw	r2,260(r18)
 1007728:	1884703a 	and	r2,r3,r2
 100772c:	10000c1e 	bne	r2,zero,1007760 <__call_exitprocs+0x158>
 1007730:	2105883a 	add	r2,r4,r4
 1007734:	1485883a 	add	r2,r2,r18
 1007738:	11400017 	ldw	r5,0(r2)
 100773c:	e009883a 	mov	r4,fp
 1007740:	303ee83a 	callr	r6
 1007744:	88800117 	ldw	r2,4(r17)
 1007748:	98bfc81e 	bne	r19,r2,100766c <__call_exitprocs+0x64>
 100774c:	b8800017 	ldw	r2,0(r23)
 1007750:	147fd526 	beq	r2,r17,10076a8 <__call_exitprocs+0xa0>
 1007754:	003fc506 	br	100766c <__call_exitprocs+0x64>
 1007758:	8c000115 	stw	r16,4(r17)
 100775c:	003fea06 	br	1007708 <__call_exitprocs+0x100>
 1007760:	2105883a 	add	r2,r4,r4
 1007764:	1485883a 	add	r2,r2,r18
 1007768:	11000017 	ldw	r4,0(r2)
 100776c:	303ee83a 	callr	r6
 1007770:	003ff406 	br	1007744 <__call_exitprocs+0x13c>
 1007774:	303ee83a 	callr	r6
 1007778:	003ff206 	br	1007744 <__call_exitprocs+0x13c>
 100777c:	88800117 	ldw	r2,4(r17)
 1007780:	1000081e 	bne	r2,zero,10077a4 <__call_exitprocs+0x19c>
 1007784:	89000017 	ldw	r4,0(r17)
 1007788:	20000726 	beq	r4,zero,10077a8 <__call_exitprocs+0x1a0>
 100778c:	b9000015 	stw	r4,0(r23)
 1007790:	8809883a 	mov	r4,r17
 1007794:	1001df80 	call	1001df8 <free>
 1007798:	bc400017 	ldw	r17,0(r23)
 100779c:	883fb71e 	bne	r17,zero,100767c <__call_exitprocs+0x74>
 10077a0:	003fc506 	br	10076b8 <__call_exitprocs+0xb0>
 10077a4:	89000017 	ldw	r4,0(r17)
 10077a8:	882f883a 	mov	r23,r17
 10077ac:	2023883a 	mov	r17,r4
 10077b0:	883fb21e 	bne	r17,zero,100767c <__call_exitprocs+0x74>
 10077b4:	003fc006 	br	10076b8 <__call_exitprocs+0xb0>

010077b8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10077b8:	defffd04 	addi	sp,sp,-12
 10077bc:	df000215 	stw	fp,8(sp)
 10077c0:	df000204 	addi	fp,sp,8
 10077c4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10077c8:	e0bfff17 	ldw	r2,-4(fp)
 10077cc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10077d0:	e0bffe17 	ldw	r2,-8(fp)
 10077d4:	1005003a 	cmpeq	r2,r2,zero
 10077d8:	1000021e 	bne	r2,zero,10077e4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 10077dc:	002af070 	cmpltui	zero,zero,43969
 10077e0:	00000106 	br	10077e8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 10077e4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 10077e8:	e037883a 	mov	sp,fp
 10077ec:	df000017 	ldw	fp,0(sp)
 10077f0:	dec00104 	addi	sp,sp,4
 10077f4:	f800283a 	ret

010077f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10077f8:	defffd04 	addi	sp,sp,-12
 10077fc:	dfc00215 	stw	ra,8(sp)
 1007800:	df000115 	stw	fp,4(sp)
 1007804:	df000104 	addi	fp,sp,4
 1007808:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100780c:	e13fff17 	ldw	r4,-4(fp)
 1007810:	10077b80 	call	10077b8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1007814:	003fff06 	br	1007814 <_exit+0x1c>
 1007818:	01007604 	movi	r4,472
